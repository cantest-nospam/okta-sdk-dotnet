/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// OpenIdConnectApplicationIdpInitiatedLogin
    /// </summary>
    [DataContract]
        public partial class OpenIdConnectApplicationIdpInitiatedLogin :  IEquatable<OpenIdConnectApplicationIdpInitiatedLogin>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenIdConnectApplicationIdpInitiatedLogin" /> class.
        /// </summary>
        /// <param name="mode">mode.</param>
        /// <param name="defaultScope">defaultScope.</param>
        public OpenIdConnectApplicationIdpInitiatedLogin(string mode = default(string), List<string> defaultScope = default(List<string>))
        {
            this.Mode = mode;
            this.DefaultScope = defaultScope;
        }
        
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets DefaultScope
        /// </summary>
        [DataMember(Name="default_scope", EmitDefaultValue=false)]
        public List<string> DefaultScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenIdConnectApplicationIdpInitiatedLogin {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  DefaultScope: ").Append(DefaultScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenIdConnectApplicationIdpInitiatedLogin);
        }

        /// <summary>
        /// Returns true if OpenIdConnectApplicationIdpInitiatedLogin instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenIdConnectApplicationIdpInitiatedLogin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenIdConnectApplicationIdpInitiatedLogin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.DefaultScope == input.DefaultScope ||
                    this.DefaultScope != null &&
                    input.DefaultScope != null &&
                    this.DefaultScope.SequenceEqual(input.DefaultScope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.DefaultScope != null)
                    hashCode = hashCode * 59 + this.DefaultScope.GetHashCode();
                return hashCode;
            }
        }
    }
}
