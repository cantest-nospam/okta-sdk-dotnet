/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ApplicationSettings
    /// </summary>
    [DataContract]
        public partial class ApplicationSettings :  IEquatable<ApplicationSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationSettings" /> class.
        /// </summary>
        /// <param name="app">app.</param>
        /// <param name="implicitAssignment">implicitAssignment.</param>
        /// <param name="inlineHookId">inlineHookId.</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="notes">notes.</param>
        public ApplicationSettings(ApplicationSettingsApplication app = default(ApplicationSettingsApplication), bool? implicitAssignment = default(bool?), string inlineHookId = default(string), ApplicationSettingsNotifications notifications = default(ApplicationSettingsNotifications), ApplicationSettingsNotes notes = default(ApplicationSettingsNotes))
        {
            this.App = app;
            this.ImplicitAssignment = implicitAssignment;
            this.InlineHookId = inlineHookId;
            this.Notifications = notifications;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public ApplicationSettingsApplication App { get; set; }

        /// <summary>
        /// Gets or Sets ImplicitAssignment
        /// </summary>
        [DataMember(Name="implicitAssignment", EmitDefaultValue=false)]
        public bool? ImplicitAssignment { get; set; }

        /// <summary>
        /// Gets or Sets InlineHookId
        /// </summary>
        [DataMember(Name="inlineHookId", EmitDefaultValue=false)]
        public string InlineHookId { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public ApplicationSettingsNotifications Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public ApplicationSettingsNotes Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationSettings {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  ImplicitAssignment: ").Append(ImplicitAssignment).Append("\n");
            sb.Append("  InlineHookId: ").Append(InlineHookId).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationSettings);
        }

        /// <summary>
        /// Returns true if ApplicationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.ImplicitAssignment == input.ImplicitAssignment ||
                    (this.ImplicitAssignment != null &&
                    this.ImplicitAssignment.Equals(input.ImplicitAssignment))
                ) && 
                (
                    this.InlineHookId == input.InlineHookId ||
                    (this.InlineHookId != null &&
                    this.InlineHookId.Equals(input.InlineHookId))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.ImplicitAssignment != null)
                    hashCode = hashCode * 59 + this.ImplicitAssignment.GetHashCode();
                if (this.InlineHookId != null)
                    hashCode = hashCode * 59 + this.InlineHookId.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }
}
