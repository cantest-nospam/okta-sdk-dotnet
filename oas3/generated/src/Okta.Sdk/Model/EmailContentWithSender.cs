/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// EmailContentWithSender
    /// </summary>
    [DataContract]
        public partial class EmailContentWithSender : EmailContent,  IEquatable<EmailContentWithSender>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailContentWithSender" /> class.
        /// </summary>
        /// <param name="fromAddress">fromAddress (required).</param>
        /// <param name="fromName">fromName (required).</param>
        public EmailContentWithSender(string fromAddress = default(string), string fromName = default(string), string subject = default(string), string body = default(string)) : base(subject, body)
        {
            // to ensure "fromAddress" is required (not null)
            if (fromAddress == null)
            {
                throw new InvalidDataException("fromAddress is a required property for EmailContentWithSender and cannot be null");
            }
            else
            {
                this.FromAddress = fromAddress;
            }
            // to ensure "fromName" is required (not null)
            if (fromName == null)
            {
                throw new InvalidDataException("fromName is a required property for EmailContentWithSender and cannot be null");
            }
            else
            {
                this.FromName = fromName;
            }
        }
        
        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name="fromAddress", EmitDefaultValue=false)]
        public string FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets FromName
        /// </summary>
        [DataMember(Name="fromName", EmitDefaultValue=false)]
        public string FromName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailContentWithSender {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailContentWithSender);
        }

        /// <summary>
        /// Returns true if EmailContentWithSender instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailContentWithSender to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailContentWithSender input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && base.Equals(input) && 
                (
                    this.FromName == input.FromName ||
                    (this.FromName != null &&
                    this.FromName.Equals(input.FromName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FromAddress != null)
                    hashCode = hashCode * 59 + this.FromAddress.GetHashCode();
                if (this.FromName != null)
                    hashCode = hashCode * 59 + this.FromName.GetHashCode();
                return hashCode;
            }
        }
    }
}
