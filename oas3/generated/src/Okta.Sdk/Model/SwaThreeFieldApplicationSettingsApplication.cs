/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// SwaThreeFieldApplicationSettingsApplication
    /// </summary>
    [DataContract]
        public partial class SwaThreeFieldApplicationSettingsApplication :  IEquatable<SwaThreeFieldApplicationSettingsApplication>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaThreeFieldApplicationSettingsApplication" /> class.
        /// </summary>
        /// <param name="buttonSelector">buttonSelector.</param>
        /// <param name="extraFieldSelector">extraFieldSelector.</param>
        /// <param name="extraFieldValue">extraFieldValue.</param>
        /// <param name="loginUrlRegex">loginUrlRegex.</param>
        /// <param name="passwordSelector">passwordSelector.</param>
        /// <param name="targetURL">targetURL.</param>
        /// <param name="userNameSelector">userNameSelector.</param>
        public SwaThreeFieldApplicationSettingsApplication(string buttonSelector = default(string), string extraFieldSelector = default(string), string extraFieldValue = default(string), string loginUrlRegex = default(string), string passwordSelector = default(string), string targetURL = default(string), string userNameSelector = default(string))
        {
            this.ButtonSelector = buttonSelector;
            this.ExtraFieldSelector = extraFieldSelector;
            this.ExtraFieldValue = extraFieldValue;
            this.LoginUrlRegex = loginUrlRegex;
            this.PasswordSelector = passwordSelector;
            this.TargetURL = targetURL;
            this.UserNameSelector = userNameSelector;
        }
        
        /// <summary>
        /// Gets or Sets ButtonSelector
        /// </summary>
        [DataMember(Name="buttonSelector", EmitDefaultValue=false)]
        public string ButtonSelector { get; set; }

        /// <summary>
        /// Gets or Sets ExtraFieldSelector
        /// </summary>
        [DataMember(Name="extraFieldSelector", EmitDefaultValue=false)]
        public string ExtraFieldSelector { get; set; }

        /// <summary>
        /// Gets or Sets ExtraFieldValue
        /// </summary>
        [DataMember(Name="extraFieldValue", EmitDefaultValue=false)]
        public string ExtraFieldValue { get; set; }

        /// <summary>
        /// Gets or Sets LoginUrlRegex
        /// </summary>
        [DataMember(Name="loginUrlRegex", EmitDefaultValue=false)]
        public string LoginUrlRegex { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSelector
        /// </summary>
        [DataMember(Name="passwordSelector", EmitDefaultValue=false)]
        public string PasswordSelector { get; set; }

        /// <summary>
        /// Gets or Sets TargetURL
        /// </summary>
        [DataMember(Name="targetURL", EmitDefaultValue=false)]
        public string TargetURL { get; set; }

        /// <summary>
        /// Gets or Sets UserNameSelector
        /// </summary>
        [DataMember(Name="userNameSelector", EmitDefaultValue=false)]
        public string UserNameSelector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SwaThreeFieldApplicationSettingsApplication {\n");
            sb.Append("  ButtonSelector: ").Append(ButtonSelector).Append("\n");
            sb.Append("  ExtraFieldSelector: ").Append(ExtraFieldSelector).Append("\n");
            sb.Append("  ExtraFieldValue: ").Append(ExtraFieldValue).Append("\n");
            sb.Append("  LoginUrlRegex: ").Append(LoginUrlRegex).Append("\n");
            sb.Append("  PasswordSelector: ").Append(PasswordSelector).Append("\n");
            sb.Append("  TargetURL: ").Append(TargetURL).Append("\n");
            sb.Append("  UserNameSelector: ").Append(UserNameSelector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SwaThreeFieldApplicationSettingsApplication);
        }

        /// <summary>
        /// Returns true if SwaThreeFieldApplicationSettingsApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of SwaThreeFieldApplicationSettingsApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SwaThreeFieldApplicationSettingsApplication input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ButtonSelector == input.ButtonSelector ||
                    (this.ButtonSelector != null &&
                    this.ButtonSelector.Equals(input.ButtonSelector))
                ) && 
                (
                    this.ExtraFieldSelector == input.ExtraFieldSelector ||
                    (this.ExtraFieldSelector != null &&
                    this.ExtraFieldSelector.Equals(input.ExtraFieldSelector))
                ) && 
                (
                    this.ExtraFieldValue == input.ExtraFieldValue ||
                    (this.ExtraFieldValue != null &&
                    this.ExtraFieldValue.Equals(input.ExtraFieldValue))
                ) && 
                (
                    this.LoginUrlRegex == input.LoginUrlRegex ||
                    (this.LoginUrlRegex != null &&
                    this.LoginUrlRegex.Equals(input.LoginUrlRegex))
                ) && 
                (
                    this.PasswordSelector == input.PasswordSelector ||
                    (this.PasswordSelector != null &&
                    this.PasswordSelector.Equals(input.PasswordSelector))
                ) && 
                (
                    this.TargetURL == input.TargetURL ||
                    (this.TargetURL != null &&
                    this.TargetURL.Equals(input.TargetURL))
                ) && 
                (
                    this.UserNameSelector == input.UserNameSelector ||
                    (this.UserNameSelector != null &&
                    this.UserNameSelector.Equals(input.UserNameSelector))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ButtonSelector != null)
                    hashCode = hashCode * 59 + this.ButtonSelector.GetHashCode();
                if (this.ExtraFieldSelector != null)
                    hashCode = hashCode * 59 + this.ExtraFieldSelector.GetHashCode();
                if (this.ExtraFieldValue != null)
                    hashCode = hashCode * 59 + this.ExtraFieldValue.GetHashCode();
                if (this.LoginUrlRegex != null)
                    hashCode = hashCode * 59 + this.LoginUrlRegex.GetHashCode();
                if (this.PasswordSelector != null)
                    hashCode = hashCode * 59 + this.PasswordSelector.GetHashCode();
                if (this.TargetURL != null)
                    hashCode = hashCode * 59 + this.TargetURL.GetHashCode();
                if (this.UserNameSelector != null)
                    hashCode = hashCode * 59 + this.UserNameSelector.GetHashCode();
                return hashCode;
            }
        }
    }
}
