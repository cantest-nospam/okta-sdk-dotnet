/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// PushUserFactor
    /// </summary>
    [DataContract]
        public partial class PushUserFactor :  IEquatable<PushUserFactor>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushUserFactor" /> class.
        /// </summary>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="factorResult">factorResult.</param>
        /// <param name="profile">profile.</param>
        public PushUserFactor(DateTime? expiresAt = default(DateTime?), FactorResultType factorResult = default(FactorResultType), PushUserFactorProfile profile = default(PushUserFactorProfile))
        {
            this.ExpiresAt = expiresAt;
            this.FactorResult = factorResult;
            this.Profile = profile;
        }
        
        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expiresAt", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets FactorResult
        /// </summary>
        [DataMember(Name="factorResult", EmitDefaultValue=false)]
        public FactorResultType FactorResult { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public PushUserFactorProfile Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushUserFactor {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  FactorResult: ").Append(FactorResult).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushUserFactor);
        }

        /// <summary>
        /// Returns true if PushUserFactor instances are equal
        /// </summary>
        /// <param name="input">Instance of PushUserFactor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushUserFactor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.FactorResult == input.FactorResult ||
                    (this.FactorResult != null &&
                    this.FactorResult.Equals(input.FactorResult))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.FactorResult != null)
                    hashCode = hashCode * 59 + this.FactorResult.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                return hashCode;
            }
        }
    }
}
