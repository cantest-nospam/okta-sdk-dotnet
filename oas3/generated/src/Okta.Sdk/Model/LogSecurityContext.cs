/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// LogSecurityContext
    /// </summary>
    [DataContract]
        public partial class LogSecurityContext :  IEquatable<LogSecurityContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogSecurityContext" /> class.
        /// </summary>
        public LogSecurityContext()
        {
        }
        
        /// <summary>
        /// Gets or Sets AsNumber
        /// </summary>
        [DataMember(Name="asNumber", EmitDefaultValue=false)]
        public int? AsNumber { get; private set; }

        /// <summary>
        /// Gets or Sets AsOrg
        /// </summary>
        [DataMember(Name="asOrg", EmitDefaultValue=false)]
        public string AsOrg { get; private set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; private set; }

        /// <summary>
        /// Gets or Sets IsProxy
        /// </summary>
        [DataMember(Name="isProxy", EmitDefaultValue=false)]
        public bool? IsProxy { get; private set; }

        /// <summary>
        /// Gets or Sets Isp
        /// </summary>
        [DataMember(Name="isp", EmitDefaultValue=false)]
        public string Isp { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogSecurityContext {\n");
            sb.Append("  AsNumber: ").Append(AsNumber).Append("\n");
            sb.Append("  AsOrg: ").Append(AsOrg).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  IsProxy: ").Append(IsProxy).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogSecurityContext);
        }

        /// <summary>
        /// Returns true if LogSecurityContext instances are equal
        /// </summary>
        /// <param name="input">Instance of LogSecurityContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogSecurityContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsNumber == input.AsNumber ||
                    (this.AsNumber != null &&
                    this.AsNumber.Equals(input.AsNumber))
                ) && 
                (
                    this.AsOrg == input.AsOrg ||
                    (this.AsOrg != null &&
                    this.AsOrg.Equals(input.AsOrg))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.IsProxy == input.IsProxy ||
                    (this.IsProxy != null &&
                    this.IsProxy.Equals(input.IsProxy))
                ) && 
                (
                    this.Isp == input.Isp ||
                    (this.Isp != null &&
                    this.Isp.Equals(input.Isp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsNumber != null)
                    hashCode = hashCode * 59 + this.AsNumber.GetHashCode();
                if (this.AsOrg != null)
                    hashCode = hashCode * 59 + this.AsOrg.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.IsProxy != null)
                    hashCode = hashCode * 59 + this.IsProxy.GetHashCode();
                if (this.Isp != null)
                    hashCode = hashCode * 59 + this.Isp.GetHashCode();
                return hashCode;
            }
        }
    }
}
