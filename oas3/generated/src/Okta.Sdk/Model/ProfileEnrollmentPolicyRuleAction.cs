/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ProfileEnrollmentPolicyRuleAction
    /// </summary>
    [DataContract]
        public partial class ProfileEnrollmentPolicyRuleAction :  IEquatable<ProfileEnrollmentPolicyRuleAction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileEnrollmentPolicyRuleAction" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="activationRequirements">activationRequirements.</param>
        /// <param name="preRegistrationInlineHooks">preRegistrationInlineHooks.</param>
        /// <param name="profileAttributes">profileAttributes.</param>
        /// <param name="targetGroupIds">targetGroupIds.</param>
        /// <param name="unknownUserAction">unknownUserAction.</param>
        public ProfileEnrollmentPolicyRuleAction(string access = default(string), ProfileEnrollmentPolicyRuleActivationRequirement activationRequirements = default(ProfileEnrollmentPolicyRuleActivationRequirement), List<PreRegistrationInlineHook> preRegistrationInlineHooks = default(List<PreRegistrationInlineHook>), List<ProfileEnrollmentPolicyRuleProfileAttribute> profileAttributes = default(List<ProfileEnrollmentPolicyRuleProfileAttribute>), List<string> targetGroupIds = default(List<string>), string unknownUserAction = default(string))
        {
            this.Access = access;
            this.ActivationRequirements = activationRequirements;
            this.PreRegistrationInlineHooks = preRegistrationInlineHooks;
            this.ProfileAttributes = profileAttributes;
            this.TargetGroupIds = targetGroupIds;
            this.UnknownUserAction = unknownUserAction;
        }
        
        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public string Access { get; set; }

        /// <summary>
        /// Gets or Sets ActivationRequirements
        /// </summary>
        [DataMember(Name="activationRequirements", EmitDefaultValue=false)]
        public ProfileEnrollmentPolicyRuleActivationRequirement ActivationRequirements { get; set; }

        /// <summary>
        /// Gets or Sets PreRegistrationInlineHooks
        /// </summary>
        [DataMember(Name="preRegistrationInlineHooks", EmitDefaultValue=false)]
        public List<PreRegistrationInlineHook> PreRegistrationInlineHooks { get; set; }

        /// <summary>
        /// Gets or Sets ProfileAttributes
        /// </summary>
        [DataMember(Name="profileAttributes", EmitDefaultValue=false)]
        public List<ProfileEnrollmentPolicyRuleProfileAttribute> ProfileAttributes { get; set; }

        /// <summary>
        /// Gets or Sets TargetGroupIds
        /// </summary>
        [DataMember(Name="targetGroupIds", EmitDefaultValue=false)]
        public List<string> TargetGroupIds { get; set; }

        /// <summary>
        /// Gets or Sets UnknownUserAction
        /// </summary>
        [DataMember(Name="unknownUserAction", EmitDefaultValue=false)]
        public string UnknownUserAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileEnrollmentPolicyRuleAction {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  ActivationRequirements: ").Append(ActivationRequirements).Append("\n");
            sb.Append("  PreRegistrationInlineHooks: ").Append(PreRegistrationInlineHooks).Append("\n");
            sb.Append("  ProfileAttributes: ").Append(ProfileAttributes).Append("\n");
            sb.Append("  TargetGroupIds: ").Append(TargetGroupIds).Append("\n");
            sb.Append("  UnknownUserAction: ").Append(UnknownUserAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileEnrollmentPolicyRuleAction);
        }

        /// <summary>
        /// Returns true if ProfileEnrollmentPolicyRuleAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileEnrollmentPolicyRuleAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileEnrollmentPolicyRuleAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.ActivationRequirements == input.ActivationRequirements ||
                    (this.ActivationRequirements != null &&
                    this.ActivationRequirements.Equals(input.ActivationRequirements))
                ) && 
                (
                    this.PreRegistrationInlineHooks == input.PreRegistrationInlineHooks ||
                    this.PreRegistrationInlineHooks != null &&
                    input.PreRegistrationInlineHooks != null &&
                    this.PreRegistrationInlineHooks.SequenceEqual(input.PreRegistrationInlineHooks)
                ) && 
                (
                    this.ProfileAttributes == input.ProfileAttributes ||
                    this.ProfileAttributes != null &&
                    input.ProfileAttributes != null &&
                    this.ProfileAttributes.SequenceEqual(input.ProfileAttributes)
                ) && 
                (
                    this.TargetGroupIds == input.TargetGroupIds ||
                    this.TargetGroupIds != null &&
                    input.TargetGroupIds != null &&
                    this.TargetGroupIds.SequenceEqual(input.TargetGroupIds)
                ) && 
                (
                    this.UnknownUserAction == input.UnknownUserAction ||
                    (this.UnknownUserAction != null &&
                    this.UnknownUserAction.Equals(input.UnknownUserAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.ActivationRequirements != null)
                    hashCode = hashCode * 59 + this.ActivationRequirements.GetHashCode();
                if (this.PreRegistrationInlineHooks != null)
                    hashCode = hashCode * 59 + this.PreRegistrationInlineHooks.GetHashCode();
                if (this.ProfileAttributes != null)
                    hashCode = hashCode * 59 + this.ProfileAttributes.GetHashCode();
                if (this.TargetGroupIds != null)
                    hashCode = hashCode * 59 + this.TargetGroupIds.GetHashCode();
                if (this.UnknownUserAction != null)
                    hashCode = hashCode * 59 + this.UnknownUserAction.GetHashCode();
                return hashCode;
            }
        }
    }
}
