/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// OktaSignOnPolicyRuleSignonSessionActions
    /// </summary>
    [DataContract]
        public partial class OktaSignOnPolicyRuleSignonSessionActions :  IEquatable<OktaSignOnPolicyRuleSignonSessionActions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OktaSignOnPolicyRuleSignonSessionActions" /> class.
        /// </summary>
        /// <param name="maxSessionIdleMinutes">maxSessionIdleMinutes.</param>
        /// <param name="maxSessionLifetimeMinutes">maxSessionLifetimeMinutes.</param>
        /// <param name="usePersistentCookie">usePersistentCookie (default to false).</param>
        public OktaSignOnPolicyRuleSignonSessionActions(int? maxSessionIdleMinutes = default(int?), int? maxSessionLifetimeMinutes = default(int?), bool? usePersistentCookie = false)
        {
            this.MaxSessionIdleMinutes = maxSessionIdleMinutes;
            this.MaxSessionLifetimeMinutes = maxSessionLifetimeMinutes;
            // use default value if no "usePersistentCookie" provided
            if (usePersistentCookie == null)
            {
                this.UsePersistentCookie = false;
            }
            else
            {
                this.UsePersistentCookie = usePersistentCookie;
            }
        }
        
        /// <summary>
        /// Gets or Sets MaxSessionIdleMinutes
        /// </summary>
        [DataMember(Name="maxSessionIdleMinutes", EmitDefaultValue=false)]
        public int? MaxSessionIdleMinutes { get; set; }

        /// <summary>
        /// Gets or Sets MaxSessionLifetimeMinutes
        /// </summary>
        [DataMember(Name="maxSessionLifetimeMinutes", EmitDefaultValue=false)]
        public int? MaxSessionLifetimeMinutes { get; set; }

        /// <summary>
        /// Gets or Sets UsePersistentCookie
        /// </summary>
        [DataMember(Name="usePersistentCookie", EmitDefaultValue=false)]
        public bool? UsePersistentCookie { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OktaSignOnPolicyRuleSignonSessionActions {\n");
            sb.Append("  MaxSessionIdleMinutes: ").Append(MaxSessionIdleMinutes).Append("\n");
            sb.Append("  MaxSessionLifetimeMinutes: ").Append(MaxSessionLifetimeMinutes).Append("\n");
            sb.Append("  UsePersistentCookie: ").Append(UsePersistentCookie).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OktaSignOnPolicyRuleSignonSessionActions);
        }

        /// <summary>
        /// Returns true if OktaSignOnPolicyRuleSignonSessionActions instances are equal
        /// </summary>
        /// <param name="input">Instance of OktaSignOnPolicyRuleSignonSessionActions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OktaSignOnPolicyRuleSignonSessionActions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxSessionIdleMinutes == input.MaxSessionIdleMinutes ||
                    (this.MaxSessionIdleMinutes != null &&
                    this.MaxSessionIdleMinutes.Equals(input.MaxSessionIdleMinutes))
                ) && 
                (
                    this.MaxSessionLifetimeMinutes == input.MaxSessionLifetimeMinutes ||
                    (this.MaxSessionLifetimeMinutes != null &&
                    this.MaxSessionLifetimeMinutes.Equals(input.MaxSessionLifetimeMinutes))
                ) && 
                (
                    this.UsePersistentCookie == input.UsePersistentCookie ||
                    (this.UsePersistentCookie != null &&
                    this.UsePersistentCookie.Equals(input.UsePersistentCookie))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxSessionIdleMinutes != null)
                    hashCode = hashCode * 59 + this.MaxSessionIdleMinutes.GetHashCode();
                if (this.MaxSessionLifetimeMinutes != null)
                    hashCode = hashCode * 59 + this.MaxSessionLifetimeMinutes.GetHashCode();
                if (this.UsePersistentCookie != null)
                    hashCode = hashCode * 59 + this.UsePersistentCookie.GetHashCode();
                return hashCode;
            }
        }
    }
}
