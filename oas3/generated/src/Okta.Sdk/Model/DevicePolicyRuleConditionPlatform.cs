/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// DevicePolicyRuleConditionPlatform
    /// </summary>
    [DataContract]
        public partial class DevicePolicyRuleConditionPlatform :  IEquatable<DevicePolicyRuleConditionPlatform>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicePolicyRuleConditionPlatform" /> class.
        /// </summary>
        /// <param name="supportedMDMFrameworks">supportedMDMFrameworks.</param>
        /// <param name="types">types.</param>
        public DevicePolicyRuleConditionPlatform(List<DevicePolicyMDMFramework> supportedMDMFrameworks = default(List<DevicePolicyMDMFramework>), List<DevicePolicyPlatformType> types = default(List<DevicePolicyPlatformType>))
        {
            this.SupportedMDMFrameworks = supportedMDMFrameworks;
            this.Types = types;
        }
        
        /// <summary>
        /// Gets or Sets SupportedMDMFrameworks
        /// </summary>
        [DataMember(Name="supportedMDMFrameworks", EmitDefaultValue=false)]
        public List<DevicePolicyMDMFramework> SupportedMDMFrameworks { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<DevicePolicyPlatformType> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicePolicyRuleConditionPlatform {\n");
            sb.Append("  SupportedMDMFrameworks: ").Append(SupportedMDMFrameworks).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicePolicyRuleConditionPlatform);
        }

        /// <summary>
        /// Returns true if DevicePolicyRuleConditionPlatform instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicePolicyRuleConditionPlatform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicePolicyRuleConditionPlatform input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupportedMDMFrameworks == input.SupportedMDMFrameworks ||
                    this.SupportedMDMFrameworks != null &&
                    input.SupportedMDMFrameworks != null &&
                    this.SupportedMDMFrameworks.SequenceEqual(input.SupportedMDMFrameworks)
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    input.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupportedMDMFrameworks != null)
                    hashCode = hashCode * 59 + this.SupportedMDMFrameworks.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }
    }
}
