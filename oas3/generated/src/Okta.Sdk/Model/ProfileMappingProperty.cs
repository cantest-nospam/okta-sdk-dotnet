/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ProfileMappingProperty
    /// </summary>
    [DataContract]
        public partial class ProfileMappingProperty :  IEquatable<ProfileMappingProperty>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingProperty" /> class.
        /// </summary>
        /// <param name="expression">expression.</param>
        /// <param name="pushStatus">pushStatus.</param>
        public ProfileMappingProperty(string expression = default(string), ProfileMappingPropertyPushStatus pushStatus = default(ProfileMappingPropertyPushStatus))
        {
            this.Expression = expression;
            this.PushStatus = pushStatus;
        }
        
        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or Sets PushStatus
        /// </summary>
        [DataMember(Name="pushStatus", EmitDefaultValue=false)]
        public ProfileMappingPropertyPushStatus PushStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileMappingProperty {\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  PushStatus: ").Append(PushStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileMappingProperty);
        }

        /// <summary>
        /// Returns true if ProfileMappingProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileMappingProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileMappingProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.PushStatus == input.PushStatus ||
                    (this.PushStatus != null &&
                    this.PushStatus.Equals(input.PushStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.PushStatus != null)
                    hashCode = hashCode * 59 + this.PushStatus.GetHashCode();
                return hashCode;
            }
        }
    }
}
