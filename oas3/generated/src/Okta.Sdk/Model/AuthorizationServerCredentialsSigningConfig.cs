/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// AuthorizationServerCredentialsSigningConfig
    /// </summary>
    [DataContract]
        public partial class AuthorizationServerCredentialsSigningConfig :  IEquatable<AuthorizationServerCredentialsSigningConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerCredentialsSigningConfig" /> class.
        /// </summary>
        /// <param name="kid">kid.</param>
        /// <param name="rotationMode">rotationMode.</param>
        /// <param name="use">use.</param>
        public AuthorizationServerCredentialsSigningConfig(string kid = default(string), AuthorizationServerCredentialsRotationMode rotationMode = default(AuthorizationServerCredentialsRotationMode), AuthorizationServerCredentialsUse use = default(AuthorizationServerCredentialsUse))
        {
            this.Kid = kid;
            this.RotationMode = rotationMode;
            this.Use = use;
        }
        
        /// <summary>
        /// Gets or Sets Kid
        /// </summary>
        [DataMember(Name="kid", EmitDefaultValue=false)]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or Sets LastRotated
        /// </summary>
        [DataMember(Name="lastRotated", EmitDefaultValue=false)]
        public DateTime? LastRotated { get; private set; }

        /// <summary>
        /// Gets or Sets NextRotation
        /// </summary>
        [DataMember(Name="nextRotation", EmitDefaultValue=false)]
        public DateTime? NextRotation { get; private set; }

        /// <summary>
        /// Gets or Sets RotationMode
        /// </summary>
        [DataMember(Name="rotationMode", EmitDefaultValue=false)]
        public AuthorizationServerCredentialsRotationMode RotationMode { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name="use", EmitDefaultValue=false)]
        public AuthorizationServerCredentialsUse Use { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationServerCredentialsSigningConfig {\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  LastRotated: ").Append(LastRotated).Append("\n");
            sb.Append("  NextRotation: ").Append(NextRotation).Append("\n");
            sb.Append("  RotationMode: ").Append(RotationMode).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationServerCredentialsSigningConfig);
        }

        /// <summary>
        /// Returns true if AuthorizationServerCredentialsSigningConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationServerCredentialsSigningConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationServerCredentialsSigningConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.LastRotated == input.LastRotated ||
                    (this.LastRotated != null &&
                    this.LastRotated.Equals(input.LastRotated))
                ) && 
                (
                    this.NextRotation == input.NextRotation ||
                    (this.NextRotation != null &&
                    this.NextRotation.Equals(input.NextRotation))
                ) && 
                (
                    this.RotationMode == input.RotationMode ||
                    (this.RotationMode != null &&
                    this.RotationMode.Equals(input.RotationMode))
                ) && 
                (
                    this.Use == input.Use ||
                    (this.Use != null &&
                    this.Use.Equals(input.Use))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kid != null)
                    hashCode = hashCode * 59 + this.Kid.GetHashCode();
                if (this.LastRotated != null)
                    hashCode = hashCode * 59 + this.LastRotated.GetHashCode();
                if (this.NextRotation != null)
                    hashCode = hashCode * 59 + this.NextRotation.GetHashCode();
                if (this.RotationMode != null)
                    hashCode = hashCode * 59 + this.RotationMode.GetHashCode();
                if (this.Use != null)
                    hashCode = hashCode * 59 + this.Use.GetHashCode();
                return hashCode;
            }
        }
    }
}
