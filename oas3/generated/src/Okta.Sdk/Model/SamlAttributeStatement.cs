/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// SamlAttributeStatement
    /// </summary>
    [DataContract]
        public partial class SamlAttributeStatement :  IEquatable<SamlAttributeStatement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SamlAttributeStatement" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="_namespace">_namespace.</param>
        /// <param name="type">type.</param>
        /// <param name="filterType">filterType.</param>
        /// <param name="filterValue">filterValue.</param>
        /// <param name="values">values.</param>
        public SamlAttributeStatement(string name = default(string), string _namespace = default(string), string type = default(string), string filterType = default(string), string filterValue = default(string), List<string> values = default(List<string>))
        {
            this.Name = name;
            this._Namespace = _namespace;
            this.Type = type;
            this.FilterType = filterType;
            this.FilterValue = filterValue;
            this.Values = values;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets _Namespace
        /// </summary>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets FilterType
        /// </summary>
        [DataMember(Name="filterType", EmitDefaultValue=false)]
        public string FilterType { get; set; }

        /// <summary>
        /// Gets or Sets FilterValue
        /// </summary>
        [DataMember(Name="filterValue", EmitDefaultValue=false)]
        public string FilterValue { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SamlAttributeStatement {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FilterType: ").Append(FilterType).Append("\n");
            sb.Append("  FilterValue: ").Append(FilterValue).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SamlAttributeStatement);
        }

        /// <summary>
        /// Returns true if SamlAttributeStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of SamlAttributeStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SamlAttributeStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this._Namespace == input._Namespace ||
                    (this._Namespace != null &&
                    this._Namespace.Equals(input._Namespace))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FilterType == input.FilterType ||
                    (this.FilterType != null &&
                    this.FilterType.Equals(input.FilterType))
                ) && 
                (
                    this.FilterValue == input.FilterValue ||
                    (this.FilterValue != null &&
                    this.FilterValue.Equals(input.FilterValue))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this._Namespace != null)
                    hashCode = hashCode * 59 + this._Namespace.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FilterType != null)
                    hashCode = hashCode * 59 + this.FilterType.GetHashCode();
                if (this.FilterValue != null)
                    hashCode = hashCode * 59 + this.FilterValue.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }
    }
}
