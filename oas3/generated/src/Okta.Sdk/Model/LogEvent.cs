/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// LogEvent
    /// </summary>
    [DataContract]
        public partial class LogEvent :  IEquatable<LogEvent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogEvent" /> class.
        /// </summary>
        /// <param name="actor">actor.</param>
        /// <param name="authenticationContext">authenticationContext.</param>
        /// <param name="_client">_client.</param>
        /// <param name="debugContext">debugContext.</param>
        /// <param name="outcome">outcome.</param>
        /// <param name="request">request.</param>
        /// <param name="securityContext">securityContext.</param>
        /// <param name="severity">severity.</param>
        /// <param name="transaction">transaction.</param>
        public LogEvent(LogActor actor = default(LogActor), LogAuthenticationContext authenticationContext = default(LogAuthenticationContext), LogClient _client = default(LogClient), LogDebugContext debugContext = default(LogDebugContext), LogOutcome outcome = default(LogOutcome), LogRequest request = default(LogRequest), LogSecurityContext securityContext = default(LogSecurityContext), LogSeverity severity = default(LogSeverity), LogTransaction transaction = default(LogTransaction))
        {
            this.Actor = actor;
            this.AuthenticationContext = authenticationContext;
            this._Client = _client;
            this.DebugContext = debugContext;
            this.Outcome = outcome;
            this.Request = request;
            this.SecurityContext = securityContext;
            this.Severity = severity;
            this.Transaction = transaction;
        }
        
        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public LogActor Actor { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationContext
        /// </summary>
        [DataMember(Name="authenticationContext", EmitDefaultValue=false)]
        public LogAuthenticationContext AuthenticationContext { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name="client", EmitDefaultValue=false)]
        public LogClient _Client { get; set; }

        /// <summary>
        /// Gets or Sets DebugContext
        /// </summary>
        [DataMember(Name="debugContext", EmitDefaultValue=false)]
        public LogDebugContext DebugContext { get; set; }

        /// <summary>
        /// Gets or Sets DisplayMessage
        /// </summary>
        [DataMember(Name="displayMessage", EmitDefaultValue=false)]
        public string DisplayMessage { get; private set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; private set; }

        /// <summary>
        /// Gets or Sets LegacyEventType
        /// </summary>
        [DataMember(Name="legacyEventType", EmitDefaultValue=false)]
        public string LegacyEventType { get; private set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name="outcome", EmitDefaultValue=false)]
        public LogOutcome Outcome { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public DateTime? Published { get; private set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public LogRequest Request { get; set; }

        /// <summary>
        /// Gets or Sets SecurityContext
        /// </summary>
        [DataMember(Name="securityContext", EmitDefaultValue=false)]
        public LogSecurityContext SecurityContext { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public LogSeverity Severity { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public List<LogTarget> Target { get; private set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public LogTransaction Transaction { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; private set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogEvent {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  AuthenticationContext: ").Append(AuthenticationContext).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  DebugContext: ").Append(DebugContext).Append("\n");
            sb.Append("  DisplayMessage: ").Append(DisplayMessage).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  LegacyEventType: ").Append(LegacyEventType).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  SecurityContext: ").Append(SecurityContext).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LogEvent);
        }

        /// <summary>
        /// Returns true if LogEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of LogEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                ) && 
                (
                    this.AuthenticationContext == input.AuthenticationContext ||
                    (this.AuthenticationContext != null &&
                    this.AuthenticationContext.Equals(input.AuthenticationContext))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.DebugContext == input.DebugContext ||
                    (this.DebugContext != null &&
                    this.DebugContext.Equals(input.DebugContext))
                ) && 
                (
                    this.DisplayMessage == input.DisplayMessage ||
                    (this.DisplayMessage != null &&
                    this.DisplayMessage.Equals(input.DisplayMessage))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.LegacyEventType == input.LegacyEventType ||
                    (this.LegacyEventType != null &&
                    this.LegacyEventType.Equals(input.LegacyEventType))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.SecurityContext == input.SecurityContext ||
                    (this.SecurityContext != null &&
                    this.SecurityContext.Equals(input.SecurityContext))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target != null &&
                    input.Target != null &&
                    this.Target.SequenceEqual(input.Target)
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actor != null)
                    hashCode = hashCode * 59 + this.Actor.GetHashCode();
                if (this.AuthenticationContext != null)
                    hashCode = hashCode * 59 + this.AuthenticationContext.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.DebugContext != null)
                    hashCode = hashCode * 59 + this.DebugContext.GetHashCode();
                if (this.DisplayMessage != null)
                    hashCode = hashCode * 59 + this.DisplayMessage.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.LegacyEventType != null)
                    hashCode = hashCode * 59 + this.LegacyEventType.GetHashCode();
                if (this.Outcome != null)
                    hashCode = hashCode * 59 + this.Outcome.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.SecurityContext != null)
                    hashCode = hashCode * 59 + this.SecurityContext.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }
    }
}
