/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// PasswordPolicyPasswordSettingsComplexity
    /// </summary>
    [DataContract]
        public partial class PasswordPolicyPasswordSettingsComplexity :  IEquatable<PasswordPolicyPasswordSettingsComplexity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicyPasswordSettingsComplexity" /> class.
        /// </summary>
        /// <param name="dictionary">dictionary.</param>
        /// <param name="excludeAttributes">excludeAttributes.</param>
        /// <param name="excludeUsername">excludeUsername (default to true).</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="minLowerCase">minLowerCase.</param>
        /// <param name="minNumber">minNumber.</param>
        /// <param name="minSymbol">minSymbol.</param>
        /// <param name="minUpperCase">minUpperCase.</param>
        public PasswordPolicyPasswordSettingsComplexity(PasswordDictionary dictionary = default(PasswordDictionary), List<string> excludeAttributes = default(List<string>), bool? excludeUsername = true, int? minLength = default(int?), int? minLowerCase = default(int?), int? minNumber = default(int?), int? minSymbol = default(int?), int? minUpperCase = default(int?))
        {
            this.Dictionary = dictionary;
            this.ExcludeAttributes = excludeAttributes;
            // use default value if no "excludeUsername" provided
            if (excludeUsername == null)
            {
                this.ExcludeUsername = true;
            }
            else
            {
                this.ExcludeUsername = excludeUsername;
            }
            this.MinLength = minLength;
            this.MinLowerCase = minLowerCase;
            this.MinNumber = minNumber;
            this.MinSymbol = minSymbol;
            this.MinUpperCase = minUpperCase;
        }
        
        /// <summary>
        /// Gets or Sets Dictionary
        /// </summary>
        [DataMember(Name="dictionary", EmitDefaultValue=false)]
        public PasswordDictionary Dictionary { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeAttributes
        /// </summary>
        [DataMember(Name="excludeAttributes", EmitDefaultValue=false)]
        public List<string> ExcludeAttributes { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeUsername
        /// </summary>
        [DataMember(Name="excludeUsername", EmitDefaultValue=false)]
        public bool? ExcludeUsername { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Gets or Sets MinLowerCase
        /// </summary>
        [DataMember(Name="minLowerCase", EmitDefaultValue=false)]
        public int? MinLowerCase { get; set; }

        /// <summary>
        /// Gets or Sets MinNumber
        /// </summary>
        [DataMember(Name="minNumber", EmitDefaultValue=false)]
        public int? MinNumber { get; set; }

        /// <summary>
        /// Gets or Sets MinSymbol
        /// </summary>
        [DataMember(Name="minSymbol", EmitDefaultValue=false)]
        public int? MinSymbol { get; set; }

        /// <summary>
        /// Gets or Sets MinUpperCase
        /// </summary>
        [DataMember(Name="minUpperCase", EmitDefaultValue=false)]
        public int? MinUpperCase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordPolicyPasswordSettingsComplexity {\n");
            sb.Append("  Dictionary: ").Append(Dictionary).Append("\n");
            sb.Append("  ExcludeAttributes: ").Append(ExcludeAttributes).Append("\n");
            sb.Append("  ExcludeUsername: ").Append(ExcludeUsername).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MinLowerCase: ").Append(MinLowerCase).Append("\n");
            sb.Append("  MinNumber: ").Append(MinNumber).Append("\n");
            sb.Append("  MinSymbol: ").Append(MinSymbol).Append("\n");
            sb.Append("  MinUpperCase: ").Append(MinUpperCase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordPolicyPasswordSettingsComplexity);
        }

        /// <summary>
        /// Returns true if PasswordPolicyPasswordSettingsComplexity instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordPolicyPasswordSettingsComplexity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicyPasswordSettingsComplexity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dictionary == input.Dictionary ||
                    (this.Dictionary != null &&
                    this.Dictionary.Equals(input.Dictionary))
                ) && 
                (
                    this.ExcludeAttributes == input.ExcludeAttributes ||
                    this.ExcludeAttributes != null &&
                    input.ExcludeAttributes != null &&
                    this.ExcludeAttributes.SequenceEqual(input.ExcludeAttributes)
                ) && 
                (
                    this.ExcludeUsername == input.ExcludeUsername ||
                    (this.ExcludeUsername != null &&
                    this.ExcludeUsername.Equals(input.ExcludeUsername))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.MinLowerCase == input.MinLowerCase ||
                    (this.MinLowerCase != null &&
                    this.MinLowerCase.Equals(input.MinLowerCase))
                ) && 
                (
                    this.MinNumber == input.MinNumber ||
                    (this.MinNumber != null &&
                    this.MinNumber.Equals(input.MinNumber))
                ) && 
                (
                    this.MinSymbol == input.MinSymbol ||
                    (this.MinSymbol != null &&
                    this.MinSymbol.Equals(input.MinSymbol))
                ) && 
                (
                    this.MinUpperCase == input.MinUpperCase ||
                    (this.MinUpperCase != null &&
                    this.MinUpperCase.Equals(input.MinUpperCase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dictionary != null)
                    hashCode = hashCode * 59 + this.Dictionary.GetHashCode();
                if (this.ExcludeAttributes != null)
                    hashCode = hashCode * 59 + this.ExcludeAttributes.GetHashCode();
                if (this.ExcludeUsername != null)
                    hashCode = hashCode * 59 + this.ExcludeUsername.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.MinLowerCase != null)
                    hashCode = hashCode * 59 + this.MinLowerCase.GetHashCode();
                if (this.MinNumber != null)
                    hashCode = hashCode * 59 + this.MinNumber.GetHashCode();
                if (this.MinSymbol != null)
                    hashCode = hashCode * 59 + this.MinSymbol.GetHashCode();
                if (this.MinUpperCase != null)
                    hashCode = hashCode * 59 + this.MinUpperCase.GetHashCode();
                return hashCode;
            }
        }
    }
}
