/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ProvisioningConditions
    /// </summary>
    [DataContract]
        public partial class ProvisioningConditions :  IEquatable<ProvisioningConditions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningConditions" /> class.
        /// </summary>
        /// <param name="deprovisioned">deprovisioned.</param>
        /// <param name="suspended">suspended.</param>
        public ProvisioningConditions(ProvisioningDeprovisionedCondition deprovisioned = default(ProvisioningDeprovisionedCondition), ProvisioningSuspendedCondition suspended = default(ProvisioningSuspendedCondition))
        {
            this.Deprovisioned = deprovisioned;
            this.Suspended = suspended;
        }
        
        /// <summary>
        /// Gets or Sets Deprovisioned
        /// </summary>
        [DataMember(Name="deprovisioned", EmitDefaultValue=false)]
        public ProvisioningDeprovisionedCondition Deprovisioned { get; set; }

        /// <summary>
        /// Gets or Sets Suspended
        /// </summary>
        [DataMember(Name="suspended", EmitDefaultValue=false)]
        public ProvisioningSuspendedCondition Suspended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningConditions {\n");
            sb.Append("  Deprovisioned: ").Append(Deprovisioned).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisioningConditions);
        }

        /// <summary>
        /// Returns true if ProvisioningConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisioningConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Deprovisioned == input.Deprovisioned ||
                    (this.Deprovisioned != null &&
                    this.Deprovisioned.Equals(input.Deprovisioned))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deprovisioned != null)
                    hashCode = hashCode * 59 + this.Deprovisioned.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                return hashCode;
            }
        }
    }
}
