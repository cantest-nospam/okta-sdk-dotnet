/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ApplicationAccessibility
    /// </summary>
    [DataContract]
        public partial class ApplicationAccessibility :  IEquatable<ApplicationAccessibility>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationAccessibility" /> class.
        /// </summary>
        /// <param name="errorRedirectUrl">errorRedirectUrl.</param>
        /// <param name="loginRedirectUrl">loginRedirectUrl.</param>
        /// <param name="selfService">selfService.</param>
        public ApplicationAccessibility(string errorRedirectUrl = default(string), string loginRedirectUrl = default(string), bool? selfService = default(bool?))
        {
            this.ErrorRedirectUrl = errorRedirectUrl;
            this.LoginRedirectUrl = loginRedirectUrl;
            this.SelfService = selfService;
        }
        
        /// <summary>
        /// Gets or Sets ErrorRedirectUrl
        /// </summary>
        [DataMember(Name="errorRedirectUrl", EmitDefaultValue=false)]
        public string ErrorRedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets LoginRedirectUrl
        /// </summary>
        [DataMember(Name="loginRedirectUrl", EmitDefaultValue=false)]
        public string LoginRedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets SelfService
        /// </summary>
        [DataMember(Name="selfService", EmitDefaultValue=false)]
        public bool? SelfService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationAccessibility {\n");
            sb.Append("  ErrorRedirectUrl: ").Append(ErrorRedirectUrl).Append("\n");
            sb.Append("  LoginRedirectUrl: ").Append(LoginRedirectUrl).Append("\n");
            sb.Append("  SelfService: ").Append(SelfService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationAccessibility);
        }

        /// <summary>
        /// Returns true if ApplicationAccessibility instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationAccessibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationAccessibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorRedirectUrl == input.ErrorRedirectUrl ||
                    (this.ErrorRedirectUrl != null &&
                    this.ErrorRedirectUrl.Equals(input.ErrorRedirectUrl))
                ) && 
                (
                    this.LoginRedirectUrl == input.LoginRedirectUrl ||
                    (this.LoginRedirectUrl != null &&
                    this.LoginRedirectUrl.Equals(input.LoginRedirectUrl))
                ) && 
                (
                    this.SelfService == input.SelfService ||
                    (this.SelfService != null &&
                    this.SelfService.Equals(input.SelfService))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorRedirectUrl != null)
                    hashCode = hashCode * 59 + this.ErrorRedirectUrl.GetHashCode();
                if (this.LoginRedirectUrl != null)
                    hashCode = hashCode * 59 + this.LoginRedirectUrl.GetHashCode();
                if (this.SelfService != null)
                    hashCode = hashCode * 59 + this.SelfService.GetHashCode();
                return hashCode;
            }
        }
    }
}
