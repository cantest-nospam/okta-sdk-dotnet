/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// OAuth2Scope
    /// </summary>
    [DataContract]
        public partial class OAuth2Scope :  IEquatable<OAuth2Scope>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Scope" /> class.
        /// </summary>
        /// <param name="consent">consent.</param>
        /// <param name="_default">_default.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="metadataPublish">metadataPublish.</param>
        /// <param name="name">name.</param>
        /// <param name="system">system.</param>
        public OAuth2Scope(OAuth2ScopeConsentType consent = default(OAuth2ScopeConsentType), bool? _default = default(bool?), string description = default(string), string displayName = default(string), OAuth2ScopeMetadataPublish metadataPublish = default(OAuth2ScopeMetadataPublish), string name = default(string), bool? system = default(bool?))
        {
            this.Consent = consent;
            this._Default = _default;
            this.Description = description;
            this.DisplayName = displayName;
            this.MetadataPublish = metadataPublish;
            this.Name = name;
            this.System = system;
        }
        
        /// <summary>
        /// Gets or Sets Consent
        /// </summary>
        [DataMember(Name="consent", EmitDefaultValue=false)]
        public OAuth2ScopeConsentType Consent { get; set; }

        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public bool? _Default { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets MetadataPublish
        /// </summary>
        [DataMember(Name="metadataPublish", EmitDefaultValue=false)]
        public OAuth2ScopeMetadataPublish MetadataPublish { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public bool? System { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OAuth2Scope {\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MetadataPublish: ").Append(MetadataPublish).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OAuth2Scope);
        }

        /// <summary>
        /// Returns true if OAuth2Scope instances are equal
        /// </summary>
        /// <param name="input">Instance of OAuth2Scope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OAuth2Scope input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Consent == input.Consent ||
                    (this.Consent != null &&
                    this.Consent.Equals(input.Consent))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MetadataPublish == input.MetadataPublish ||
                    (this.MetadataPublish != null &&
                    this.MetadataPublish.Equals(input.MetadataPublish))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.System == input.System ||
                    (this.System != null &&
                    this.System.Equals(input.System))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Consent != null)
                    hashCode = hashCode * 59 + this.Consent.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MetadataPublish != null)
                    hashCode = hashCode * 59 + this.MetadataPublish.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                return hashCode;
            }
        }
    }
}
