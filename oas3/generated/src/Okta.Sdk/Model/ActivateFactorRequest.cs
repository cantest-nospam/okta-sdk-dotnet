/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ActivateFactorRequest
    /// </summary>
    [DataContract]
        public partial class ActivateFactorRequest :  IEquatable<ActivateFactorRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivateFactorRequest" /> class.
        /// </summary>
        /// <param name="attestation">attestation.</param>
        /// <param name="clientData">clientData.</param>
        /// <param name="passCode">passCode.</param>
        /// <param name="registrationData">registrationData.</param>
        /// <param name="stateToken">stateToken.</param>
        public ActivateFactorRequest(string attestation = default(string), string clientData = default(string), string passCode = default(string), string registrationData = default(string), string stateToken = default(string))
        {
            this.Attestation = attestation;
            this.ClientData = clientData;
            this.PassCode = passCode;
            this.RegistrationData = registrationData;
            this.StateToken = stateToken;
        }
        
        /// <summary>
        /// Gets or Sets Attestation
        /// </summary>
        [DataMember(Name="attestation", EmitDefaultValue=false)]
        public string Attestation { get; set; }

        /// <summary>
        /// Gets or Sets ClientData
        /// </summary>
        [DataMember(Name="clientData", EmitDefaultValue=false)]
        public string ClientData { get; set; }

        /// <summary>
        /// Gets or Sets PassCode
        /// </summary>
        [DataMember(Name="passCode", EmitDefaultValue=false)]
        public string PassCode { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationData
        /// </summary>
        [DataMember(Name="registrationData", EmitDefaultValue=false)]
        public string RegistrationData { get; set; }

        /// <summary>
        /// Gets or Sets StateToken
        /// </summary>
        [DataMember(Name="stateToken", EmitDefaultValue=false)]
        public string StateToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivateFactorRequest {\n");
            sb.Append("  Attestation: ").Append(Attestation).Append("\n");
            sb.Append("  ClientData: ").Append(ClientData).Append("\n");
            sb.Append("  PassCode: ").Append(PassCode).Append("\n");
            sb.Append("  RegistrationData: ").Append(RegistrationData).Append("\n");
            sb.Append("  StateToken: ").Append(StateToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivateFactorRequest);
        }

        /// <summary>
        /// Returns true if ActivateFactorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivateFactorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivateFactorRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attestation == input.Attestation ||
                    (this.Attestation != null &&
                    this.Attestation.Equals(input.Attestation))
                ) && 
                (
                    this.ClientData == input.ClientData ||
                    (this.ClientData != null &&
                    this.ClientData.Equals(input.ClientData))
                ) && 
                (
                    this.PassCode == input.PassCode ||
                    (this.PassCode != null &&
                    this.PassCode.Equals(input.PassCode))
                ) && 
                (
                    this.RegistrationData == input.RegistrationData ||
                    (this.RegistrationData != null &&
                    this.RegistrationData.Equals(input.RegistrationData))
                ) && 
                (
                    this.StateToken == input.StateToken ||
                    (this.StateToken != null &&
                    this.StateToken.Equals(input.StateToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attestation != null)
                    hashCode = hashCode * 59 + this.Attestation.GetHashCode();
                if (this.ClientData != null)
                    hashCode = hashCode * 59 + this.ClientData.GetHashCode();
                if (this.PassCode != null)
                    hashCode = hashCode * 59 + this.PassCode.GetHashCode();
                if (this.RegistrationData != null)
                    hashCode = hashCode * 59 + this.RegistrationData.GetHashCode();
                if (this.StateToken != null)
                    hashCode = hashCode * 59 + this.StateToken.GetHashCode();
                return hashCode;
            }
        }
    }
}
