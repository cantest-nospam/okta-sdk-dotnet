/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// AuthorizationServerPolicyRuleConditions
    /// </summary>
    [DataContract]
        public partial class AuthorizationServerPolicyRuleConditions :  IEquatable<AuthorizationServerPolicyRuleConditions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerPolicyRuleConditions" /> class.
        /// </summary>
        /// <param name="people">people.</param>
        /// <param name="clients">clients.</param>
        /// <param name="grantTypes">grantTypes.</param>
        /// <param name="scopes">scopes.</param>
        public AuthorizationServerPolicyRuleConditions(PolicyPeopleCondition people = default(PolicyPeopleCondition), ClientPolicyCondition clients = default(ClientPolicyCondition), GrantTypePolicyRuleCondition grantTypes = default(GrantTypePolicyRuleCondition), OAuth2ScopesMediationPolicyRuleCondition scopes = default(OAuth2ScopesMediationPolicyRuleCondition))
        {
            this.People = people;
            this.Clients = clients;
            this.GrantTypes = grantTypes;
            this.Scopes = scopes;
        }
        
        /// <summary>
        /// Gets or Sets People
        /// </summary>
        [DataMember(Name="people", EmitDefaultValue=false)]
        public PolicyPeopleCondition People { get; set; }

        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name="clients", EmitDefaultValue=false)]
        public ClientPolicyCondition Clients { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [DataMember(Name="grantTypes", EmitDefaultValue=false)]
        public GrantTypePolicyRuleCondition GrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public OAuth2ScopesMediationPolicyRuleCondition Scopes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationServerPolicyRuleConditions {\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationServerPolicyRuleConditions);
        }

        /// <summary>
        /// Returns true if AuthorizationServerPolicyRuleConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationServerPolicyRuleConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationServerPolicyRuleConditions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.People == input.People ||
                    (this.People != null &&
                    this.People.Equals(input.People))
                ) && 
                (
                    this.Clients == input.Clients ||
                    (this.Clients != null &&
                    this.Clients.Equals(input.Clients))
                ) && 
                (
                    this.GrantTypes == input.GrantTypes ||
                    (this.GrantTypes != null &&
                    this.GrantTypes.Equals(input.GrantTypes))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    (this.Scopes != null &&
                    this.Scopes.Equals(input.Scopes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.People != null)
                    hashCode = hashCode * 59 + this.People.GetHashCode();
                if (this.Clients != null)
                    hashCode = hashCode * 59 + this.Clients.GetHashCode();
                if (this.GrantTypes != null)
                    hashCode = hashCode * 59 + this.GrantTypes.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                return hashCode;
            }
        }
    }
}
