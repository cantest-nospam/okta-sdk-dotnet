/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// AuthenticatorProviderConfiguration
    /// </summary>
    [DataContract]
        public partial class AuthenticatorProviderConfiguration :  IEquatable<AuthenticatorProviderConfiguration>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticatorProviderConfiguration" /> class.
        /// </summary>
        /// <param name="authPort">authPort.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="sharedSecret">sharedSecret.</param>
        /// <param name="userNameTemplate">userNameTemplate.</param>
        public AuthenticatorProviderConfiguration(int? authPort = default(int?), string hostName = default(string), string instanceId = default(string), string sharedSecret = default(string), AuthenticatorProviderConfigurationUserNameTemplate userNameTemplate = default(AuthenticatorProviderConfigurationUserNameTemplate))
        {
            this.AuthPort = authPort;
            this.HostName = hostName;
            this.InstanceId = instanceId;
            this.SharedSecret = sharedSecret;
            this.UserNameTemplate = userNameTemplate;
        }
        
        /// <summary>
        /// Gets or Sets AuthPort
        /// </summary>
        [DataMember(Name="authPort", EmitDefaultValue=false)]
        public int? AuthPort { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets SharedSecret
        /// </summary>
        [DataMember(Name="sharedSecret", EmitDefaultValue=false)]
        public string SharedSecret { get; set; }

        /// <summary>
        /// Gets or Sets UserNameTemplate
        /// </summary>
        [DataMember(Name="userNameTemplate", EmitDefaultValue=false)]
        public AuthenticatorProviderConfigurationUserNameTemplate UserNameTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticatorProviderConfiguration {\n");
            sb.Append("  AuthPort: ").Append(AuthPort).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("  UserNameTemplate: ").Append(UserNameTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticatorProviderConfiguration);
        }

        /// <summary>
        /// Returns true if AuthenticatorProviderConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticatorProviderConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticatorProviderConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthPort == input.AuthPort ||
                    (this.AuthPort != null &&
                    this.AuthPort.Equals(input.AuthPort))
                ) && 
                (
                    this.HostName == input.HostName ||
                    (this.HostName != null &&
                    this.HostName.Equals(input.HostName))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.SharedSecret == input.SharedSecret ||
                    (this.SharedSecret != null &&
                    this.SharedSecret.Equals(input.SharedSecret))
                ) && 
                (
                    this.UserNameTemplate == input.UserNameTemplate ||
                    (this.UserNameTemplate != null &&
                    this.UserNameTemplate.Equals(input.UserNameTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthPort != null)
                    hashCode = hashCode * 59 + this.AuthPort.GetHashCode();
                if (this.HostName != null)
                    hashCode = hashCode * 59 + this.HostName.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.SharedSecret != null)
                    hashCode = hashCode * 59 + this.SharedSecret.GetHashCode();
                if (this.UserNameTemplate != null)
                    hashCode = hashCode * 59 + this.UserNameTemplate.GetHashCode();
                return hashCode;
            }
        }
    }
}
