/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ProvisioningGroups
    /// </summary>
    [DataContract]
        public partial class ProvisioningGroups :  IEquatable<ProvisioningGroups>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningGroups" /> class.
        /// </summary>
        /// <param name="action">action.</param>
        /// <param name="assignments">assignments.</param>
        /// <param name="filter">filter.</param>
        /// <param name="sourceAttributeName">sourceAttributeName.</param>
        public ProvisioningGroups(ProvisioningGroupsAction action = default(ProvisioningGroupsAction), List<string> assignments = default(List<string>), List<string> filter = default(List<string>), string sourceAttributeName = default(string))
        {
            this.Action = action;
            this.Assignments = assignments;
            this.Filter = filter;
            this.SourceAttributeName = sourceAttributeName;
        }
        
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ProvisioningGroupsAction Action { get; set; }

        /// <summary>
        /// Gets or Sets Assignments
        /// </summary>
        [DataMember(Name="assignments", EmitDefaultValue=false)]
        public List<string> Assignments { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public List<string> Filter { get; set; }

        /// <summary>
        /// Gets or Sets SourceAttributeName
        /// </summary>
        [DataMember(Name="sourceAttributeName", EmitDefaultValue=false)]
        public string SourceAttributeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningGroups {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Assignments: ").Append(Assignments).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  SourceAttributeName: ").Append(SourceAttributeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisioningGroups);
        }

        /// <summary>
        /// Returns true if ProvisioningGroups instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisioningGroups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningGroups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Assignments == input.Assignments ||
                    this.Assignments != null &&
                    input.Assignments != null &&
                    this.Assignments.SequenceEqual(input.Assignments)
                ) && 
                (
                    this.Filter == input.Filter ||
                    this.Filter != null &&
                    input.Filter != null &&
                    this.Filter.SequenceEqual(input.Filter)
                ) && 
                (
                    this.SourceAttributeName == input.SourceAttributeName ||
                    (this.SourceAttributeName != null &&
                    this.SourceAttributeName.Equals(input.SourceAttributeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Assignments != null)
                    hashCode = hashCode * 59 + this.Assignments.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this.SourceAttributeName != null)
                    hashCode = hashCode * 59 + this.SourceAttributeName.GetHashCode();
                return hashCode;
            }
        }
    }
}
