/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// GroupSchemaAttribute
    /// </summary>
    [DataContract]
        public partial class GroupSchemaAttribute :  IEquatable<GroupSchemaAttribute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupSchemaAttribute" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="_enum">_enum.</param>
        /// <param name="externalName">externalName.</param>
        /// <param name="externalNamespace">externalNamespace.</param>
        /// <param name="items">items.</param>
        /// <param name="master">master.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="minLength">minLength.</param>
        /// <param name="mutability">mutability.</param>
        /// <param name="oneOf">oneOf.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="required">required.</param>
        /// <param name="scope">scope.</param>
        /// <param name="title">title.</param>
        /// <param name="type">type.</param>
        /// <param name="union">union.</param>
        /// <param name="unique">unique.</param>
        public GroupSchemaAttribute(string description = default(string), List<string> _enum = default(List<string>), string externalName = default(string), string externalNamespace = default(string), UserSchemaAttributeItems items = default(UserSchemaAttributeItems), UserSchemaAttributeMaster master = default(UserSchemaAttributeMaster), int? maxLength = default(int?), int? minLength = default(int?), string mutability = default(string), List<UserSchemaAttributeEnum> oneOf = default(List<UserSchemaAttributeEnum>), List<UserSchemaAttributePermission> permissions = default(List<UserSchemaAttributePermission>), bool? required = default(bool?), UserSchemaAttributeScope scope = default(UserSchemaAttributeScope), string title = default(string), UserSchemaAttributeType type = default(UserSchemaAttributeType), UserSchemaAttributeUnion union = default(UserSchemaAttributeUnion), string unique = default(string))
        {
            this.Description = description;
            this._Enum = _enum;
            this.ExternalName = externalName;
            this.ExternalNamespace = externalNamespace;
            this.Items = items;
            this.Master = master;
            this.MaxLength = maxLength;
            this.MinLength = minLength;
            this.Mutability = mutability;
            this.OneOf = oneOf;
            this.Permissions = permissions;
            this.Required = required;
            this.Scope = scope;
            this.Title = title;
            this.Type = type;
            this.Union = union;
            this.Unique = unique;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets _Enum
        /// </summary>
        [DataMember(Name="enum", EmitDefaultValue=false)]
        public List<string> _Enum { get; set; }

        /// <summary>
        /// Gets or Sets ExternalName
        /// </summary>
        [DataMember(Name="externalName", EmitDefaultValue=false)]
        public string ExternalName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalNamespace
        /// </summary>
        [DataMember(Name="externalNamespace", EmitDefaultValue=false)]
        public string ExternalNamespace { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public UserSchemaAttributeItems Items { get; set; }

        /// <summary>
        /// Gets or Sets Master
        /// </summary>
        [DataMember(Name="master", EmitDefaultValue=false)]
        public UserSchemaAttributeMaster Master { get; set; }

        /// <summary>
        /// Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets MinLength
        /// </summary>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }

        /// <summary>
        /// Gets or Sets Mutability
        /// </summary>
        [DataMember(Name="mutability", EmitDefaultValue=false)]
        public string Mutability { get; set; }

        /// <summary>
        /// Gets or Sets OneOf
        /// </summary>
        [DataMember(Name="oneOf", EmitDefaultValue=false)]
        public List<UserSchemaAttributeEnum> OneOf { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<UserSchemaAttributePermission> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public UserSchemaAttributeScope Scope { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public UserSchemaAttributeType Type { get; set; }

        /// <summary>
        /// Gets or Sets Union
        /// </summary>
        [DataMember(Name="union", EmitDefaultValue=false)]
        public UserSchemaAttributeUnion Union { get; set; }

        /// <summary>
        /// Gets or Sets Unique
        /// </summary>
        [DataMember(Name="unique", EmitDefaultValue=false)]
        public string Unique { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupSchemaAttribute {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Enum: ").Append(_Enum).Append("\n");
            sb.Append("  ExternalName: ").Append(ExternalName).Append("\n");
            sb.Append("  ExternalNamespace: ").Append(ExternalNamespace).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Master: ").Append(Master).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  Mutability: ").Append(Mutability).Append("\n");
            sb.Append("  OneOf: ").Append(OneOf).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Union: ").Append(Union).Append("\n");
            sb.Append("  Unique: ").Append(Unique).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupSchemaAttribute);
        }

        /// <summary>
        /// Returns true if GroupSchemaAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupSchemaAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupSchemaAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Enum == input._Enum ||
                    this._Enum != null &&
                    input._Enum != null &&
                    this._Enum.SequenceEqual(input._Enum)
                ) && 
                (
                    this.ExternalName == input.ExternalName ||
                    (this.ExternalName != null &&
                    this.ExternalName.Equals(input.ExternalName))
                ) && 
                (
                    this.ExternalNamespace == input.ExternalNamespace ||
                    (this.ExternalNamespace != null &&
                    this.ExternalNamespace.Equals(input.ExternalNamespace))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Master == input.Master ||
                    (this.Master != null &&
                    this.Master.Equals(input.Master))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.MinLength == input.MinLength ||
                    (this.MinLength != null &&
                    this.MinLength.Equals(input.MinLength))
                ) && 
                (
                    this.Mutability == input.Mutability ||
                    (this.Mutability != null &&
                    this.Mutability.Equals(input.Mutability))
                ) && 
                (
                    this.OneOf == input.OneOf ||
                    this.OneOf != null &&
                    input.OneOf != null &&
                    this.OneOf.SequenceEqual(input.OneOf)
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    input.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Union == input.Union ||
                    (this.Union != null &&
                    this.Union.Equals(input.Union))
                ) && 
                (
                    this.Unique == input.Unique ||
                    (this.Unique != null &&
                    this.Unique.Equals(input.Unique))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this._Enum != null)
                    hashCode = hashCode * 59 + this._Enum.GetHashCode();
                if (this.ExternalName != null)
                    hashCode = hashCode * 59 + this.ExternalName.GetHashCode();
                if (this.ExternalNamespace != null)
                    hashCode = hashCode * 59 + this.ExternalNamespace.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.Master != null)
                    hashCode = hashCode * 59 + this.Master.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.MinLength != null)
                    hashCode = hashCode * 59 + this.MinLength.GetHashCode();
                if (this.Mutability != null)
                    hashCode = hashCode * 59 + this.Mutability.GetHashCode();
                if (this.OneOf != null)
                    hashCode = hashCode * 59 + this.OneOf.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Union != null)
                    hashCode = hashCode * 59 + this.Union.GetHashCode();
                if (this.Unique != null)
                    hashCode = hashCode * 59 + this.Unique.GetHashCode();
                return hashCode;
            }
        }
    }
}
