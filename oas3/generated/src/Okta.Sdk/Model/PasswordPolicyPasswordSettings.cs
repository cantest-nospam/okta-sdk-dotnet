/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// PasswordPolicyPasswordSettings
    /// </summary>
    [DataContract]
        public partial class PasswordPolicyPasswordSettings :  IEquatable<PasswordPolicyPasswordSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicyPasswordSettings" /> class.
        /// </summary>
        /// <param name="age">age.</param>
        /// <param name="complexity">complexity.</param>
        /// <param name="lockout">lockout.</param>
        public PasswordPolicyPasswordSettings(PasswordPolicyPasswordSettingsAge age = default(PasswordPolicyPasswordSettingsAge), PasswordPolicyPasswordSettingsComplexity complexity = default(PasswordPolicyPasswordSettingsComplexity), PasswordPolicyPasswordSettingsLockout lockout = default(PasswordPolicyPasswordSettingsLockout))
        {
            this.Age = age;
            this.Complexity = complexity;
            this.Lockout = lockout;
        }
        
        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public PasswordPolicyPasswordSettingsAge Age { get; set; }

        /// <summary>
        /// Gets or Sets Complexity
        /// </summary>
        [DataMember(Name="complexity", EmitDefaultValue=false)]
        public PasswordPolicyPasswordSettingsComplexity Complexity { get; set; }

        /// <summary>
        /// Gets or Sets Lockout
        /// </summary>
        [DataMember(Name="lockout", EmitDefaultValue=false)]
        public PasswordPolicyPasswordSettingsLockout Lockout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordPolicyPasswordSettings {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Complexity: ").Append(Complexity).Append("\n");
            sb.Append("  Lockout: ").Append(Lockout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordPolicyPasswordSettings);
        }

        /// <summary>
        /// Returns true if PasswordPolicyPasswordSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordPolicyPasswordSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicyPasswordSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Complexity == input.Complexity ||
                    (this.Complexity != null &&
                    this.Complexity.Equals(input.Complexity))
                ) && 
                (
                    this.Lockout == input.Lockout ||
                    (this.Lockout != null &&
                    this.Lockout.Equals(input.Lockout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Complexity != null)
                    hashCode = hashCode * 59 + this.Complexity.GetHashCode();
                if (this.Lockout != null)
                    hashCode = hashCode * 59 + this.Lockout.GetHashCode();
                return hashCode;
            }
        }
    }
}
