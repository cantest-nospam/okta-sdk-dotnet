/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// ApplicationVisibility
    /// </summary>
    [DataContract]
        public partial class ApplicationVisibility :  IEquatable<ApplicationVisibility>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationVisibility" /> class.
        /// </summary>
        /// <param name="appLinks">appLinks.</param>
        /// <param name="autoLaunch">autoLaunch.</param>
        /// <param name="autoSubmitToolbar">autoSubmitToolbar.</param>
        /// <param name="hide">hide.</param>
        public ApplicationVisibility(Dictionary<string, bool?> appLinks = default(Dictionary<string, bool?>), bool? autoLaunch = default(bool?), bool? autoSubmitToolbar = default(bool?), ApplicationVisibilityHide hide = default(ApplicationVisibilityHide))
        {
            this.AppLinks = appLinks;
            this.AutoLaunch = autoLaunch;
            this.AutoSubmitToolbar = autoSubmitToolbar;
            this.Hide = hide;
        }
        
        /// <summary>
        /// Gets or Sets AppLinks
        /// </summary>
        [DataMember(Name="appLinks", EmitDefaultValue=false)]
        public Dictionary<string, bool?> AppLinks { get; set; }

        /// <summary>
        /// Gets or Sets AutoLaunch
        /// </summary>
        [DataMember(Name="autoLaunch", EmitDefaultValue=false)]
        public bool? AutoLaunch { get; set; }

        /// <summary>
        /// Gets or Sets AutoSubmitToolbar
        /// </summary>
        [DataMember(Name="autoSubmitToolbar", EmitDefaultValue=false)]
        public bool? AutoSubmitToolbar { get; set; }

        /// <summary>
        /// Gets or Sets Hide
        /// </summary>
        [DataMember(Name="hide", EmitDefaultValue=false)]
        public ApplicationVisibilityHide Hide { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationVisibility {\n");
            sb.Append("  AppLinks: ").Append(AppLinks).Append("\n");
            sb.Append("  AutoLaunch: ").Append(AutoLaunch).Append("\n");
            sb.Append("  AutoSubmitToolbar: ").Append(AutoSubmitToolbar).Append("\n");
            sb.Append("  Hide: ").Append(Hide).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationVisibility);
        }

        /// <summary>
        /// Returns true if ApplicationVisibility instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationVisibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationVisibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppLinks == input.AppLinks ||
                    this.AppLinks != null &&
                    input.AppLinks != null &&
                    this.AppLinks.SequenceEqual(input.AppLinks)
                ) && 
                (
                    this.AutoLaunch == input.AutoLaunch ||
                    (this.AutoLaunch != null &&
                    this.AutoLaunch.Equals(input.AutoLaunch))
                ) && 
                (
                    this.AutoSubmitToolbar == input.AutoSubmitToolbar ||
                    (this.AutoSubmitToolbar != null &&
                    this.AutoSubmitToolbar.Equals(input.AutoSubmitToolbar))
                ) && 
                (
                    this.Hide == input.Hide ||
                    (this.Hide != null &&
                    this.Hide.Equals(input.Hide))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppLinks != null)
                    hashCode = hashCode * 59 + this.AppLinks.GetHashCode();
                if (this.AutoLaunch != null)
                    hashCode = hashCode * 59 + this.AutoLaunch.GetHashCode();
                if (this.AutoSubmitToolbar != null)
                    hashCode = hashCode * 59 + this.AutoSubmitToolbar.GetHashCode();
                if (this.Hide != null)
                    hashCode = hashCode * 59 + this.Hide.GetHashCode();
                return hashCode;
            }
        }
    }
}
