/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// PossessionConstraint
    /// </summary>
    [DataContract]
        public partial class PossessionConstraint :  IEquatable<PossessionConstraint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PossessionConstraint" /> class.
        /// </summary>
        /// <param name="deviceBound">deviceBound.</param>
        /// <param name="hardwareProtection">hardwareProtection.</param>
        /// <param name="phishingResistant">phishingResistant.</param>
        /// <param name="userPresence">userPresence.</param>
        public PossessionConstraint(string deviceBound = default(string), string hardwareProtection = default(string), string phishingResistant = default(string), string userPresence = default(string))
        {
            this.DeviceBound = deviceBound;
            this.HardwareProtection = hardwareProtection;
            this.PhishingResistant = phishingResistant;
            this.UserPresence = userPresence;
        }
        
        /// <summary>
        /// Gets or Sets DeviceBound
        /// </summary>
        [DataMember(Name="deviceBound", EmitDefaultValue=false)]
        public string DeviceBound { get; set; }

        /// <summary>
        /// Gets or Sets HardwareProtection
        /// </summary>
        [DataMember(Name="hardwareProtection", EmitDefaultValue=false)]
        public string HardwareProtection { get; set; }

        /// <summary>
        /// Gets or Sets PhishingResistant
        /// </summary>
        [DataMember(Name="phishingResistant", EmitDefaultValue=false)]
        public string PhishingResistant { get; set; }

        /// <summary>
        /// Gets or Sets UserPresence
        /// </summary>
        [DataMember(Name="userPresence", EmitDefaultValue=false)]
        public string UserPresence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PossessionConstraint {\n");
            sb.Append("  DeviceBound: ").Append(DeviceBound).Append("\n");
            sb.Append("  HardwareProtection: ").Append(HardwareProtection).Append("\n");
            sb.Append("  PhishingResistant: ").Append(PhishingResistant).Append("\n");
            sb.Append("  UserPresence: ").Append(UserPresence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PossessionConstraint);
        }

        /// <summary>
        /// Returns true if PossessionConstraint instances are equal
        /// </summary>
        /// <param name="input">Instance of PossessionConstraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PossessionConstraint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceBound == input.DeviceBound ||
                    (this.DeviceBound != null &&
                    this.DeviceBound.Equals(input.DeviceBound))
                ) && 
                (
                    this.HardwareProtection == input.HardwareProtection ||
                    (this.HardwareProtection != null &&
                    this.HardwareProtection.Equals(input.HardwareProtection))
                ) && 
                (
                    this.PhishingResistant == input.PhishingResistant ||
                    (this.PhishingResistant != null &&
                    this.PhishingResistant.Equals(input.PhishingResistant))
                ) && 
                (
                    this.UserPresence == input.UserPresence ||
                    (this.UserPresence != null &&
                    this.UserPresence.Equals(input.UserPresence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceBound != null)
                    hashCode = hashCode * 59 + this.DeviceBound.GetHashCode();
                if (this.HardwareProtection != null)
                    hashCode = hashCode * 59 + this.HardwareProtection.GetHashCode();
                if (this.PhishingResistant != null)
                    hashCode = hashCode * 59 + this.PhishingResistant.GetHashCode();
                if (this.UserPresence != null)
                    hashCode = hashCode * 59 + this.UserPresence.GetHashCode();
                return hashCode;
            }
        }
    }
}
