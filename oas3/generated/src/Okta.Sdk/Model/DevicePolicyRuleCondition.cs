/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// DevicePolicyRuleCondition
    /// </summary>
    [DataContract]
        public partial class DevicePolicyRuleCondition :  IEquatable<DevicePolicyRuleCondition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicePolicyRuleCondition" /> class.
        /// </summary>
        /// <param name="migrated">migrated.</param>
        /// <param name="platform">platform.</param>
        /// <param name="rooted">rooted.</param>
        /// <param name="trustLevel">trustLevel.</param>
        public DevicePolicyRuleCondition(bool? migrated = default(bool?), DevicePolicyRuleConditionPlatform platform = default(DevicePolicyRuleConditionPlatform), bool? rooted = default(bool?), DevicePolicyTrustLevel trustLevel = default(DevicePolicyTrustLevel))
        {
            this.Migrated = migrated;
            this.Platform = platform;
            this.Rooted = rooted;
            this.TrustLevel = trustLevel;
        }
        
        /// <summary>
        /// Gets or Sets Migrated
        /// </summary>
        [DataMember(Name="migrated", EmitDefaultValue=false)]
        public bool? Migrated { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public DevicePolicyRuleConditionPlatform Platform { get; set; }

        /// <summary>
        /// Gets or Sets Rooted
        /// </summary>
        [DataMember(Name="rooted", EmitDefaultValue=false)]
        public bool? Rooted { get; set; }

        /// <summary>
        /// Gets or Sets TrustLevel
        /// </summary>
        [DataMember(Name="trustLevel", EmitDefaultValue=false)]
        public DevicePolicyTrustLevel TrustLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicePolicyRuleCondition {\n");
            sb.Append("  Migrated: ").Append(Migrated).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Rooted: ").Append(Rooted).Append("\n");
            sb.Append("  TrustLevel: ").Append(TrustLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicePolicyRuleCondition);
        }

        /// <summary>
        /// Returns true if DevicePolicyRuleCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicePolicyRuleCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicePolicyRuleCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Migrated == input.Migrated ||
                    (this.Migrated != null &&
                    this.Migrated.Equals(input.Migrated))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Rooted == input.Rooted ||
                    (this.Rooted != null &&
                    this.Rooted.Equals(input.Rooted))
                ) && 
                (
                    this.TrustLevel == input.TrustLevel ||
                    (this.TrustLevel != null &&
                    this.TrustLevel.Equals(input.TrustLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Migrated != null)
                    hashCode = hashCode * 59 + this.Migrated.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Rooted != null)
                    hashCode = hashCode * 59 + this.Rooted.GetHashCode();
                if (this.TrustLevel != null)
                    hashCode = hashCode * 59 + this.TrustLevel.GetHashCode();
                return hashCode;
            }
        }
    }
}
