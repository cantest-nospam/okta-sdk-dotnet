/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// LifecycleExpirationPolicyRuleCondition
    /// </summary>
    [DataContract]
        public partial class LifecycleExpirationPolicyRuleCondition :  IEquatable<LifecycleExpirationPolicyRuleCondition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LifecycleExpirationPolicyRuleCondition" /> class.
        /// </summary>
        /// <param name="lifecycleStatus">lifecycleStatus.</param>
        /// <param name="number">number.</param>
        /// <param name="unit">unit.</param>
        public LifecycleExpirationPolicyRuleCondition(string lifecycleStatus = default(string), int? number = default(int?), string unit = default(string))
        {
            this.LifecycleStatus = lifecycleStatus;
            this.Number = number;
            this.Unit = unit;
        }
        
        /// <summary>
        /// Gets or Sets LifecycleStatus
        /// </summary>
        [DataMember(Name="lifecycleStatus", EmitDefaultValue=false)]
        public string LifecycleStatus { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LifecycleExpirationPolicyRuleCondition {\n");
            sb.Append("  LifecycleStatus: ").Append(LifecycleStatus).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LifecycleExpirationPolicyRuleCondition);
        }

        /// <summary>
        /// Returns true if LifecycleExpirationPolicyRuleCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of LifecycleExpirationPolicyRuleCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LifecycleExpirationPolicyRuleCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LifecycleStatus == input.LifecycleStatus ||
                    (this.LifecycleStatus != null &&
                    this.LifecycleStatus.Equals(input.LifecycleStatus))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LifecycleStatus != null)
                    hashCode = hashCode * 59 + this.LifecycleStatus.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }
    }
}
