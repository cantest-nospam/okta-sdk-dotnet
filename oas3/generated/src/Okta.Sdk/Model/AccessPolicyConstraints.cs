/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// AccessPolicyConstraints
    /// </summary>
    [DataContract]
        public partial class AccessPolicyConstraints :  IEquatable<AccessPolicyConstraints>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessPolicyConstraints" /> class.
        /// </summary>
        /// <param name="knowledge">knowledge.</param>
        /// <param name="possession">possession.</param>
        public AccessPolicyConstraints( knowledge = default(), PossessionConstraint possession = default(PossessionConstraint))
        {
            this.Knowledge = knowledge;
            this.Possession = possession;
        }
        
        /// <summary>
        /// Gets or Sets Knowledge
        /// </summary>
        [DataMember(Name="knowledge", EmitDefaultValue=false)]
        public  Knowledge { get; set; }

        /// <summary>
        /// Gets or Sets Possession
        /// </summary>
        [DataMember(Name="possession", EmitDefaultValue=false)]
        public PossessionConstraint Possession { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessPolicyConstraints {\n");
            sb.Append("  Knowledge: ").Append(Knowledge).Append("\n");
            sb.Append("  Possession: ").Append(Possession).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessPolicyConstraints);
        }

        /// <summary>
        /// Returns true if AccessPolicyConstraints instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessPolicyConstraints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessPolicyConstraints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Knowledge == input.Knowledge ||
                    (this.Knowledge != null &&
                    this.Knowledge.Equals(input.Knowledge))
                ) && 
                (
                    this.Possession == input.Possession ||
                    (this.Possession != null &&
                    this.Possession.Equals(input.Possession))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Knowledge != null)
                    hashCode = hashCode * 59 + this.Knowledge.GetHashCode();
                if (this.Possession != null)
                    hashCode = hashCode * 59 + this.Possession.GetHashCode();
                return hashCode;
            }
        }
    }
}
