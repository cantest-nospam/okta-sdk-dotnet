/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Okta.Sdk.Client.SwaggerDateConverter;

namespace Okta.Sdk.Model
{
    /// <summary>
    /// IdentityProviderCredentialsTrust
    /// </summary>
    [DataContract]
        public partial class IdentityProviderCredentialsTrust :  IEquatable<IdentityProviderCredentialsTrust>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderCredentialsTrust" /> class.
        /// </summary>
        /// <param name="audience">audience.</param>
        /// <param name="issuer">issuer.</param>
        /// <param name="kid">kid.</param>
        /// <param name="revocation">revocation.</param>
        /// <param name="revocationCacheLifetime">revocationCacheLifetime.</param>
        public IdentityProviderCredentialsTrust(string audience = default(string), string issuer = default(string), string kid = default(string), IdentityProviderCredentialsTrustRevocation revocation = default(IdentityProviderCredentialsTrustRevocation), int? revocationCacheLifetime = default(int?))
        {
            this.Audience = audience;
            this.Issuer = issuer;
            this.Kid = kid;
            this.Revocation = revocation;
            this.RevocationCacheLifetime = revocationCacheLifetime;
        }
        
        /// <summary>
        /// Gets or Sets Audience
        /// </summary>
        [DataMember(Name="audience", EmitDefaultValue=false)]
        public string Audience { get; set; }

        /// <summary>
        /// Gets or Sets Issuer
        /// </summary>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or Sets Kid
        /// </summary>
        [DataMember(Name="kid", EmitDefaultValue=false)]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or Sets Revocation
        /// </summary>
        [DataMember(Name="revocation", EmitDefaultValue=false)]
        public IdentityProviderCredentialsTrustRevocation Revocation { get; set; }

        /// <summary>
        /// Gets or Sets RevocationCacheLifetime
        /// </summary>
        [DataMember(Name="revocationCacheLifetime", EmitDefaultValue=false)]
        public int? RevocationCacheLifetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProviderCredentialsTrust {\n");
            sb.Append("  Audience: ").Append(Audience).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Revocation: ").Append(Revocation).Append("\n");
            sb.Append("  RevocationCacheLifetime: ").Append(RevocationCacheLifetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProviderCredentialsTrust);
        }

        /// <summary>
        /// Returns true if IdentityProviderCredentialsTrust instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProviderCredentialsTrust to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderCredentialsTrust input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Audience == input.Audience ||
                    (this.Audience != null &&
                    this.Audience.Equals(input.Audience))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.Revocation == input.Revocation ||
                    (this.Revocation != null &&
                    this.Revocation.Equals(input.Revocation))
                ) && 
                (
                    this.RevocationCacheLifetime == input.RevocationCacheLifetime ||
                    (this.RevocationCacheLifetime != null &&
                    this.RevocationCacheLifetime.Equals(input.RevocationCacheLifetime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Audience != null)
                    hashCode = hashCode * 59 + this.Audience.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.Kid != null)
                    hashCode = hashCode * 59 + this.Kid.GetHashCode();
                if (this.Revocation != null)
                    hashCode = hashCode * 59 + this.Revocation.GetHashCode();
                if (this.RevocationCacheLifetime != null)
                    hashCode = hashCode * 59 + this.RevocationCacheLifetime.GetHashCode();
                return hashCode;
            }
        }
    }
}
