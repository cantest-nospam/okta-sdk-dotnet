/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPolicyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void ActivatePolicy (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivatePolicyWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void ActivatePolicyRule (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivatePolicyRuleWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Policy</returns>
        Policy CreatePolicy (Policy body, bool? activate = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> CreatePolicyWithHttpInfo (Policy body, bool? activate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>PolicyRule</returns>
        PolicyRule CreatePolicyRule (PolicyRule body, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        ApiResponse<PolicyRule> CreatePolicyRuleWithHttpInfo (PolicyRule body, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeactivatePolicy (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivatePolicyWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeactivatePolicyRule (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivatePolicyRuleWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeletePolicy (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeletePolicyRule (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyRuleWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Policy</returns>
        Policy GetPolicy (string policyId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> GetPolicyWithHttpInfo (string policyId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>PolicyRule</returns>
        PolicyRule GetPolicyRule (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        ApiResponse<PolicyRule> GetPolicyRuleWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all policies with the specified type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;Policy&gt;</returns>
        List<Policy> ListPolicies (string type, string status = null, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all policies with the specified type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Policy&gt;</returns>
        ApiResponse<List<Policy>> ListPoliciesWithHttpInfo (string type, string status = null, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>List&lt;PolicyRule&gt;</returns>
        List<PolicyRule> ListPolicyRules (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of List&lt;PolicyRule&gt;</returns>
        ApiResponse<List<PolicyRule>> ListPolicyRulesWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Policy</returns>
        Policy UpdatePolicy (Policy body, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Policy</returns>
        ApiResponse<Policy> UpdatePolicyWithHttpInfo (Policy body, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>PolicyRule</returns>
        PolicyRule UpdatePolicyRule (PolicyRule body, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        ApiResponse<PolicyRule> UpdatePolicyRuleWithHttpInfo (PolicyRule body, string policyId, string ruleId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivatePolicyAsync (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivatePolicyAsyncWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivatePolicyRuleAsync (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivatePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> CreatePolicyAsync (Policy body, bool? activate = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> CreatePolicyAsyncWithHttpInfo (Policy body, bool? activate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of PolicyRule</returns>
        System.Threading.Tasks.Task<PolicyRule> CreatePolicyRuleAsync (PolicyRule body, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyRule>> CreatePolicyRuleAsyncWithHttpInfo (PolicyRule body, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivatePolicyAsync (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivatePolicyAsyncWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivatePolicyRuleAsync (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivatePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyAsync (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyRuleAsync (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> GetPolicyAsync (string policyId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> GetPolicyAsyncWithHttpInfo (string policyId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of PolicyRule</returns>
        System.Threading.Tasks.Task<PolicyRule> GetPolicyRuleAsync (string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyRule>> GetPolicyRuleAsyncWithHttpInfo (string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all policies with the specified type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;Policy&gt;</returns>
        System.Threading.Tasks.Task<List<Policy>> ListPoliciesAsync (string type, string status = null, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets all policies with the specified type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Policy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Policy>>> ListPoliciesAsyncWithHttpInfo (string type, string status = null, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of List&lt;PolicyRule&gt;</returns>
        System.Threading.Tasks.Task<List<PolicyRule>> ListPolicyRulesAsync (string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (List&lt;PolicyRule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PolicyRule>>> ListPolicyRulesAsyncWithHttpInfo (string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of Policy</returns>
        System.Threading.Tasks.Task<Policy> UpdatePolicyAsync (Policy body, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        System.Threading.Tasks.Task<ApiResponse<Policy>> UpdatePolicyAsyncWithHttpInfo (Policy body, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of PolicyRule</returns>
        System.Threading.Tasks.Task<PolicyRule> UpdatePolicyRuleAsync (PolicyRule body, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy rule.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyRule>> UpdatePolicyRuleAsyncWithHttpInfo (PolicyRule body, string policyId, string ruleId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PolicyApi : IPolicyApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicyApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyApi"/> class
        /// </summary>
        /// <returns></returns>
        public PolicyApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PolicyApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Activates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void ActivatePolicy (string policyId)
        {
             ActivatePolicyWithHttpInfo(policyId);
        }

        /// <summary>
        ///  Activates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivatePolicyWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ActivatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivatePolicyAsync (string policyId)
        {
             await ActivatePolicyAsyncWithHttpInfo(policyId);

        }

        /// <summary>
        ///  Activates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivatePolicyAsyncWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ActivatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void ActivatePolicyRule (string policyId, string ruleId)
        {
             ActivatePolicyRuleWithHttpInfo(policyId, ruleId);
        }

        /// <summary>
        ///  Activates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivatePolicyRuleWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ActivatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->ActivatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivatePolicyRuleAsync (string policyId, string ruleId)
        {
             await ActivatePolicyRuleAsyncWithHttpInfo(policyId, ruleId);

        }

        /// <summary>
        ///  Activates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivatePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ActivatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->ActivatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Creates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Policy</returns>
        public Policy CreatePolicy (Policy body, bool? activate = null)
        {
             ApiResponse<Policy> localVarResponse = CreatePolicyWithHttpInfo(body, activate);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > CreatePolicyWithHttpInfo (Policy body, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->CreatePolicy");

            var localVarPath = "./api/v1/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Creates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> CreatePolicyAsync (Policy body, bool? activate = null)
        {
             ApiResponse<Policy> localVarResponse = await CreatePolicyAsyncWithHttpInfo(body, activate);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="activate"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> CreatePolicyAsyncWithHttpInfo (Policy body, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->CreatePolicy");

            var localVarPath = "./api/v1/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Creates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>PolicyRule</returns>
        public PolicyRule CreatePolicyRule (PolicyRule body, string policyId)
        {
             ApiResponse<PolicyRule> localVarResponse = CreatePolicyRuleWithHttpInfo(body, policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        public ApiResponse< PolicyRule > CreatePolicyRuleWithHttpInfo (PolicyRule body, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->CreatePolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->CreatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

        /// <summary>
        ///  Creates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of PolicyRule</returns>
        public async System.Threading.Tasks.Task<PolicyRule> CreatePolicyRuleAsync (PolicyRule body, string policyId)
        {
             ApiResponse<PolicyRule> localVarResponse = await CreatePolicyRuleAsyncWithHttpInfo(body, policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyRule>> CreatePolicyRuleAsyncWithHttpInfo (PolicyRule body, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->CreatePolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->CreatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

        /// <summary>
        ///  Deactivates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeactivatePolicy (string policyId)
        {
             DeactivatePolicyWithHttpInfo(policyId);
        }

        /// <summary>
        ///  Deactivates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivatePolicyWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeactivatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivatePolicyAsync (string policyId)
        {
             await DeactivatePolicyAsyncWithHttpInfo(policyId);

        }

        /// <summary>
        ///  Deactivates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivatePolicyAsyncWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeactivatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeactivatePolicyRule (string policyId, string ruleId)
        {
             DeactivatePolicyRuleWithHttpInfo(policyId, ruleId);
        }

        /// <summary>
        ///  Deactivates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivatePolicyRuleWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeactivatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->DeactivatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivatePolicyRuleAsync (string policyId, string ruleId)
        {
             await DeactivatePolicyRuleAsyncWithHttpInfo(policyId, ruleId);

        }

        /// <summary>
        ///  Deactivates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivatePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeactivatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->DeactivatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeletePolicy (string policyId)
        {
             DeletePolicyWithHttpInfo(policyId);
        }

        /// <summary>
        ///  Removes a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeletePolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyAsync (string policyId)
        {
             await DeletePolicyAsyncWithHttpInfo(policyId);

        }

        /// <summary>
        ///  Removes a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeletePolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeletePolicyRule (string policyId, string ruleId)
        {
             DeletePolicyRuleWithHttpInfo(policyId, ruleId);
        }

        /// <summary>
        ///  Removes a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePolicyRuleWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeletePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->DeletePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Removes a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyRuleAsync (string policyId, string ruleId)
        {
             await DeletePolicyRuleAsyncWithHttpInfo(policyId, ruleId);

        }

        /// <summary>
        ///  Removes a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyRuleAsyncWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->DeletePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->DeletePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Gets a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Policy</returns>
        public Policy GetPolicy (string policyId, string expand = null)
        {
             ApiResponse<Policy> localVarResponse = GetPolicyWithHttpInfo(policyId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > GetPolicyWithHttpInfo (string policyId, string expand = null)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->GetPolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Gets a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> GetPolicyAsync (string policyId, string expand = null)
        {
             ApiResponse<Policy> localVarResponse = await GetPolicyAsyncWithHttpInfo(policyId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> GetPolicyAsyncWithHttpInfo (string policyId, string expand = null)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->GetPolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Gets a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>PolicyRule</returns>
        public PolicyRule GetPolicyRule (string policyId, string ruleId)
        {
             ApiResponse<PolicyRule> localVarResponse = GetPolicyRuleWithHttpInfo(policyId, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        public ApiResponse< PolicyRule > GetPolicyRuleWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->GetPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->GetPolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

        /// <summary>
        ///  Gets a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of PolicyRule</returns>
        public async System.Threading.Tasks.Task<PolicyRule> GetPolicyRuleAsync (string policyId, string ruleId)
        {
             ApiResponse<PolicyRule> localVarResponse = await GetPolicyRuleAsyncWithHttpInfo(policyId, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyRule>> GetPolicyRuleAsyncWithHttpInfo (string policyId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->GetPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->GetPolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

        /// <summary>
        ///  Gets all policies with the specified type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;Policy&gt;</returns>
        public List<Policy> ListPolicies (string type, string status = null, string expand = null)
        {
             ApiResponse<List<Policy>> localVarResponse = ListPoliciesWithHttpInfo(type, status, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets all policies with the specified type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Policy&gt;</returns>
        public ApiResponse< List<Policy> > ListPoliciesWithHttpInfo (string type, string status = null, string expand = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PolicyApi->ListPolicies");

            var localVarPath = "./api/v1/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Policy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Policy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Policy>)));
        }

        /// <summary>
        ///  Gets all policies with the specified type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;Policy&gt;</returns>
        public async System.Threading.Tasks.Task<List<Policy>> ListPoliciesAsync (string type, string status = null, string expand = null)
        {
             ApiResponse<List<Policy>> localVarResponse = await ListPoliciesAsyncWithHttpInfo(type, status, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets all policies with the specified type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="status"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Policy&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Policy>>> ListPoliciesAsyncWithHttpInfo (string type, string status = null, string expand = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling PolicyApi->ListPolicies");

            var localVarPath = "./api/v1/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Policy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Policy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Policy>)));
        }

        /// <summary>
        ///  Enumerates all policy rules.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>List&lt;PolicyRule&gt;</returns>
        public List<PolicyRule> ListPolicyRules (string policyId)
        {
             ApiResponse<List<PolicyRule>> localVarResponse = ListPolicyRulesWithHttpInfo(policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all policy rules.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of List&lt;PolicyRule&gt;</returns>
        public ApiResponse< List<PolicyRule> > ListPolicyRulesWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ListPolicyRules");

            var localVarPath = "./api/v1/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicyRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PolicyRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PolicyRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyRule>)));
        }

        /// <summary>
        ///  Enumerates all policy rules.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of List&lt;PolicyRule&gt;</returns>
        public async System.Threading.Tasks.Task<List<PolicyRule>> ListPolicyRulesAsync (string policyId)
        {
             ApiResponse<List<PolicyRule>> localVarResponse = await ListPolicyRulesAsyncWithHttpInfo(policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates all policy rules.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (List&lt;PolicyRule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PolicyRule>>> ListPolicyRulesAsyncWithHttpInfo (string policyId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->ListPolicyRules");

            var localVarPath = "./api/v1/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPolicyRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PolicyRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PolicyRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PolicyRule>)));
        }

        /// <summary>
        ///  Updates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Policy</returns>
        public Policy UpdatePolicy (Policy body, string policyId)
        {
             ApiResponse<Policy> localVarResponse = UpdatePolicyWithHttpInfo(body, policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Policy</returns>
        public ApiResponse< Policy > UpdatePolicyWithHttpInfo (Policy body, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->UpdatePolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->UpdatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Updates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of Policy</returns>
        public async System.Threading.Tasks.Task<Policy> UpdatePolicyAsync (Policy body, string policyId)
        {
             ApiResponse<Policy> localVarResponse = await UpdatePolicyAsyncWithHttpInfo(body, policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (Policy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Policy>> UpdatePolicyAsyncWithHttpInfo (Policy body, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->UpdatePolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->UpdatePolicy");

            var localVarPath = "./api/v1/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Policy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Policy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Policy)));
        }

        /// <summary>
        ///  Updates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>PolicyRule</returns>
        public PolicyRule UpdatePolicyRule (PolicyRule body, string policyId, string ruleId)
        {
             ApiResponse<PolicyRule> localVarResponse = UpdatePolicyRuleWithHttpInfo(body, policyId, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of PolicyRule</returns>
        public ApiResponse< PolicyRule > UpdatePolicyRuleWithHttpInfo (PolicyRule body, string policyId, string ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->UpdatePolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->UpdatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->UpdatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

        /// <summary>
        ///  Updates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of PolicyRule</returns>
        public async System.Threading.Tasks.Task<PolicyRule> UpdatePolicyRuleAsync (PolicyRule body, string policyId, string ruleId)
        {
             ApiResponse<PolicyRule> localVarResponse = await UpdatePolicyRuleAsyncWithHttpInfo(body, policyId, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates a policy rule.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (PolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyRule>> UpdatePolicyRuleAsyncWithHttpInfo (PolicyRule body, string policyId, string ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PolicyApi->UpdatePolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling PolicyApi->UpdatePolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling PolicyApi->UpdatePolicyRule");

            var localVarPath = "./api/v1/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyRule)));
        }

    }
}
