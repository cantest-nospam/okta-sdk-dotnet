/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICAPTCHAApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance CreateCaptchaInstance (CAPTCHAInstance body = null);

        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> CreateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body = null);
        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns></returns>
        void DeleteCaptchaInstance (string captchaId);

        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCaptchaInstanceWithHttpInfo (string captchaId);
        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance GetCaptchaInstance (string captchaId);

        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> GetCaptchaInstanceWithHttpInfo (string captchaId);
        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CAPTCHAInstance&gt;</returns>
        List<CAPTCHAInstance> ListCaptchaInstances ();

        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CAPTCHAInstance&gt;</returns>
        ApiResponse<List<CAPTCHAInstance>> ListCaptchaInstancesWithHttpInfo ();
        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance PartialUpdateCaptchaInstance (CAPTCHAInstance body, string captchaId);

        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> PartialUpdateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body, string captchaId);
        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        CAPTCHAInstance UpdateCaptchaInstance (CAPTCHAInstance body, string captchaId);

        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        ApiResponse<CAPTCHAInstance> UpdateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body, string captchaId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> CreateCaptchaInstanceAsync (CAPTCHAInstance body = null);

        /// <summary>
        /// Create new CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> CreateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body = null);
        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCaptchaInstanceAsync (string captchaId);

        /// <summary>
        /// Delete CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCaptchaInstanceAsyncWithHttpInfo (string captchaId);
        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> GetCaptchaInstanceAsync (string captchaId);

        /// <summary>
        /// Get CAPTCHA Instance
        /// </summary>
        /// <remarks>
        /// Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> GetCaptchaInstanceAsyncWithHttpInfo (string captchaId);
        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CAPTCHAInstance&gt;</returns>
        System.Threading.Tasks.Task<List<CAPTCHAInstance>> ListCaptchaInstancesAsync ();

        /// <summary>
        /// List CAPTCHA instances
        /// </summary>
        /// <remarks>
        /// Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CAPTCHAInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CAPTCHAInstance>>> ListCaptchaInstancesAsyncWithHttpInfo ();
        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> PartialUpdateCaptchaInstanceAsync (CAPTCHAInstance body, string captchaId);

        /// <summary>
        /// Partial Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> PartialUpdateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body, string captchaId);
        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        System.Threading.Tasks.Task<CAPTCHAInstance> UpdateCaptchaInstanceAsync (CAPTCHAInstance body, string captchaId);

        /// <summary>
        /// Update CAPTCHA instance
        /// </summary>
        /// <remarks>
        /// Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> UpdateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body, string captchaId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CAPTCHAApi : ICAPTCHAApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CAPTCHAApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class
        /// </summary>
        /// <returns></returns>
        public CAPTCHAApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CAPTCHAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CAPTCHAApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance CreateCaptchaInstance (CAPTCHAInstance body = null)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = CreateCaptchaInstanceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public ApiResponse< CAPTCHAInstance > CreateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body = null)
        {

            var localVarPath = "./api/v1/captchas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> CreateCaptchaInstanceAsync (CAPTCHAInstance body = null)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = await CreateCaptchaInstanceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new CAPTCHA instance Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> CreateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body = null)
        {

            var localVarPath = "./api/v1/captchas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns></returns>
        public void DeleteCaptchaInstance (string captchaId)
        {
             DeleteCaptchaInstanceWithHttpInfo(captchaId);
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCaptchaInstanceWithHttpInfo (string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->DeleteCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCaptchaInstanceAsync (string captchaId)
        {
             await DeleteCaptchaInstanceAsyncWithHttpInfo(captchaId);

        }

        /// <summary>
        /// Delete CAPTCHA Instance Delete a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCaptchaInstanceAsyncWithHttpInfo (string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->DeleteCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance GetCaptchaInstance (string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = GetCaptchaInstanceWithHttpInfo(captchaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public ApiResponse< CAPTCHAInstance > GetCaptchaInstanceWithHttpInfo (string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->GetCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> GetCaptchaInstanceAsync (string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = await GetCaptchaInstanceAsyncWithHttpInfo(captchaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get CAPTCHA Instance Fetches a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> GetCaptchaInstanceAsyncWithHttpInfo (string captchaId)
        {
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->GetCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;CAPTCHAInstance&gt;</returns>
        public List<CAPTCHAInstance> ListCaptchaInstances ()
        {
             ApiResponse<List<CAPTCHAInstance>> localVarResponse = ListCaptchaInstancesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;CAPTCHAInstance&gt;</returns>
        public ApiResponse< List<CAPTCHAInstance> > ListCaptchaInstancesWithHttpInfo ()
        {

            var localVarPath = "./api/v1/captchas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCaptchaInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CAPTCHAInstance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CAPTCHAInstance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CAPTCHAInstance>)));
        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;CAPTCHAInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<CAPTCHAInstance>> ListCaptchaInstancesAsync ()
        {
             ApiResponse<List<CAPTCHAInstance>> localVarResponse = await ListCaptchaInstancesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List CAPTCHA instances Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;CAPTCHAInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CAPTCHAInstance>>> ListCaptchaInstancesAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/captchas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCaptchaInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CAPTCHAInstance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<CAPTCHAInstance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CAPTCHAInstance>)));
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance PartialUpdateCaptchaInstance (CAPTCHAInstance body, string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = PartialUpdateCaptchaInstanceWithHttpInfo(body, captchaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public ApiResponse< CAPTCHAInstance > PartialUpdateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body, string captchaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> PartialUpdateCaptchaInstanceAsync (CAPTCHAInstance body, string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = await PartialUpdateCaptchaInstanceAsyncWithHttpInfo(body, captchaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partial Update CAPTCHA instance Partially update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> PartialUpdateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body, string captchaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->PartialUpdateCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>CAPTCHAInstance</returns>
        public CAPTCHAInstance UpdateCaptchaInstance (CAPTCHAInstance body, string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = UpdateCaptchaInstanceWithHttpInfo(body, captchaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>ApiResponse of CAPTCHAInstance</returns>
        public ApiResponse< CAPTCHAInstance > UpdateCaptchaInstanceWithHttpInfo (CAPTCHAInstance body, string captchaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CAPTCHAApi->UpdateCaptchaInstance");
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->UpdateCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of CAPTCHAInstance</returns>
        public async System.Threading.Tasks.Task<CAPTCHAInstance> UpdateCaptchaInstanceAsync (CAPTCHAInstance body, string captchaId)
        {
             ApiResponse<CAPTCHAInstance> localVarResponse = await UpdateCaptchaInstanceAsyncWithHttpInfo(body, captchaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update CAPTCHA instance Update a CAPTCHA instance by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="captchaId">id of the CAPTCHA</param>
        /// <returns>Task of ApiResponse (CAPTCHAInstance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CAPTCHAInstance>> UpdateCaptchaInstanceAsyncWithHttpInfo (CAPTCHAInstance body, string captchaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CAPTCHAApi->UpdateCaptchaInstance");
            // verify the required parameter 'captchaId' is set
            if (captchaId == null)
                throw new ApiException(400, "Missing required parameter 'captchaId' when calling CAPTCHAApi->UpdateCaptchaInstance");

            var localVarPath = "./api/v1/captchas/{captchaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (captchaId != null) localVarPathParams.Add("captchaId", this.Configuration.ApiClient.ParameterToString(captchaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCaptchaInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CAPTCHAInstance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CAPTCHAInstance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CAPTCHAInstance)));
        }

    }
}
