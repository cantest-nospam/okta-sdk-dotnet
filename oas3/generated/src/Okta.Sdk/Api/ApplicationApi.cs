/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IApplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Application
        /// </summary>
        /// <remarks>
        /// Activates an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        void ActivateApplication (string appId);

        /// <summary>
        /// Activate Application
        /// </summary>
        /// <remarks>
        /// Activates an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateApplicationWithHttpInfo (string appId);
        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning
        /// </summary>
        /// <remarks>
        /// Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>AppUser</returns>
        AppUser AssignUserToApplication (AppUser body, string appId);

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning
        /// </summary>
        /// <remarks>
        /// Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of AppUser</returns>
        ApiResponse<AppUser> AssignUserToApplicationWithHttpInfo (AppUser body, string appId);
        /// <summary>
        /// Clone Application Key Credential
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey CloneApplicationKey (string appId, string keyId, string targetAid);

        /// <summary>
        /// Clone Application Key Credential
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> CloneApplicationKeyWithHttpInfo (string appId, string keyId, string targetAid);
        /// <summary>
        /// Add Application
        /// </summary>
        /// <remarks>
        /// Adds a new application to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Application</returns>
        Application CreateApplication (Application body, string oktaAccessGatewayAgent = null, bool? activate = null);

        /// <summary>
        /// Add Application
        /// </summary>
        /// <remarks>
        /// Adds a new application to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> CreateApplicationWithHttpInfo (Application body, string oktaAccessGatewayAgent = null, bool? activate = null);
        /// <summary>
        /// Assign Group to Application
        /// </summary>
        /// <remarks>
        /// Assigns a group to an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApplicationGroupAssignment</returns>
        ApplicationGroupAssignment CreateApplicationGroupAssignment (string appId, string groupId, ApplicationGroupAssignment body = null);

        /// <summary>
        /// Assign Group to Application
        /// </summary>
        /// <remarks>
        /// Assigns a group to an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ApplicationGroupAssignment</returns>
        ApiResponse<ApplicationGroupAssignment> CreateApplicationGroupAssignmentWithHttpInfo (string appId, string groupId, ApplicationGroupAssignment body = null);
        /// <summary>
        /// Deactivate Application
        /// </summary>
        /// <remarks>
        /// Deactivates an active application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        void DeactivateApplication (string appId);

        /// <summary>
        /// Deactivate Application
        /// </summary>
        /// <remarks>
        /// Deactivates an active application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateApplicationWithHttpInfo (string appId);
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Removes an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        void DeleteApplication (string appId);

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Removes an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationWithHttpInfo (string appId);
        /// <summary>
        /// Remove Group from Application
        /// </summary>
        /// <remarks>
        /// Removes a group assignment from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        void DeleteApplicationGroupAssignment (string appId, string groupId);

        /// <summary>
        /// Remove Group from Application
        /// </summary>
        /// <remarks>
        /// Removes a group assignment from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationGroupAssignmentWithHttpInfo (string appId, string groupId);
        /// <summary>
        /// Remove User from Application
        /// </summary>
        /// <remarks>
        /// Removes an assignment for a user from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns></returns>
        void DeleteApplicationUser (string appId, string userId, bool? sendEmail = null);

        /// <summary>
        /// Remove User from Application
        /// </summary>
        /// <remarks>
        /// Removes an assignment for a user from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationUserWithHttpInfo (string appId, string userId, bool? sendEmail = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an application key credential
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GenerateApplicationKey (string appId, int? validityYears = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an application key credential
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GenerateApplicationKeyWithHttpInfo (string appId, int? validityYears = null);
        /// <summary>
        /// Generate Certificate Signing Request for Application
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns the Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Csr</returns>
        Csr GenerateCsrForApplication (CsrMetadata body, string appId);

        /// <summary>
        /// Generate Certificate Signing Request for Application
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns the Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GenerateCsrForApplicationWithHttpInfo (CsrMetadata body, string appId);
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Application</returns>
        Application GetApplication (string appId, string expand = null);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (string appId, string expand = null);
        /// <summary>
        /// Get Assigned Group for Application
        /// </summary>
        /// <remarks>
        /// Fetches an application group assignment
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApplicationGroupAssignment</returns>
        ApplicationGroupAssignment GetApplicationGroupAssignment (string appId, string groupId, string expand = null);

        /// <summary>
        /// Get Assigned Group for Application
        /// </summary>
        /// <remarks>
        /// Fetches an application group assignment
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of ApplicationGroupAssignment</returns>
        ApiResponse<ApplicationGroupAssignment> GetApplicationGroupAssignmentWithHttpInfo (string appId, string groupId, string expand = null);
        /// <summary>
        /// Get Key Credential for Application
        /// </summary>
        /// <remarks>
        /// Gets a specific application key credential by kid
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GetApplicationKey (string appId, string keyId);

        /// <summary>
        /// Get Key Credential for Application
        /// </summary>
        /// <remarks>
        /// Gets a specific application key credential by kid
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GetApplicationKeyWithHttpInfo (string appId, string keyId);
        /// <summary>
        /// Get Assigned User for Application
        /// </summary>
        /// <remarks>
        /// Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>AppUser</returns>
        AppUser GetApplicationUser (string appId, string userId, string expand = null);

        /// <summary>
        /// Get Assigned User for Application
        /// </summary>
        /// <remarks>
        /// Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of AppUser</returns>
        ApiResponse<AppUser> GetApplicationUserWithHttpInfo (string appId, string userId, string expand = null);
        /// <summary>
        /// Get Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        Csr GetCsrForApplication (string appId, string csrId);

        /// <summary>
        /// Get Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GetCsrForApplicationWithHttpInfo (string appId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2Token</returns>
        OAuth2Token GetOAuth2TokenForApplication (string appId, string tokenId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        ApiResponse<OAuth2Token> GetOAuth2TokenForApplicationWithHttpInfo (string appId, string tokenId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a single scope consent grant for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2ScopeConsentGrant</returns>
        OAuth2ScopeConsentGrant GetScopeConsentGrant (string appId, string grantId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a single scope consent grant for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ScopeConsentGrant</returns>
        ApiResponse<OAuth2ScopeConsentGrant> GetScopeConsentGrantWithHttpInfo (string appId, string grantId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>OAuth2ScopeConsentGrant</returns>
        OAuth2ScopeConsentGrant GrantConsentToScope (OAuth2ScopeConsentGrant body, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of OAuth2ScopeConsentGrant</returns>
        ApiResponse<OAuth2ScopeConsentGrant> GrantConsentToScopeWithHttpInfo (OAuth2ScopeConsentGrant body, string appId);
        /// <summary>
        /// List Groups Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates group assignments for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;ApplicationGroupAssignment&gt;</returns>
        List<ApplicationGroupAssignment> ListApplicationGroupAssignments (string appId, string q = null, string after = null, int? limit = null, string expand = null);

        /// <summary>
        /// List Groups Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates group assignments for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ApplicationGroupAssignment&gt;</returns>
        ApiResponse<List<ApplicationGroupAssignment>> ListApplicationGroupAssignmentsWithHttpInfo (string appId, string q = null, string after = null, int? limit = null, string expand = null);
        /// <summary>
        /// List Key Credentials for Application
        /// </summary>
        /// <remarks>
        /// Enumerates key credentials for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListApplicationKeys (string appId);

        /// <summary>
        /// List Key Credentials for Application
        /// </summary>
        /// <remarks>
        /// Enumerates key credentials for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListApplicationKeysWithHttpInfo (string appId);
        /// <summary>
        /// List Users Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates all assigned [application users](#application-user-model) for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;AppUser&gt;</returns>
        List<AppUser> ListApplicationUsers (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null);

        /// <summary>
        /// List Users Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates all assigned [application users](#application-user-model) for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AppUser&gt;</returns>
        ApiResponse<List<AppUser>> ListApplicationUsersWithHttpInfo (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null);
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>List&lt;Application&gt;</returns>
        List<Application> ListApplications (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null);

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Application&gt;</returns>
        ApiResponse<List<Application>> ListApplicationsWithHttpInfo (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null);
        /// <summary>
        /// List Certificate Signing Requests for Application
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        List<Csr> ListCsrsForApplication (string appId);

        /// <summary>
        /// List Certificate Signing Requests for Application
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        ApiResponse<List<Csr>> ListCsrsForApplicationWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all tokens for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2Token&gt;</returns>
        List<OAuth2Token> ListOAuth2TokensForApplication (string appId, string expand = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all tokens for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Token&gt;</returns>
        ApiResponse<List<OAuth2Token>> ListOAuth2TokensForApplicationWithHttpInfo (string appId, string expand = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all scope consent grants for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        List<OAuth2ScopeConsentGrant> ListScopeConsentGrants (string appId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all scope consent grants for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        ApiResponse<List<OAuth2ScopeConsentGrant>> ListScopeConsentGrantsWithHttpInfo (string appId, string expand = null);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Revoke Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revokes a certificate signing request and deletes the key pair from the application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        void RevokeCsrFromApplication (string appId, string csrId);

        /// <summary>
        /// Revoke Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revokes a certificate signing request and deletes the key pair from the application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeCsrFromApplicationWithHttpInfo (string appId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the specified token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        void RevokeOAuth2TokenForApplication (string appId, string tokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the specified token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2TokenForApplicationWithHttpInfo (string appId, string tokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes all tokens for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        void RevokeOAuth2TokensForApplication (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes all tokens for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2TokensForApplicationWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes permission for the application to request the given scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns></returns>
        void RevokeScopeConsentGrant (string appId, string grantId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes permission for the application to request the given scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeScopeConsentGrantWithHttpInfo (string appId, string grantId);
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates an application in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Application</returns>
        Application UpdateApplication (Application body, string appId);

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates an application in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> UpdateApplicationWithHttpInfo (Application body, string appId);
        /// <summary>
        /// Update Application Profile for Assigned User
        /// </summary>
        /// <remarks>
        /// Updates a user&#x27;s profile for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>AppUser</returns>
        AppUser UpdateApplicationUser (AppUser body, string appId, string userId);

        /// <summary>
        /// Update Application Profile for Assigned User
        /// </summary>
        /// <remarks>
        /// Updates a user&#x27;s profile for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of AppUser</returns>
        ApiResponse<AppUser> UpdateApplicationUserWithHttpInfo (AppUser body, string appId, string userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Application
        /// </summary>
        /// <remarks>
        /// Activates an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateApplicationAsync (string appId);

        /// <summary>
        /// Activate Application
        /// </summary>
        /// <remarks>
        /// Activates an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateApplicationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning
        /// </summary>
        /// <remarks>
        /// Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of AppUser</returns>
        System.Threading.Tasks.Task<AppUser> AssignUserToApplicationAsync (AppUser body, string appId);

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning
        /// </summary>
        /// <remarks>
        /// Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppUser>> AssignUserToApplicationAsyncWithHttpInfo (AppUser body, string appId);
        /// <summary>
        /// Clone Application Key Credential
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> CloneApplicationKeyAsync (string appId, string keyId, string targetAid);

        /// <summary>
        /// Clone Application Key Credential
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CloneApplicationKeyAsyncWithHttpInfo (string appId, string keyId, string targetAid);
        /// <summary>
        /// Add Application
        /// </summary>
        /// <remarks>
        /// Adds a new application to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> CreateApplicationAsync (Application body, string oktaAccessGatewayAgent = null, bool? activate = null);

        /// <summary>
        /// Add Application
        /// </summary>
        /// <remarks>
        /// Adds a new application to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationAsyncWithHttpInfo (Application body, string oktaAccessGatewayAgent = null, bool? activate = null);
        /// <summary>
        /// Assign Group to Application
        /// </summary>
        /// <remarks>
        /// Assigns a group to an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApplicationGroupAssignment</returns>
        System.Threading.Tasks.Task<ApplicationGroupAssignment> CreateApplicationGroupAssignmentAsync (string appId, string groupId, ApplicationGroupAssignment body = null);

        /// <summary>
        /// Assign Group to Application
        /// </summary>
        /// <remarks>
        /// Assigns a group to an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationGroupAssignment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationGroupAssignment>> CreateApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId, ApplicationGroupAssignment body = null);
        /// <summary>
        /// Deactivate Application
        /// </summary>
        /// <remarks>
        /// Deactivates an active application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateApplicationAsync (string appId);

        /// <summary>
        /// Deactivate Application
        /// </summary>
        /// <remarks>
        /// Deactivates an active application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateApplicationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Removes an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationAsync (string appId);

        /// <summary>
        /// Delete Application
        /// </summary>
        /// <remarks>
        /// Removes an inactive application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Remove Group from Application
        /// </summary>
        /// <remarks>
        /// Removes a group assignment from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationGroupAssignmentAsync (string appId, string groupId);

        /// <summary>
        /// Remove Group from Application
        /// </summary>
        /// <remarks>
        /// Removes a group assignment from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId);
        /// <summary>
        /// Remove User from Application
        /// </summary>
        /// <remarks>
        /// Removes an assignment for a user from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationUserAsync (string appId, string userId, bool? sendEmail = null);

        /// <summary>
        /// Remove User from Application
        /// </summary>
        /// <remarks>
        /// Removes an assignment for a user from an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationUserAsyncWithHttpInfo (string appId, string userId, bool? sendEmail = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an application key credential
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GenerateApplicationKeyAsync (string appId, int? validityYears = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an application key credential
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GenerateApplicationKeyAsyncWithHttpInfo (string appId, int? validityYears = null);
        /// <summary>
        /// Generate Certificate Signing Request for Application
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns the Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GenerateCsrForApplicationAsync (CsrMetadata body, string appId);

        /// <summary>
        /// Generate Certificate Signing Request for Application
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns the Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GenerateCsrForApplicationAsyncWithHttpInfo (CsrMetadata body, string appId);
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (string appId, string expand = null);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (string appId, string expand = null);
        /// <summary>
        /// Get Assigned Group for Application
        /// </summary>
        /// <remarks>
        /// Fetches an application group assignment
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApplicationGroupAssignment</returns>
        System.Threading.Tasks.Task<ApplicationGroupAssignment> GetApplicationGroupAssignmentAsync (string appId, string groupId, string expand = null);

        /// <summary>
        /// Get Assigned Group for Application
        /// </summary>
        /// <remarks>
        /// Fetches an application group assignment
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationGroupAssignment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationGroupAssignment>> GetApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId, string expand = null);
        /// <summary>
        /// Get Key Credential for Application
        /// </summary>
        /// <remarks>
        /// Gets a specific application key credential by kid
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GetApplicationKeyAsync (string appId, string keyId);

        /// <summary>
        /// Get Key Credential for Application
        /// </summary>
        /// <remarks>
        /// Gets a specific application key credential by kid
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetApplicationKeyAsyncWithHttpInfo (string appId, string keyId);
        /// <summary>
        /// Get Assigned User for Application
        /// </summary>
        /// <remarks>
        /// Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of AppUser</returns>
        System.Threading.Tasks.Task<AppUser> GetApplicationUserAsync (string appId, string userId, string expand = null);

        /// <summary>
        /// Get Assigned User for Application
        /// </summary>
        /// <remarks>
        /// Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppUser>> GetApplicationUserAsyncWithHttpInfo (string appId, string userId, string expand = null);
        /// <summary>
        /// Get Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GetCsrForApplicationAsync (string appId, string csrId);

        /// <summary>
        /// Get Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GetCsrForApplicationAsyncWithHttpInfo (string appId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2Token</returns>
        System.Threading.Tasks.Task<OAuth2Token> GetOAuth2TokenForApplicationAsync (string appId, string tokenId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Token>> GetOAuth2TokenForApplicationAsyncWithHttpInfo (string appId, string tokenId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a single scope consent grant for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2ScopeConsentGrant</returns>
        System.Threading.Tasks.Task<OAuth2ScopeConsentGrant> GetScopeConsentGrantAsync (string appId, string grantId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a single scope consent grant for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2ScopeConsentGrant)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2ScopeConsentGrant>> GetScopeConsentGrantAsyncWithHttpInfo (string appId, string grantId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of OAuth2ScopeConsentGrant</returns>
        System.Threading.Tasks.Task<OAuth2ScopeConsentGrant> GrantConsentToScopeAsync (OAuth2ScopeConsentGrant body, string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (OAuth2ScopeConsentGrant)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2ScopeConsentGrant>> GrantConsentToScopeAsyncWithHttpInfo (OAuth2ScopeConsentGrant body, string appId);
        /// <summary>
        /// List Groups Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates group assignments for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;ApplicationGroupAssignment&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationGroupAssignment>> ListApplicationGroupAssignmentsAsync (string appId, string q = null, string after = null, int? limit = null, string expand = null);

        /// <summary>
        /// List Groups Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates group assignments for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationGroupAssignment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationGroupAssignment>>> ListApplicationGroupAssignmentsAsyncWithHttpInfo (string appId, string q = null, string after = null, int? limit = null, string expand = null);
        /// <summary>
        /// List Key Credentials for Application
        /// </summary>
        /// <remarks>
        /// Enumerates key credentials for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> ListApplicationKeysAsync (string appId);

        /// <summary>
        /// List Key Credentials for Application
        /// </summary>
        /// <remarks>
        /// Enumerates key credentials for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListApplicationKeysAsyncWithHttpInfo (string appId);
        /// <summary>
        /// List Users Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates all assigned [application users](#application-user-model) for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;AppUser&gt;</returns>
        System.Threading.Tasks.Task<List<AppUser>> ListApplicationUsersAsync (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null);

        /// <summary>
        /// List Users Assigned to Application
        /// </summary>
        /// <remarks>
        /// Enumerates all assigned [application users](#application-user-model) for an application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AppUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AppUser>>> ListApplicationUsersAsyncWithHttpInfo (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null);
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>Task of List&lt;Application&gt;</returns>
        System.Threading.Tasks.Task<List<Application>> ListApplicationsAsync (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null);

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Application&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Application>>> ListApplicationsAsyncWithHttpInfo (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null);
        /// <summary>
        /// List Certificate Signing Requests for Application
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        System.Threading.Tasks.Task<List<Csr>> ListCsrsForApplicationAsync (string appId);

        /// <summary>
        /// List Certificate Signing Requests for Application
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Csr>>> ListCsrsForApplicationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all tokens for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2Token&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Token>> ListOAuth2TokensForApplicationAsync (string appId, string expand = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all tokens for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Token&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Token>>> ListOAuth2TokensForApplicationAsyncWithHttpInfo (string appId, string expand = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all scope consent grants for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2ScopeConsentGrant>> ListScopeConsentGrantsAsync (string appId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all scope consent grants for the application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2ScopeConsentGrant&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2ScopeConsentGrant>>> ListScopeConsentGrantsAsyncWithHttpInfo (string appId, string expand = null);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId);

        /// <summary>
        /// Publish Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId);
        /// <summary>
        /// Revoke Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revokes a certificate signing request and deletes the key pair from the application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeCsrFromApplicationAsync (string appId, string csrId);

        /// <summary>
        /// Revoke Certificate Signing Request
        /// </summary>
        /// <remarks>
        /// Revokes a certificate signing request and deletes the key pair from the application.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeCsrFromApplicationAsyncWithHttpInfo (string appId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the specified token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2TokenForApplicationAsync (string appId, string tokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the specified token for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokenForApplicationAsyncWithHttpInfo (string appId, string tokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes all tokens for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2TokensForApplicationAsync (string appId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes all tokens for the specified application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokensForApplicationAsyncWithHttpInfo (string appId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes permission for the application to request the given scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeScopeConsentGrantAsync (string appId, string grantId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes permission for the application to request the given scope
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeScopeConsentGrantAsyncWithHttpInfo (string appId, string grantId);
        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates an application in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> UpdateApplicationAsync (Application body, string appId);

        /// <summary>
        /// Update Application
        /// </summary>
        /// <remarks>
        /// Updates an application in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> UpdateApplicationAsyncWithHttpInfo (Application body, string appId);
        /// <summary>
        /// Update Application Profile for Assigned User
        /// </summary>
        /// <remarks>
        /// Updates a user&#x27;s profile for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of AppUser</returns>
        System.Threading.Tasks.Task<AppUser> UpdateApplicationUserAsync (AppUser body, string appId, string userId);

        /// <summary>
        /// Update Application Profile for Assigned User
        /// </summary>
        /// <remarks>
        /// Updates a user&#x27;s profile for an application
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppUser>> UpdateApplicationUserAsyncWithHttpInfo (AppUser body, string appId, string userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ApplicationApi : IApplicationApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Application Activates an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void ActivateApplication (string appId)
        {
             ActivateApplicationWithHttpInfo(appId);
        }

        /// <summary>
        /// Activate Application Activates an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateApplicationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ActivateApplication");

            var localVarPath = "./api/v1/apps/{appId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Activate Application Activates an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateApplicationAsync (string appId)
        {
             await ActivateApplicationAsyncWithHttpInfo(appId);

        }

        /// <summary>
        /// Activate Application Activates an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateApplicationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ActivateApplication");

            var localVarPath = "./api/v1/apps/{appId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>AppUser</returns>
        public AppUser AssignUserToApplication (AppUser body, string appId)
        {
             ApiResponse<AppUser> localVarResponse = AssignUserToApplicationWithHttpInfo(body, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of AppUser</returns>
        public ApiResponse< AppUser > AssignUserToApplicationWithHttpInfo (AppUser body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->AssignUserToApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->AssignUserToApplication");

            var localVarPath = "./api/v1/apps/{appId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserToApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of AppUser</returns>
        public async System.Threading.Tasks.Task<AppUser> AssignUserToApplicationAsync (AppUser body, string appId)
        {
             ApiResponse<AppUser> localVarResponse = await AssignUserToApplicationAsyncWithHttpInfo(body, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign User to Application for SSO &amp; Provisioning Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppUser>> AssignUserToApplicationAsyncWithHttpInfo (AppUser body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->AssignUserToApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->AssignUserToApplication");

            var localVarPath = "./api/v1/apps/{appId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserToApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

        /// <summary>
        /// Clone Application Key Credential Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey CloneApplicationKey (string appId, string keyId, string targetAid)
        {
             ApiResponse<JsonWebKey> localVarResponse = CloneApplicationKeyWithHttpInfo(appId, keyId, targetAid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone Application Key Credential Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > CloneApplicationKeyWithHttpInfo (string appId, string keyId, string targetAid)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->CloneApplicationKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling ApplicationApi->CloneApplicationKey");
            // verify the required parameter 'targetAid' is set
            if (targetAid == null)
                throw new ApiException(400, "Missing required parameter 'targetAid' when calling ApplicationApi->CloneApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/{keyId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            if (targetAid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAid", targetAid)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Clone Application Key Credential Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> CloneApplicationKeyAsync (string appId, string keyId, string targetAid)
        {
             ApiResponse<JsonWebKey> localVarResponse = await CloneApplicationKeyAsyncWithHttpInfo(appId, keyId, targetAid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone Application Key Credential Clones a X.509 certificate for an application key credential from a source application to target application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetAid">Unique key of the target Application</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CloneApplicationKeyAsyncWithHttpInfo (string appId, string keyId, string targetAid)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->CloneApplicationKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling ApplicationApi->CloneApplicationKey");
            // verify the required parameter 'targetAid' is set
            if (targetAid == null)
                throw new ApiException(400, "Missing required parameter 'targetAid' when calling ApplicationApi->CloneApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/{keyId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            if (targetAid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetAid", targetAid)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Add Application Adds a new application to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Application</returns>
        public Application CreateApplication (Application body, string oktaAccessGatewayAgent = null, bool? activate = null)
        {
             ApiResponse<Application> localVarResponse = CreateApplicationWithHttpInfo(body, oktaAccessGatewayAgent, activate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Application Adds a new application to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > CreateApplicationWithHttpInfo (Application body, string oktaAccessGatewayAgent = null, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->CreateApplication");

            var localVarPath = "./api/v1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (oktaAccessGatewayAgent != null) localVarHeaderParams.Add("OktaAccessGateway-Agent", this.Configuration.ApiClient.ParameterToString(oktaAccessGatewayAgent)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Add Application Adds a new application to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> CreateApplicationAsync (Application body, string oktaAccessGatewayAgent = null, bool? activate = null)
        {
             ApiResponse<Application> localVarResponse = await CreateApplicationAsyncWithHttpInfo(body, oktaAccessGatewayAgent, activate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Application Adds a new application to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="oktaAccessGatewayAgent"> (optional)</param>
        /// <param name="activate">Executes activation lifecycle operation when creating the app (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationAsyncWithHttpInfo (Application body, string oktaAccessGatewayAgent = null, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->CreateApplication");

            var localVarPath = "./api/v1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (oktaAccessGatewayAgent != null) localVarHeaderParams.Add("OktaAccessGateway-Agent", this.Configuration.ApiClient.ParameterToString(oktaAccessGatewayAgent)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Assign Group to Application Assigns a group to an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApplicationGroupAssignment</returns>
        public ApplicationGroupAssignment CreateApplicationGroupAssignment (string appId, string groupId, ApplicationGroupAssignment body = null)
        {
             ApiResponse<ApplicationGroupAssignment> localVarResponse = CreateApplicationGroupAssignmentWithHttpInfo(appId, groupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Group to Application Assigns a group to an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ApplicationGroupAssignment</returns>
        public ApiResponse< ApplicationGroupAssignment > CreateApplicationGroupAssignmentWithHttpInfo (string appId, string groupId, ApplicationGroupAssignment body = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->CreateApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->CreateApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationGroupAssignment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApplicationGroupAssignment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationGroupAssignment)));
        }

        /// <summary>
        /// Assign Group to Application Assigns a group to an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApplicationGroupAssignment</returns>
        public async System.Threading.Tasks.Task<ApplicationGroupAssignment> CreateApplicationGroupAssignmentAsync (string appId, string groupId, ApplicationGroupAssignment body = null)
        {
             ApiResponse<ApplicationGroupAssignment> localVarResponse = await CreateApplicationGroupAssignmentAsyncWithHttpInfo(appId, groupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign Group to Application Assigns a group to an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationGroupAssignment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationGroupAssignment>> CreateApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId, ApplicationGroupAssignment body = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->CreateApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->CreateApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationGroupAssignment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApplicationGroupAssignment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationGroupAssignment)));
        }

        /// <summary>
        /// Deactivate Application Deactivates an active application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void DeactivateApplication (string appId)
        {
             DeactivateApplicationWithHttpInfo(appId);
        }

        /// <summary>
        /// Deactivate Application Deactivates an active application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivateApplicationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeactivateApplication");

            var localVarPath = "./api/v1/apps/{appId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deactivate Application Deactivates an active application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateApplicationAsync (string appId)
        {
             await DeactivateApplicationAsyncWithHttpInfo(appId);

        }

        /// <summary>
        /// Deactivate Application Deactivates an active application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateApplicationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeactivateApplication");

            var localVarPath = "./api/v1/apps/{appId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Application Removes an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void DeleteApplication (string appId)
        {
             DeleteApplicationWithHttpInfo(appId);
        }

        /// <summary>
        /// Delete Application Removes an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Application Removes an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationAsync (string appId)
        {
             await DeleteApplicationAsyncWithHttpInfo(appId);

        }

        /// <summary>
        /// Delete Application Removes an inactive application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Group from Application Removes a group assignment from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public void DeleteApplicationGroupAssignment (string appId, string groupId)
        {
             DeleteApplicationGroupAssignmentWithHttpInfo(appId, groupId);
        }

        /// <summary>
        /// Remove Group from Application Removes a group assignment from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationGroupAssignmentWithHttpInfo (string appId, string groupId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->DeleteApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Group from Application Removes a group assignment from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationGroupAssignmentAsync (string appId, string groupId)
        {
             await DeleteApplicationGroupAssignmentAsyncWithHttpInfo(appId, groupId);

        }

        /// <summary>
        /// Remove Group from Application Removes a group assignment from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->DeleteApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove User from Application Removes an assignment for a user from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteApplicationUser (string appId, string userId, bool? sendEmail = null)
        {
             DeleteApplicationUserWithHttpInfo(appId, userId, sendEmail);
        }

        /// <summary>
        /// Remove User from Application Removes an assignment for a user from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationUserWithHttpInfo (string appId, string userId, bool? sendEmail = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->DeleteApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (sendEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendEmail", sendEmail)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove User from Application Removes an assignment for a user from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationUserAsync (string appId, string userId, bool? sendEmail = null)
        {
             await DeleteApplicationUserAsyncWithHttpInfo(appId, userId, sendEmail);

        }

        /// <summary>
        /// Remove User from Application Removes an assignment for a user from an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="sendEmail"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationUserAsyncWithHttpInfo (string appId, string userId, bool? sendEmail = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->DeleteApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->DeleteApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (sendEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendEmail", sendEmail)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Generates a new X.509 certificate for an application key credential
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GenerateApplicationKey (string appId, int? validityYears = null)
        {
             ApiResponse<JsonWebKey> localVarResponse = GenerateApplicationKeyWithHttpInfo(appId, validityYears);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates a new X.509 certificate for an application key credential
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > GenerateApplicationKeyWithHttpInfo (string appId, int? validityYears = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GenerateApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (validityYears != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validityYears", validityYears)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Generates a new X.509 certificate for an application key credential
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GenerateApplicationKeyAsync (string appId, int? validityYears = null)
        {
             ApiResponse<JsonWebKey> localVarResponse = await GenerateApplicationKeyAsyncWithHttpInfo(appId, validityYears);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generates a new X.509 certificate for an application key credential
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="validityYears"> (optional)</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GenerateApplicationKeyAsyncWithHttpInfo (string appId, int? validityYears = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GenerateApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (validityYears != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validityYears", validityYears)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Generate Certificate Signing Request for Application Generates a new key pair and returns the Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Csr</returns>
        public Csr GenerateCsrForApplication (CsrMetadata body, string appId)
        {
             ApiResponse<Csr> localVarResponse = GenerateCsrForApplicationWithHttpInfo(body, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Certificate Signing Request for Application Generates a new key pair and returns the Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Csr</returns>
        public ApiResponse< Csr > GenerateCsrForApplicationWithHttpInfo (CsrMetadata body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->GenerateCsrForApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GenerateCsrForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCsrForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Generate Certificate Signing Request for Application Generates a new key pair and returns the Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GenerateCsrForApplicationAsync (CsrMetadata body, string appId)
        {
             ApiResponse<Csr> localVarResponse = await GenerateCsrForApplicationAsyncWithHttpInfo(body, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Certificate Signing Request for Application Generates a new key pair and returns the Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Csr>> GenerateCsrForApplicationAsyncWithHttpInfo (CsrMetadata body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->GenerateCsrForApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GenerateCsrForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCsrForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Get Application Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Application</returns>
        public Application GetApplication (string appId, string expand = null)
        {
             ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(appId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > GetApplicationWithHttpInfo (string appId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get Application Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (string appId, string expand = null)
        {
             ApiResponse<Application> localVarResponse = await GetApplicationAsyncWithHttpInfo(appId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Fetches an application from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (string appId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get Assigned Group for Application Fetches an application group assignment
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApplicationGroupAssignment</returns>
        public ApplicationGroupAssignment GetApplicationGroupAssignment (string appId, string groupId, string expand = null)
        {
             ApiResponse<ApplicationGroupAssignment> localVarResponse = GetApplicationGroupAssignmentWithHttpInfo(appId, groupId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assigned Group for Application Fetches an application group assignment
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of ApplicationGroupAssignment</returns>
        public ApiResponse< ApplicationGroupAssignment > GetApplicationGroupAssignmentWithHttpInfo (string appId, string groupId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->GetApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationGroupAssignment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApplicationGroupAssignment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationGroupAssignment)));
        }

        /// <summary>
        /// Get Assigned Group for Application Fetches an application group assignment
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApplicationGroupAssignment</returns>
        public async System.Threading.Tasks.Task<ApplicationGroupAssignment> GetApplicationGroupAssignmentAsync (string appId, string groupId, string expand = null)
        {
             ApiResponse<ApplicationGroupAssignment> localVarResponse = await GetApplicationGroupAssignmentAsyncWithHttpInfo(appId, groupId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assigned Group for Application Fetches an application group assignment
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="groupId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationGroupAssignment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationGroupAssignment>> GetApplicationGroupAssignmentAsyncWithHttpInfo (string appId, string groupId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationGroupAssignment");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ApplicationApi->GetApplicationGroupAssignment");

            var localVarPath = "./api/v1/apps/{appId}/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationGroupAssignment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationGroupAssignment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApplicationGroupAssignment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationGroupAssignment)));
        }

        /// <summary>
        /// Get Key Credential for Application Gets a specific application key credential by kid
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GetApplicationKey (string appId, string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = GetApplicationKeyWithHttpInfo(appId, keyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key Credential for Application Gets a specific application key credential by kid
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > GetApplicationKeyWithHttpInfo (string appId, string keyId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling ApplicationApi->GetApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Get Key Credential for Application Gets a specific application key credential by kid
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GetApplicationKeyAsync (string appId, string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await GetApplicationKeyAsyncWithHttpInfo(appId, keyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Key Credential for Application Gets a specific application key credential by kid
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetApplicationKeyAsyncWithHttpInfo (string appId, string keyId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling ApplicationApi->GetApplicationKey");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Get Assigned User for Application Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>AppUser</returns>
        public AppUser GetApplicationUser (string appId, string userId, string expand = null)
        {
             ApiResponse<AppUser> localVarResponse = GetApplicationUserWithHttpInfo(appId, userId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Assigned User for Application Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of AppUser</returns>
        public ApiResponse< AppUser > GetApplicationUserWithHttpInfo (string appId, string userId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->GetApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

        /// <summary>
        /// Get Assigned User for Application Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of AppUser</returns>
        public async System.Threading.Tasks.Task<AppUser> GetApplicationUserAsync (string appId, string userId, string expand = null)
        {
             ApiResponse<AppUser> localVarResponse = await GetApplicationUserAsyncWithHttpInfo(appId, userId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Assigned User for Application Fetches a specific user assignment for application by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppUser>> GetApplicationUserAsyncWithHttpInfo (string appId, string userId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->GetApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

        /// <summary>
        /// Get Certificate Signing Request Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        public Csr GetCsrForApplication (string appId, string csrId)
        {
             ApiResponse<Csr> localVarResponse = GetCsrForApplicationWithHttpInfo(appId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Certificate Signing Request Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        public ApiResponse< Csr > GetCsrForApplicationWithHttpInfo (string appId, string csrId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetCsrForApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->GetCsrForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCsrForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Get Certificate Signing Request Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GetCsrForApplicationAsync (string appId, string csrId)
        {
             ApiResponse<Csr> localVarResponse = await GetCsrForApplicationAsyncWithHttpInfo(appId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Certificate Signing Request Fetches a certificate signing request for the app by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Csr>> GetCsrForApplicationAsyncWithHttpInfo (string appId, string csrId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetCsrForApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->GetCsrForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCsrForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        ///  Gets a token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2Token</returns>
        public OAuth2Token GetOAuth2TokenForApplication (string appId, string tokenId, string expand = null)
        {
             ApiResponse<OAuth2Token> localVarResponse = GetOAuth2TokenForApplicationWithHttpInfo(appId, tokenId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        public ApiResponse< OAuth2Token > GetOAuth2TokenForApplicationWithHttpInfo (string appId, string tokenId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetOAuth2TokenForApplication");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling ApplicationApi->GetOAuth2TokenForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2TokenForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Token)));
        }

        /// <summary>
        ///  Gets a token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2Token</returns>
        public async System.Threading.Tasks.Task<OAuth2Token> GetOAuth2TokenForApplicationAsync (string appId, string tokenId, string expand = null)
        {
             ApiResponse<OAuth2Token> localVarResponse = await GetOAuth2TokenForApplicationAsyncWithHttpInfo(appId, tokenId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Token>> GetOAuth2TokenForApplicationAsyncWithHttpInfo (string appId, string tokenId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetOAuth2TokenForApplication");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling ApplicationApi->GetOAuth2TokenForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2TokenForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Token)));
        }

        /// <summary>
        ///  Fetches a single scope consent grant for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2ScopeConsentGrant</returns>
        public OAuth2ScopeConsentGrant GetScopeConsentGrant (string appId, string grantId, string expand = null)
        {
             ApiResponse<OAuth2ScopeConsentGrant> localVarResponse = GetScopeConsentGrantWithHttpInfo(appId, grantId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches a single scope consent grant for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ScopeConsentGrant</returns>
        public ApiResponse< OAuth2ScopeConsentGrant > GetScopeConsentGrantWithHttpInfo (string appId, string grantId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetScopeConsentGrant");
            // verify the required parameter 'grantId' is set
            if (grantId == null)
                throw new ApiException(400, "Missing required parameter 'grantId' when calling ApplicationApi->GetScopeConsentGrant");

            var localVarPath = "./api/v1/apps/{appId}/grants/{grantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (grantId != null) localVarPathParams.Add("grantId", this.Configuration.ApiClient.ParameterToString(grantId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScopeConsentGrant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ScopeConsentGrant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2ScopeConsentGrant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ScopeConsentGrant)));
        }

        /// <summary>
        ///  Fetches a single scope consent grant for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2ScopeConsentGrant</returns>
        public async System.Threading.Tasks.Task<OAuth2ScopeConsentGrant> GetScopeConsentGrantAsync (string appId, string grantId, string expand = null)
        {
             ApiResponse<OAuth2ScopeConsentGrant> localVarResponse = await GetScopeConsentGrantAsyncWithHttpInfo(appId, grantId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetches a single scope consent grant for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2ScopeConsentGrant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2ScopeConsentGrant>> GetScopeConsentGrantAsyncWithHttpInfo (string appId, string grantId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GetScopeConsentGrant");
            // verify the required parameter 'grantId' is set
            if (grantId == null)
                throw new ApiException(400, "Missing required parameter 'grantId' when calling ApplicationApi->GetScopeConsentGrant");

            var localVarPath = "./api/v1/apps/{appId}/grants/{grantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (grantId != null) localVarPathParams.Add("grantId", this.Configuration.ApiClient.ParameterToString(grantId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScopeConsentGrant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ScopeConsentGrant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2ScopeConsentGrant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ScopeConsentGrant)));
        }

        /// <summary>
        ///  Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>OAuth2ScopeConsentGrant</returns>
        public OAuth2ScopeConsentGrant GrantConsentToScope (OAuth2ScopeConsentGrant body, string appId)
        {
             ApiResponse<OAuth2ScopeConsentGrant> localVarResponse = GrantConsentToScopeWithHttpInfo(body, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of OAuth2ScopeConsentGrant</returns>
        public ApiResponse< OAuth2ScopeConsentGrant > GrantConsentToScopeWithHttpInfo (OAuth2ScopeConsentGrant body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->GrantConsentToScope");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GrantConsentToScope");

            var localVarPath = "./api/v1/apps/{appId}/grants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantConsentToScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ScopeConsentGrant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2ScopeConsentGrant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ScopeConsentGrant)));
        }

        /// <summary>
        ///  Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of OAuth2ScopeConsentGrant</returns>
        public async System.Threading.Tasks.Task<OAuth2ScopeConsentGrant> GrantConsentToScopeAsync (OAuth2ScopeConsentGrant body, string appId)
        {
             ApiResponse<OAuth2ScopeConsentGrant> localVarResponse = await GrantConsentToScopeAsyncWithHttpInfo(body, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Grants consent for the application to request an OAuth 2.0 Okta scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (OAuth2ScopeConsentGrant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2ScopeConsentGrant>> GrantConsentToScopeAsyncWithHttpInfo (OAuth2ScopeConsentGrant body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->GrantConsentToScope");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->GrantConsentToScope");

            var localVarPath = "./api/v1/apps/{appId}/grants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantConsentToScope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ScopeConsentGrant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2ScopeConsentGrant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ScopeConsentGrant)));
        }

        /// <summary>
        /// List Groups Assigned to Application Enumerates group assignments for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;ApplicationGroupAssignment&gt;</returns>
        public List<ApplicationGroupAssignment> ListApplicationGroupAssignments (string appId, string q = null, string after = null, int? limit = null, string expand = null)
        {
             ApiResponse<List<ApplicationGroupAssignment>> localVarResponse = ListApplicationGroupAssignmentsWithHttpInfo(appId, q, after, limit, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Groups Assigned to Application Enumerates group assignments for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ApplicationGroupAssignment&gt;</returns>
        public ApiResponse< List<ApplicationGroupAssignment> > ListApplicationGroupAssignmentsWithHttpInfo (string appId, string q = null, string after = null, int? limit = null, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationGroupAssignments");

            var localVarPath = "./api/v1/apps/{appId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationGroupAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationGroupAssignment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ApplicationGroupAssignment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationGroupAssignment>)));
        }

        /// <summary>
        /// List Groups Assigned to Application Enumerates group assignments for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;ApplicationGroupAssignment&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationGroupAssignment>> ListApplicationGroupAssignmentsAsync (string appId, string q = null, string after = null, int? limit = null, string expand = null)
        {
             ApiResponse<List<ApplicationGroupAssignment>> localVarResponse = await ListApplicationGroupAssignmentsAsyncWithHttpInfo(appId, q, after, limit, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Groups Assigned to Application Enumerates group assignments for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationGroupAssignment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationGroupAssignment>>> ListApplicationGroupAssignmentsAsyncWithHttpInfo (string appId, string q = null, string after = null, int? limit = null, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationGroupAssignments");

            var localVarPath = "./api/v1/apps/{appId}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationGroupAssignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationGroupAssignment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ApplicationGroupAssignment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationGroupAssignment>)));
        }

        /// <summary>
        /// List Key Credentials for Application Enumerates key credentials for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListApplicationKeys (string appId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = ListApplicationKeysWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Key Credentials for Application Enumerates key credentials for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public ApiResponse< List<JsonWebKey> > ListApplicationKeysWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationKeys");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Key Credentials for Application Enumerates key credentials for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> ListApplicationKeysAsync (string appId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = await ListApplicationKeysAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Key Credentials for Application Enumerates key credentials for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListApplicationKeysAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationKeys");

            var localVarPath = "./api/v1/apps/{appId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Users Assigned to Application Enumerates all assigned [application users](#application-user-model) for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;AppUser&gt;</returns>
        public List<AppUser> ListApplicationUsers (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null)
        {
             ApiResponse<List<AppUser>> localVarResponse = ListApplicationUsersWithHttpInfo(appId, q, queryScope, after, limit, filter, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Assigned to Application Enumerates all assigned [application users](#application-user-model) for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AppUser&gt;</returns>
        public ApiResponse< List<AppUser> > ListApplicationUsersWithHttpInfo (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationUsers");

            var localVarPath = "./api/v1/apps/{appId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (queryScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_scope", queryScope)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AppUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AppUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AppUser>)));
        }

        /// <summary>
        /// List Users Assigned to Application Enumerates all assigned [application users](#application-user-model) for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;AppUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<AppUser>> ListApplicationUsersAsync (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null)
        {
             ApiResponse<List<AppUser>> localVarResponse = await ListApplicationUsersAsyncWithHttpInfo(appId, q, queryScope, after, limit, filter, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Users Assigned to Application Enumerates all assigned [application users](#application-user-model) for an application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="queryScope"> (optional)</param>
        /// <param name="after">specifies the pagination cursor for the next page of assignments (optional)</param>
        /// <param name="limit">specifies the number of results for a page (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AppUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AppUser>>> ListApplicationUsersAsyncWithHttpInfo (string appId, string q = null, string queryScope = null, string after = null, int? limit = null, string filter = null, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListApplicationUsers");

            var localVarPath = "./api/v1/apps/{appId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (queryScope != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_scope", queryScope)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AppUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AppUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AppUser>)));
        }

        /// <summary>
        /// List Applications Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>List&lt;Application&gt;</returns>
        public List<Application> ListApplications (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null)
        {
             ApiResponse<List<Application>> localVarResponse = ListApplicationsWithHttpInfo(q, after, limit, filter, expand, includeNonDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Application&gt;</returns>
        public ApiResponse< List<Application> > ListApplicationsWithHttpInfo (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null)
        {

            var localVarPath = "./api/v1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (includeNonDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNonDeleted", includeNonDeleted)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Application>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Application>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Application>)));
        }

        /// <summary>
        /// List Applications Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>Task of List&lt;Application&gt;</returns>
        public async System.Threading.Tasks.Task<List<Application>> ListApplicationsAsync (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null)
        {
             ApiResponse<List<Application>> localVarResponse = await ListApplicationsAsyncWithHttpInfo(q, after, limit, filter, expand, includeNonDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of apps (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)</param>
        /// <param name="expand">Traverses users link relationship and optionally embeds Application User resource (optional)</param>
        /// <param name="includeNonDeleted"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Application&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Application>>> ListApplicationsAsyncWithHttpInfo (string q = null, string after = null, int? limit = null, string filter = null, string expand = null, bool? includeNonDeleted = null)
        {

            var localVarPath = "./api/v1/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (includeNonDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNonDeleted", includeNonDeleted)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Application>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Application>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Application>)));
        }

        /// <summary>
        /// List Certificate Signing Requests for Application Enumerates Certificate Signing Requests for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        public List<Csr> ListCsrsForApplication (string appId)
        {
             ApiResponse<List<Csr>> localVarResponse = ListCsrsForApplicationWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Certificate Signing Requests for Application Enumerates Certificate Signing Requests for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        public ApiResponse< List<Csr> > ListCsrsForApplicationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListCsrsForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCsrsForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Csr>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Csr>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Csr>)));
        }

        /// <summary>
        /// List Certificate Signing Requests for Application Enumerates Certificate Signing Requests for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        public async System.Threading.Tasks.Task<List<Csr>> ListCsrsForApplicationAsync (string appId)
        {
             ApiResponse<List<Csr>> localVarResponse = await ListCsrsForApplicationAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Certificate Signing Requests for Application Enumerates Certificate Signing Requests for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Csr>>> ListCsrsForApplicationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListCsrsForApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCsrsForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Csr>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Csr>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Csr>)));
        }

        /// <summary>
        ///  Lists all tokens for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2Token&gt;</returns>
        public List<OAuth2Token> ListOAuth2TokensForApplication (string appId, string expand = null, string after = null, int? limit = null)
        {
             ApiResponse<List<OAuth2Token>> localVarResponse = ListOAuth2TokensForApplicationWithHttpInfo(appId, expand, after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all tokens for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Token&gt;</returns>
        public ApiResponse< List<OAuth2Token> > ListOAuth2TokensForApplicationWithHttpInfo (string appId, string expand = null, string after = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListOAuth2TokensForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2TokensForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Token>)));
        }

        /// <summary>
        ///  Lists all tokens for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2Token&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Token>> ListOAuth2TokensForApplicationAsync (string appId, string expand = null, string after = null, int? limit = null)
        {
             ApiResponse<List<OAuth2Token>> localVarResponse = await ListOAuth2TokensForApplicationAsyncWithHttpInfo(appId, expand, after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all tokens for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Token&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2Token>>> ListOAuth2TokensForApplicationAsyncWithHttpInfo (string appId, string expand = null, string after = null, int? limit = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListOAuth2TokensForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2TokensForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Token>)));
        }

        /// <summary>
        ///  Lists all scope consent grants for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        public List<OAuth2ScopeConsentGrant> ListScopeConsentGrants (string appId, string expand = null)
        {
             ApiResponse<List<OAuth2ScopeConsentGrant>> localVarResponse = ListScopeConsentGrantsWithHttpInfo(appId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all scope consent grants for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        public ApiResponse< List<OAuth2ScopeConsentGrant> > ListScopeConsentGrantsWithHttpInfo (string appId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListScopeConsentGrants");

            var localVarPath = "./api/v1/apps/{appId}/grants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScopeConsentGrants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2ScopeConsentGrant>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2ScopeConsentGrant>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2ScopeConsentGrant>)));
        }

        /// <summary>
        ///  Lists all scope consent grants for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2ScopeConsentGrant&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2ScopeConsentGrant>> ListScopeConsentGrantsAsync (string appId, string expand = null)
        {
             ApiResponse<List<OAuth2ScopeConsentGrant>> localVarResponse = await ListScopeConsentGrantsAsyncWithHttpInfo(appId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Lists all scope consent grants for the application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2ScopeConsentGrant&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2ScopeConsentGrant>>> ListScopeConsentGrantsAsyncWithHttpInfo (string appId, string expand = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->ListScopeConsentGrants");

            var localVarPath = "./api/v1/apps/{appId}/grants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListScopeConsentGrants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2ScopeConsentGrant>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2ScopeConsentGrant>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2ScopeConsentGrant>)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrFromApplicationWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrFromApplicationAsyncWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrFromApplicationWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrFromApplicationAsyncWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrFromApplicationWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrFromApplicationAsyncWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrFromApplication (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrFromApplicationWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrFromApplicationWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrFromApplicationAsync (Object body, string appId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrFromApplicationAsyncWithHttpInfo(body, appId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish Certificate Signing Request Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrFromApplicationAsyncWithHttpInfo (Object body, string appId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->PublishCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->PublishCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Revoke Certificate Signing Request Revokes a certificate signing request and deletes the key pair from the application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        public void RevokeCsrFromApplication (string appId, string csrId)
        {
             RevokeCsrFromApplicationWithHttpInfo(appId, csrId);
        }

        /// <summary>
        /// Revoke Certificate Signing Request Revokes a certificate signing request and deletes the key pair from the application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeCsrFromApplicationWithHttpInfo (string appId, string csrId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->RevokeCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Revoke Certificate Signing Request Revokes a certificate signing request and deletes the key pair from the application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeCsrFromApplicationAsync (string appId, string csrId)
        {
             await RevokeCsrFromApplicationAsyncWithHttpInfo(appId, csrId);

        }

        /// <summary>
        /// Revoke Certificate Signing Request Revokes a certificate signing request and deletes the key pair from the application.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeCsrFromApplicationAsyncWithHttpInfo (string appId, string csrId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeCsrFromApplication");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling ApplicationApi->RevokeCsrFromApplication");

            var localVarPath = "./api/v1/apps/{appId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCsrFromApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes the specified token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        public void RevokeOAuth2TokenForApplication (string appId, string tokenId)
        {
             RevokeOAuth2TokenForApplicationWithHttpInfo(appId, tokenId);
        }

        /// <summary>
        ///  Revokes the specified token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeOAuth2TokenForApplicationWithHttpInfo (string appId, string tokenId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeOAuth2TokenForApplication");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling ApplicationApi->RevokeOAuth2TokenForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOAuth2TokenForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes the specified token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2TokenForApplicationAsync (string appId, string tokenId)
        {
             await RevokeOAuth2TokenForApplicationAsyncWithHttpInfo(appId, tokenId);

        }

        /// <summary>
        ///  Revokes the specified token for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokenForApplicationAsyncWithHttpInfo (string appId, string tokenId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeOAuth2TokenForApplication");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling ApplicationApi->RevokeOAuth2TokenForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOAuth2TokenForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes all tokens for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns></returns>
        public void RevokeOAuth2TokensForApplication (string appId)
        {
             RevokeOAuth2TokensForApplicationWithHttpInfo(appId);
        }

        /// <summary>
        ///  Revokes all tokens for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeOAuth2TokensForApplicationWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeOAuth2TokensForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOAuth2TokensForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes all tokens for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2TokensForApplicationAsync (string appId)
        {
             await RevokeOAuth2TokensForApplicationAsyncWithHttpInfo(appId);

        }

        /// <summary>
        ///  Revokes all tokens for the specified application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokensForApplicationAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeOAuth2TokensForApplication");

            var localVarPath = "./api/v1/apps/{appId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOAuth2TokensForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes permission for the application to request the given scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns></returns>
        public void RevokeScopeConsentGrant (string appId, string grantId)
        {
             RevokeScopeConsentGrantWithHttpInfo(appId, grantId);
        }

        /// <summary>
        ///  Revokes permission for the application to request the given scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeScopeConsentGrantWithHttpInfo (string appId, string grantId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeScopeConsentGrant");
            // verify the required parameter 'grantId' is set
            if (grantId == null)
                throw new ApiException(400, "Missing required parameter 'grantId' when calling ApplicationApi->RevokeScopeConsentGrant");

            var localVarPath = "./api/v1/apps/{appId}/grants/{grantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (grantId != null) localVarPathParams.Add("grantId", this.Configuration.ApiClient.ParameterToString(grantId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeScopeConsentGrant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revokes permission for the application to request the given scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeScopeConsentGrantAsync (string appId, string grantId)
        {
             await RevokeScopeConsentGrantAsyncWithHttpInfo(appId, grantId);

        }

        /// <summary>
        ///  Revokes permission for the application to request the given scope
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="grantId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeScopeConsentGrantAsyncWithHttpInfo (string appId, string grantId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->RevokeScopeConsentGrant");
            // verify the required parameter 'grantId' is set
            if (grantId == null)
                throw new ApiException(400, "Missing required parameter 'grantId' when calling ApplicationApi->RevokeScopeConsentGrant");

            var localVarPath = "./api/v1/apps/{appId}/grants/{grantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (grantId != null) localVarPathParams.Add("grantId", this.Configuration.ApiClient.ParameterToString(grantId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeScopeConsentGrant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Application Updates an application in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Application</returns>
        public Application UpdateApplication (Application body, string appId)
        {
             ApiResponse<Application> localVarResponse = UpdateApplicationWithHttpInfo(body, appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Updates an application in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > UpdateApplicationWithHttpInfo (Application body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->UpdateApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->UpdateApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Update Application Updates an application in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> UpdateApplicationAsync (Application body, string appId)
        {
             ApiResponse<Application> localVarResponse = await UpdateApplicationAsyncWithHttpInfo(body, appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Application Updates an application in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> UpdateApplicationAsyncWithHttpInfo (Application body, string appId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->UpdateApplication");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->UpdateApplication");

            var localVarPath = "./api/v1/apps/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Update Application Profile for Assigned User Updates a user&#x27;s profile for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>AppUser</returns>
        public AppUser UpdateApplicationUser (AppUser body, string appId, string userId)
        {
             ApiResponse<AppUser> localVarResponse = UpdateApplicationUserWithHttpInfo(body, appId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Application Profile for Assigned User Updates a user&#x27;s profile for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of AppUser</returns>
        public ApiResponse< AppUser > UpdateApplicationUserWithHttpInfo (AppUser body, string appId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->UpdateApplicationUser");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->UpdateApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->UpdateApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

        /// <summary>
        /// Update Application Profile for Assigned User Updates a user&#x27;s profile for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of AppUser</returns>
        public async System.Threading.Tasks.Task<AppUser> UpdateApplicationUserAsync (AppUser body, string appId, string userId)
        {
             ApiResponse<AppUser> localVarResponse = await UpdateApplicationUserAsyncWithHttpInfo(body, appId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Application Profile for Assigned User Updates a user&#x27;s profile for an application
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="appId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (AppUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppUser>> UpdateApplicationUserAsyncWithHttpInfo (AppUser body, string appId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->UpdateApplicationUser");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling ApplicationApi->UpdateApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ApplicationApi->UpdateApplicationUser");

            var localVarPath = "./api/v1/apps/{appId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AppUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppUser)));
        }

    }
}
