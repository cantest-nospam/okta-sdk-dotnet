/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthorizationServerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServer (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServerPolicy (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void ActivateAuthorizationServerPolicyRule (string authServerId, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivateAuthorizationServerPolicyRuleWithHttpInfo (string authServerId, string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer CreateAuthorizationServer (AuthorizationServer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> CreateAuthorizationServerWithHttpInfo (AuthorizationServer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy CreateAuthorizationServerPolicy (AuthorizationServerPolicy body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> CreateAuthorizationServerPolicyWithHttpInfo (AuthorizationServerPolicy body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule CreateAuthorizationServerPolicyRule (AuthorizationServerPolicyRule body, string policyId, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim CreateOAuth2Claim (OAuth2Claim body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> CreateOAuth2ClaimWithHttpInfo (OAuth2Claim body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope CreateOAuth2Scope (OAuth2Scope body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> CreateOAuth2ScopeWithHttpInfo (OAuth2Scope body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServer (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServerPolicy (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeactivateAuthorizationServerPolicyRule (string authServerId, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeactivateAuthorizationServerPolicyRuleWithHttpInfo (string authServerId, string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServer (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServerPolicy (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        void DeleteAuthorizationServerPolicyRule (string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthorizationServerPolicyRuleWithHttpInfo (string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns></returns>
        void DeleteOAuth2Claim (string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ClaimWithHttpInfo (string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        void DeleteOAuth2Scope (string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuth2ScopeWithHttpInfo (string authServerId, string scopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer GetAuthorizationServer (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> GetAuthorizationServerWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy GetAuthorizationServerPolicy (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> GetAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule GetAuthorizationServerPolicyRule (string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleWithHttpInfo (string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim GetOAuth2Claim (string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> GetOAuth2ClaimWithHttpInfo (string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope GetOAuth2Scope (string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> GetOAuth2ScopeWithHttpInfo (string authServerId, string scopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2RefreshToken</returns>
        OAuth2RefreshToken GetRefreshTokenForAuthorizationServerAndClient (string authServerId, string clientId, string tokenId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2RefreshToken</returns>
        ApiResponse<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string tokenId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListAuthorizationServerKeys (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListAuthorizationServerKeysWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicy&gt;</returns>
        List<AuthorizationServerPolicy> ListAuthorizationServerPolicies (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicy&gt;</returns>
        ApiResponse<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicyRule&gt;</returns>
        List<AuthorizationServerPolicyRule> ListAuthorizationServerPolicyRules (string policyId, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        ApiResponse<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesWithHttpInfo (string policyId, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;AuthorizationServer&gt;</returns>
        List<AuthorizationServer> ListAuthorizationServers (string q = null, string limit = null, string after = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizationServer&gt;</returns>
        ApiResponse<List<AuthorizationServer>> ListAuthorizationServersWithHttpInfo (string q = null, string limit = null, string after = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Claim&gt;</returns>
        List<OAuth2Claim> ListOAuth2Claims (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Claim&gt;</returns>
        ApiResponse<List<OAuth2Claim>> ListOAuth2ClaimsWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        List<OAuth2Client> ListOAuth2ClientsForAuthorizationServer (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        ApiResponse<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2Scope&gt;</returns>
        List<OAuth2Scope> ListOAuth2Scopes (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Scope&gt;</returns>
        ApiResponse<List<OAuth2Scope>> ListOAuth2ScopesWithHttpInfo (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2RefreshToken&gt;</returns>
        List<OAuth2RefreshToken> ListRefreshTokensForAuthorizationServerAndClient (string authServerId, string clientId, string expand = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2RefreshToken&gt;</returns>
        ApiResponse<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string expand = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        void RevokeRefreshTokenForAuthorizationServerAndClient (string authServerId, string clientId, string tokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string tokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns></returns>
        void RevokeRefreshTokensForAuthorizationServerAndClient (string authServerId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> RotateAuthorizationServerKeys (JwkUse body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> RotateAuthorizationServerKeysWithHttpInfo (JwkUse body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        AuthorizationServer UpdateAuthorizationServer (AuthorizationServer body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        ApiResponse<AuthorizationServer> UpdateAuthorizationServerWithHttpInfo (AuthorizationServer body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        AuthorizationServerPolicy UpdateAuthorizationServerPolicy (AuthorizationServerPolicy body, string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        ApiResponse<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyWithHttpInfo (AuthorizationServerPolicy body, string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        AuthorizationServerPolicyRule UpdateAuthorizationServerPolicyRule (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        ApiResponse<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        OAuth2Claim UpdateOAuth2Claim (OAuth2Claim body, string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        ApiResponse<OAuth2Claim> UpdateOAuth2ClaimWithHttpInfo (OAuth2Claim body, string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        OAuth2Scope UpdateOAuth2Scope (OAuth2Scope body, string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        ApiResponse<OAuth2Scope> UpdateOAuth2ScopeWithHttpInfo (OAuth2Scope body, string authServerId, string scopeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerPolicyAsync (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivateAuthorizationServerPolicyRuleAsync (string authServerId, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyRuleAsyncWithHttpInfo (string authServerId, string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> CreateAuthorizationServerAsync (AuthorizationServer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> CreateAuthorizationServerAsyncWithHttpInfo (AuthorizationServer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> CreateAuthorizationServerPolicyAsync (AuthorizationServerPolicy body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> CreateAuthorizationServerPolicyAsyncWithHttpInfo (AuthorizationServerPolicy body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleAsync (AuthorizationServerPolicyRule body, string policyId, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> CreateAuthorizationServerPolicyRuleAsyncWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> CreateOAuth2ClaimAsync (OAuth2Claim body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> CreateOAuth2ClaimAsyncWithHttpInfo (OAuth2Claim body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> CreateOAuth2ScopeAsync (OAuth2Scope body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> CreateOAuth2ScopeAsyncWithHttpInfo (OAuth2Scope body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyAsync (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyRuleAsync (string authServerId, string policyId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivate Authorization Server Policy Rule
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyRuleAsyncWithHttpInfo (string authServerId, string policyId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerPolicyAsync (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthorizationServerPolicyRuleAsync (string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyRuleAsyncWithHttpInfo (string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ClaimAsync (string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClaimAsyncWithHttpInfo (string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuth2ScopeAsync (string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ScopeAsyncWithHttpInfo (string authServerId, string scopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> GetAuthorizationServerAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> GetAuthorizationServerAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> GetAuthorizationServerPolicyAsync (string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> GetAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleAsync (string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> GetAuthorizationServerPolicyRuleAsyncWithHttpInfo (string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> GetOAuth2ClaimAsync (string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> GetOAuth2ClaimAsyncWithHttpInfo (string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> GetOAuth2ScopeAsync (string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> GetOAuth2ScopeAsyncWithHttpInfo (string authServerId, string scopeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2RefreshToken</returns>
        System.Threading.Tasks.Task<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientAsync (string authServerId, string clientId, string tokenId, string expand = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2RefreshToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2RefreshToken>> GetRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string tokenId, string expand = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> ListAuthorizationServerKeysAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListAuthorizationServerKeysAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;AuthorizationServerPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicy>>> ListAuthorizationServerPoliciesAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesAsync (string policyId, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicyRule&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicyRule>>> ListAuthorizationServerPolicyRulesAsyncWithHttpInfo (string policyId, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of List&lt;AuthorizationServer&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizationServer>> ListAuthorizationServersAsync (string q = null, string limit = null, string after = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServer>>> ListAuthorizationServersAsyncWithHttpInfo (string q = null, string limit = null, string after = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;OAuth2Claim&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Claim>> ListOAuth2ClaimsAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Claim&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Claim>>> ListOAuth2ClaimsAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerAsync (string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsForAuthorizationServerAsyncWithHttpInfo (string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2Scope&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Scope>> ListOAuth2ScopesAsync (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Scope&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Scope>>> ListOAuth2ScopesAsyncWithHttpInfo (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2RefreshToken&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientAsync (string authServerId, string clientId, string expand = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2RefreshToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2RefreshToken>>> ListRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string expand = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeRefreshTokenForAuthorizationServerAndClientAsync (string authServerId, string clientId, string tokenId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string tokenId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeRefreshTokensForAuthorizationServerAndClientAsync (string authServerId, string clientId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> RotateAuthorizationServerKeysAsync (JwkUse body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> RotateAuthorizationServerKeysAsyncWithHttpInfo (JwkUse body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServer</returns>
        System.Threading.Tasks.Task<AuthorizationServer> UpdateAuthorizationServerAsync (AuthorizationServer body, string authServerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> UpdateAuthorizationServerAsyncWithHttpInfo (AuthorizationServer body, string authServerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyAsync (AuthorizationServerPolicy body, string authServerId, string policyId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> UpdateAuthorizationServerPolicyAsyncWithHttpInfo (AuthorizationServerPolicy body, string authServerId, string policyId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        System.Threading.Tasks.Task<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleAsync (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> UpdateAuthorizationServerPolicyRuleAsyncWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        System.Threading.Tasks.Task<OAuth2Claim> UpdateOAuth2ClaimAsync (OAuth2Claim body, string authServerId, string claimId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> UpdateOAuth2ClaimAsyncWithHttpInfo (OAuth2Claim body, string authServerId, string claimId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        System.Threading.Tasks.Task<OAuth2Scope> UpdateOAuth2ScopeAsync (OAuth2Scope body, string authServerId, string scopeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> UpdateOAuth2ScopeAsyncWithHttpInfo (OAuth2Scope body, string authServerId, string scopeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthorizationServerApi : IAuthorizationServerApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizationServerApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthorizationServerApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizationServerApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServer (string authServerId)
        {
             ActivateAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateAuthorizationServerWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerAsync (string authServerId)
        {
             await ActivateAuthorizationServerAsyncWithHttpInfo(authServerId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServerPolicy (string authServerId, string policyId)
        {
             ActivateAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        ///  Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerPolicyAsync (string authServerId, string policyId)
        {
             await ActivateAuthorizationServerPolicyAsyncWithHttpInfo(authServerId, policyId);

        }

        /// <summary>
        ///  Activate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void ActivateAuthorizationServerPolicyRule (string authServerId, string policyId, string ruleId)
        {
             ActivateAuthorizationServerPolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /// <summary>
        ///  Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivateAuthorizationServerPolicyRuleWithHttpInfo (string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivateAuthorizationServerPolicyRuleAsync (string authServerId, string policyId, string ruleId)
        {
             await ActivateAuthorizationServerPolicyRuleAsyncWithHttpInfo(authServerId, policyId, ruleId);

        }

        /// <summary>
        ///  Activate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivateAuthorizationServerPolicyRuleAsyncWithHttpInfo (string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->ActivateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer CreateAuthorizationServer (AuthorizationServer body)
        {
             ApiResponse<AuthorizationServer> localVarResponse = CreateAuthorizationServerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public ApiResponse< AuthorizationServer > CreateAuthorizationServerWithHttpInfo (AuthorizationServer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> CreateAuthorizationServerAsync (AuthorizationServer body)
        {
             ApiResponse<AuthorizationServer> localVarResponse = await CreateAuthorizationServerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> CreateAuthorizationServerAsyncWithHttpInfo (AuthorizationServer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy CreateAuthorizationServerPolicy (AuthorizationServerPolicy body, string authServerId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = CreateAuthorizationServerPolicyWithHttpInfo(body, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public ApiResponse< AuthorizationServerPolicy > CreateAuthorizationServerPolicyWithHttpInfo (AuthorizationServerPolicy body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> CreateAuthorizationServerPolicyAsync (AuthorizationServerPolicy body, string authServerId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = await CreateAuthorizationServerPolicyAsyncWithHttpInfo(body, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> CreateAuthorizationServerPolicyAsyncWithHttpInfo (AuthorizationServerPolicy body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule CreateAuthorizationServerPolicyRule (AuthorizationServerPolicyRule body, string policyId, string authServerId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = CreateAuthorizationServerPolicyRuleWithHttpInfo(body, policyId, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public ApiResponse< AuthorizationServerPolicyRule > CreateAuthorizationServerPolicyRuleWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> CreateAuthorizationServerPolicyRuleAsync (AuthorizationServerPolicyRule body, string policyId, string authServerId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await CreateAuthorizationServerPolicyRuleAsyncWithHttpInfo(body, policyId, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a policy rule for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> CreateAuthorizationServerPolicyRuleAsyncWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim CreateOAuth2Claim (OAuth2Claim body, string authServerId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = CreateOAuth2ClaimWithHttpInfo(body, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public ApiResponse< OAuth2Claim > CreateOAuth2ClaimWithHttpInfo (OAuth2Claim body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateOAuth2Claim");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> CreateOAuth2ClaimAsync (OAuth2Claim body, string authServerId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = await CreateOAuth2ClaimAsyncWithHttpInfo(body, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> CreateOAuth2ClaimAsyncWithHttpInfo (OAuth2Claim body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateOAuth2Claim");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope CreateOAuth2Scope (OAuth2Scope body, string authServerId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = CreateOAuth2ScopeWithHttpInfo(body, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public ApiResponse< OAuth2Scope > CreateOAuth2ScopeWithHttpInfo (OAuth2Scope body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateOAuth2Scope");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> CreateOAuth2ScopeAsync (OAuth2Scope body, string authServerId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = await CreateOAuth2ScopeAsyncWithHttpInfo(body, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> CreateOAuth2ScopeAsyncWithHttpInfo (OAuth2Scope body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->CreateOAuth2Scope");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->CreateOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServer (string authServerId)
        {
             DeactivateAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivateAuthorizationServerWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerAsync (string authServerId)
        {
             await DeactivateAuthorizationServerAsyncWithHttpInfo(authServerId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServerPolicy (string authServerId, string policyId)
        {
             DeactivateAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivateAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyAsync (string authServerId, string policyId)
        {
             await DeactivateAuthorizationServerPolicyAsyncWithHttpInfo(authServerId, policyId);

        }

        /// <summary>
        ///  Deactivate Authorization Server Policy
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeactivateAuthorizationServerPolicyRule (string authServerId, string policyId, string ruleId)
        {
             DeactivateAuthorizationServerPolicyRuleWithHttpInfo(authServerId, policyId, ruleId);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeactivateAuthorizationServerPolicyRuleWithHttpInfo (string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeactivateAuthorizationServerPolicyRuleAsync (string authServerId, string policyId, string ruleId)
        {
             await DeactivateAuthorizationServerPolicyRuleAsyncWithHttpInfo(authServerId, policyId, ruleId);

        }

        /// <summary>
        ///  Deactivate Authorization Server Policy Rule
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeactivateAuthorizationServerPolicyRuleAsyncWithHttpInfo (string authServerId, string policyId, string ruleId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeactivateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServer (string authServerId)
        {
             DeleteAuthorizationServerWithHttpInfo(authServerId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAuthorizationServerWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerAsync (string authServerId)
        {
             await DeleteAuthorizationServerAsyncWithHttpInfo(authServerId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServerPolicy (string authServerId, string policyId)
        {
             DeleteAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerPolicyAsync (string authServerId, string policyId)
        {
             await DeleteAuthorizationServerPolicyAsyncWithHttpInfo(authServerId, policyId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns></returns>
        public void DeleteAuthorizationServerPolicyRule (string policyId, string authServerId, string ruleId)
        {
             DeleteAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, ruleId);
        }

        /// <summary>
        ///  Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAuthorizationServerPolicyRuleWithHttpInfo (string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthorizationServerPolicyRuleAsync (string policyId, string authServerId, string ruleId)
        {
             await DeleteAuthorizationServerPolicyRuleAsyncWithHttpInfo(policyId, authServerId, ruleId);

        }

        /// <summary>
        ///  Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthorizationServerPolicyRuleAsyncWithHttpInfo (string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->DeleteAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns></returns>
        public void DeleteOAuth2Claim (string authServerId, string claimId)
        {
             DeleteOAuth2ClaimWithHttpInfo(authServerId, claimId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOAuth2ClaimWithHttpInfo (string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->DeleteOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ClaimAsync (string authServerId, string claimId)
        {
             await DeleteOAuth2ClaimAsyncWithHttpInfo(authServerId, claimId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ClaimAsyncWithHttpInfo (string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->DeleteOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns></returns>
        public void DeleteOAuth2Scope (string authServerId, string scopeId)
        {
             DeleteOAuth2ScopeWithHttpInfo(authServerId, scopeId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOAuth2ScopeWithHttpInfo (string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->DeleteOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuth2ScopeAsync (string authServerId, string scopeId)
        {
             await DeleteOAuth2ScopeAsyncWithHttpInfo(authServerId, scopeId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuth2ScopeAsyncWithHttpInfo (string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->DeleteOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->DeleteOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer GetAuthorizationServer (string authServerId)
        {
             ApiResponse<AuthorizationServer> localVarResponse = GetAuthorizationServerWithHttpInfo(authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public ApiResponse< AuthorizationServer > GetAuthorizationServerWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> GetAuthorizationServerAsync (string authServerId)
        {
             ApiResponse<AuthorizationServer> localVarResponse = await GetAuthorizationServerAsyncWithHttpInfo(authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> GetAuthorizationServerAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy GetAuthorizationServerPolicy (string authServerId, string policyId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = GetAuthorizationServerPolicyWithHttpInfo(authServerId, policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public ApiResponse< AuthorizationServerPolicy > GetAuthorizationServerPolicyWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> GetAuthorizationServerPolicyAsync (string authServerId, string policyId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = await GetAuthorizationServerPolicyAsyncWithHttpInfo(authServerId, policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> GetAuthorizationServerPolicyAsyncWithHttpInfo (string authServerId, string policyId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule GetAuthorizationServerPolicyRule (string policyId, string authServerId, string ruleId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = GetAuthorizationServerPolicyRuleWithHttpInfo(policyId, authServerId, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public ApiResponse< AuthorizationServerPolicyRule > GetAuthorizationServerPolicyRuleWithHttpInfo (string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> GetAuthorizationServerPolicyRuleAsync (string policyId, string authServerId, string ruleId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await GetAuthorizationServerPolicyRuleAsyncWithHttpInfo(policyId, authServerId, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> GetAuthorizationServerPolicyRuleAsyncWithHttpInfo (string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->GetAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim GetOAuth2Claim (string authServerId, string claimId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = GetOAuth2ClaimWithHttpInfo(authServerId, claimId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public ApiResponse< OAuth2Claim > GetOAuth2ClaimWithHttpInfo (string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->GetOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> GetOAuth2ClaimAsync (string authServerId, string claimId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = await GetOAuth2ClaimAsyncWithHttpInfo(authServerId, claimId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> GetOAuth2ClaimAsyncWithHttpInfo (string authServerId, string claimId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->GetOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope GetOAuth2Scope (string authServerId, string scopeId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = GetOAuth2ScopeWithHttpInfo(authServerId, scopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public ApiResponse< OAuth2Scope > GetOAuth2ScopeWithHttpInfo (string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->GetOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> GetOAuth2ScopeAsync (string authServerId, string scopeId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = await GetOAuth2ScopeAsyncWithHttpInfo(authServerId, scopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> GetOAuth2ScopeAsyncWithHttpInfo (string authServerId, string scopeId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->GetOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>OAuth2RefreshToken</returns>
        public OAuth2RefreshToken GetRefreshTokenForAuthorizationServerAndClient (string authServerId, string clientId, string tokenId, string expand = null)
        {
             ApiResponse<OAuth2RefreshToken> localVarResponse = GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, tokenId, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of OAuth2RefreshToken</returns>
        public ApiResponse< OAuth2RefreshToken > GetRefreshTokenForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string tokenId, string expand = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2RefreshToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2RefreshToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2RefreshToken)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of OAuth2RefreshToken</returns>
        public async System.Threading.Tasks.Task<OAuth2RefreshToken> GetRefreshTokenForAuthorizationServerAndClientAsync (string authServerId, string clientId, string tokenId, string expand = null)
        {
             ApiResponse<OAuth2RefreshToken> localVarResponse = await GetRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo(authServerId, clientId, tokenId, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>Task of ApiResponse (OAuth2RefreshToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2RefreshToken>> GetRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string tokenId, string expand = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->GetRefreshTokenForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2RefreshToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2RefreshToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2RefreshToken)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListAuthorizationServerKeys (string authServerId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = ListAuthorizationServerKeysWithHttpInfo(authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public ApiResponse< List<JsonWebKey> > ListAuthorizationServerKeysWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerKeys");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> ListAuthorizationServerKeysAsync (string authServerId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = await ListAuthorizationServerKeysAsyncWithHttpInfo(authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListAuthorizationServerKeysAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerKeys");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicy&gt;</returns>
        public List<AuthorizationServerPolicy> ListAuthorizationServerPolicies (string authServerId)
        {
             ApiResponse<List<AuthorizationServerPolicy>> localVarResponse = ListAuthorizationServerPoliciesWithHttpInfo(authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicy&gt;</returns>
        public ApiResponse< List<AuthorizationServerPolicy> > ListAuthorizationServerPoliciesWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicies");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServerPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServerPolicy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServerPolicy>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;AuthorizationServerPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServerPolicy>> ListAuthorizationServerPoliciesAsync (string authServerId)
        {
             ApiResponse<List<AuthorizationServerPolicy>> localVarResponse = await ListAuthorizationServerPoliciesAsyncWithHttpInfo(authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicy>>> ListAuthorizationServerPoliciesAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicies");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServerPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServerPolicy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServerPolicy>)));
        }

        /// <summary>
        ///  Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public List<AuthorizationServerPolicyRule> ListAuthorizationServerPolicyRules (string policyId, string authServerId)
        {
             ApiResponse<List<AuthorizationServerPolicyRule>> localVarResponse = ListAuthorizationServerPolicyRulesWithHttpInfo(policyId, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public ApiResponse< List<AuthorizationServerPolicyRule> > ListAuthorizationServerPolicyRulesWithHttpInfo (string policyId, string authServerId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerPolicyRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServerPolicyRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServerPolicyRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServerPolicyRule>)));
        }

        /// <summary>
        ///  Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;AuthorizationServerPolicyRule&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServerPolicyRule>> ListAuthorizationServerPolicyRulesAsync (string policyId, string authServerId)
        {
             ApiResponse<List<AuthorizationServerPolicyRule>> localVarResponse = await ListAuthorizationServerPolicyRulesAsyncWithHttpInfo(policyId, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates all policy rules for the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServerPolicyRule&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServerPolicyRule>>> ListAuthorizationServerPolicyRulesAsyncWithHttpInfo (string policyId, string authServerId)
        {
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListAuthorizationServerPolicyRules");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServerPolicyRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServerPolicyRule>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServerPolicyRule>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServerPolicyRule>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;AuthorizationServer&gt;</returns>
        public List<AuthorizationServer> ListAuthorizationServers (string q = null, string limit = null, string after = null)
        {
             ApiResponse<List<AuthorizationServer>> localVarResponse = ListAuthorizationServersWithHttpInfo(q, limit, after);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizationServer&gt;</returns>
        public ApiResponse< List<AuthorizationServer> > ListAuthorizationServersWithHttpInfo (string q = null, string limit = null, string after = null)
        {

            var localVarPath = "./api/v1/authorizationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServer>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of List&lt;AuthorizationServer&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizationServer>> ListAuthorizationServersAsync (string q = null, string limit = null, string after = null)
        {
             ApiResponse<List<AuthorizationServer>> localVarResponse = await ListAuthorizationServersAsyncWithHttpInfo(q, limit, after);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizationServer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorizationServer>>> ListAuthorizationServersAsyncWithHttpInfo (string q = null, string limit = null, string after = null)
        {

            var localVarPath = "./api/v1/authorizationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthorizationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizationServer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<AuthorizationServer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizationServer>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Claim&gt;</returns>
        public List<OAuth2Claim> ListOAuth2Claims (string authServerId)
        {
             ApiResponse<List<OAuth2Claim>> localVarResponse = ListOAuth2ClaimsWithHttpInfo(authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Claim&gt;</returns>
        public ApiResponse< List<OAuth2Claim> > ListOAuth2ClaimsWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Claims");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2Claims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Claim>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Claim>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Claim>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;OAuth2Claim&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Claim>> ListOAuth2ClaimsAsync (string authServerId)
        {
             ApiResponse<List<OAuth2Claim>> localVarResponse = await ListOAuth2ClaimsAsyncWithHttpInfo(authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Claim&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2Claim>>> ListOAuth2ClaimsAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Claims");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2Claims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Claim>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Claim>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Claim>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        public List<OAuth2Client> ListOAuth2ClientsForAuthorizationServer (string authServerId)
        {
             ApiResponse<List<OAuth2Client>> localVarResponse = ListOAuth2ClientsForAuthorizationServerWithHttpInfo(authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        public ApiResponse< List<OAuth2Client> > ListOAuth2ClientsForAuthorizationServerWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2ClientsForAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2ClientsForAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Client>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Client>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Client>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Client>> ListOAuth2ClientsForAuthorizationServerAsync (string authServerId)
        {
             ApiResponse<List<OAuth2Client>> localVarResponse = await ListOAuth2ClientsForAuthorizationServerAsyncWithHttpInfo(authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2Client>>> ListOAuth2ClientsForAuthorizationServerAsyncWithHttpInfo (string authServerId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2ClientsForAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2ClientsForAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Client>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Client>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Client>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2Scope&gt;</returns>
        public List<OAuth2Scope> ListOAuth2Scopes (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null)
        {
             ApiResponse<List<OAuth2Scope>> localVarResponse = ListOAuth2ScopesWithHttpInfo(authServerId, q, filter, cursor, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Scope&gt;</returns>
        public ApiResponse< List<OAuth2Scope> > ListOAuth2ScopesWithHttpInfo (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Scopes");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2Scopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Scope>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Scope>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Scope>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2Scope&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Scope>> ListOAuth2ScopesAsync (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null)
        {
             ApiResponse<List<OAuth2Scope>> localVarResponse = await ListOAuth2ScopesAsyncWithHttpInfo(authServerId, q, filter, cursor, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="cursor"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Scope&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2Scope>>> ListOAuth2ScopesAsyncWithHttpInfo (string authServerId, string q = null, string filter = null, string cursor = null, int? limit = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListOAuth2Scopes");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOAuth2Scopes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2Scope>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2Scope>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2Scope>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;OAuth2RefreshToken&gt;</returns>
        public List<OAuth2RefreshToken> ListRefreshTokensForAuthorizationServerAndClient (string authServerId, string clientId, string expand = null, string after = null, int? limit = null)
        {
             ApiResponse<List<OAuth2RefreshToken>> localVarResponse = ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, expand, after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OAuth2RefreshToken&gt;</returns>
        public ApiResponse< List<OAuth2RefreshToken> > ListRefreshTokensForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string expand = null, string after = null, int? limit = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2RefreshToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2RefreshToken>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2RefreshToken>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;OAuth2RefreshToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2RefreshToken>> ListRefreshTokensForAuthorizationServerAndClientAsync (string authServerId, string clientId, string expand = null, string after = null, int? limit = null)
        {
             ApiResponse<List<OAuth2RefreshToken>> localVarResponse = await ListRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo(authServerId, clientId, expand, after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2RefreshToken&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuth2RefreshToken>>> ListRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string expand = null, string after = null, int? limit = null)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->ListRefreshTokensForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OAuth2RefreshToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OAuth2RefreshToken>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OAuth2RefreshToken>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns></returns>
        public void RevokeRefreshTokenForAuthorizationServerAndClient (string authServerId, string clientId, string tokenId)
        {
             RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId, tokenId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeRefreshTokenForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId, string tokenId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeRefreshTokenForAuthorizationServerAndClientAsync (string authServerId, string clientId, string tokenId)
        {
             await RevokeRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo(authServerId, clientId, tokenId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokenForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId, string tokenId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling AuthorizationServerApi->RevokeRefreshTokenForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (tokenId != null) localVarPathParams.Add("tokenId", this.Configuration.ApiClient.ParameterToString(tokenId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRefreshTokenForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns></returns>
        public void RevokeRefreshTokensForAuthorizationServerAndClient (string authServerId, string clientId)
        {
             RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo(authServerId, clientId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeRefreshTokensForAuthorizationServerAndClientWithHttpInfo (string authServerId, string clientId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeRefreshTokensForAuthorizationServerAndClientAsync (string authServerId, string clientId)
        {
             await RevokeRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo(authServerId, clientId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authServerId"></param>
        /// <param name="clientId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeRefreshTokensForAuthorizationServerAndClientAsyncWithHttpInfo (string authServerId, string clientId)
        {
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthorizationServerApi->RevokeRefreshTokensForAuthorizationServerAndClient");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeRefreshTokensForAuthorizationServerAndClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> RotateAuthorizationServerKeys (JwkUse body, string authServerId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = RotateAuthorizationServerKeysWithHttpInfo(body, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public ApiResponse< List<JsonWebKey> > RotateAuthorizationServerKeysWithHttpInfo (JwkUse body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateAuthorizationServerKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> RotateAuthorizationServerKeysAsync (JwkUse body, string authServerId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = await RotateAuthorizationServerKeysAsyncWithHttpInfo(body, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> RotateAuthorizationServerKeysAsyncWithHttpInfo (JwkUse body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->RotateAuthorizationServerKeys");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateAuthorizationServerKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>AuthorizationServer</returns>
        public AuthorizationServer UpdateAuthorizationServer (AuthorizationServer body, string authServerId)
        {
             ApiResponse<AuthorizationServer> localVarResponse = UpdateAuthorizationServerWithHttpInfo(body, authServerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>ApiResponse of AuthorizationServer</returns>
        public ApiResponse< AuthorizationServer > UpdateAuthorizationServerWithHttpInfo (AuthorizationServer body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of AuthorizationServer</returns>
        public async System.Threading.Tasks.Task<AuthorizationServer> UpdateAuthorizationServerAsync (AuthorizationServer body, string authServerId)
        {
             ApiResponse<AuthorizationServer> localVarResponse = await UpdateAuthorizationServerAsyncWithHttpInfo(body, authServerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServer>> UpdateAuthorizationServerAsyncWithHttpInfo (AuthorizationServer body, string authServerId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServer");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServer");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServer)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>AuthorizationServerPolicy</returns>
        public AuthorizationServerPolicy UpdateAuthorizationServerPolicy (AuthorizationServerPolicy body, string authServerId, string policyId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = UpdateAuthorizationServerPolicyWithHttpInfo(body, authServerId, policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicy</returns>
        public ApiResponse< AuthorizationServerPolicy > UpdateAuthorizationServerPolicyWithHttpInfo (AuthorizationServerPolicy body, string authServerId, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of AuthorizationServerPolicy</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicy> UpdateAuthorizationServerPolicyAsync (AuthorizationServerPolicy body, string authServerId, string policyId)
        {
             ApiResponse<AuthorizationServerPolicy> localVarResponse = await UpdateAuthorizationServerPolicyAsyncWithHttpInfo(body, authServerId, policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="policyId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicy>> UpdateAuthorizationServerPolicyAsyncWithHttpInfo (AuthorizationServerPolicy body, string authServerId, string policyId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicy");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServerPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicy)));
        }

        /// <summary>
        ///  Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>AuthorizationServerPolicyRule</returns>
        public AuthorizationServerPolicyRule UpdateAuthorizationServerPolicyRule (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = UpdateAuthorizationServerPolicyRuleWithHttpInfo(body, policyId, authServerId, ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>ApiResponse of AuthorizationServerPolicyRule</returns>
        public ApiResponse< AuthorizationServerPolicyRule > UpdateAuthorizationServerPolicyRuleWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of AuthorizationServerPolicyRule</returns>
        public async System.Threading.Tasks.Task<AuthorizationServerPolicyRule> UpdateAuthorizationServerPolicyRuleAsync (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId)
        {
             ApiResponse<AuthorizationServerPolicyRule> localVarResponse = await UpdateAuthorizationServerPolicyRuleAsyncWithHttpInfo(body, policyId, authServerId, ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="policyId"></param>
        /// <param name="authServerId"></param>
        /// <param name="ruleId"></param>
        /// <returns>Task of ApiResponse (AuthorizationServerPolicyRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizationServerPolicyRule>> UpdateAuthorizationServerPolicyRuleAsyncWithHttpInfo (AuthorizationServerPolicyRule body, string policyId, string authServerId, string ruleId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling AuthorizationServerApi->UpdateAuthorizationServerPolicyRule");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyId != null) localVarPathParams.Add("policyId", this.Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthorizationServerPolicyRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizationServerPolicyRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuthorizationServerPolicyRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizationServerPolicyRule)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>OAuth2Claim</returns>
        public OAuth2Claim UpdateOAuth2Claim (OAuth2Claim body, string authServerId, string claimId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = UpdateOAuth2ClaimWithHttpInfo(body, authServerId, claimId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>ApiResponse of OAuth2Claim</returns>
        public ApiResponse< OAuth2Claim > UpdateOAuth2ClaimWithHttpInfo (OAuth2Claim body, string authServerId, string claimId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->UpdateOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of OAuth2Claim</returns>
        public async System.Threading.Tasks.Task<OAuth2Claim> UpdateOAuth2ClaimAsync (OAuth2Claim body, string authServerId, string claimId)
        {
             ApiResponse<OAuth2Claim> localVarResponse = await UpdateOAuth2ClaimAsyncWithHttpInfo(body, authServerId, claimId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="claimId"></param>
        /// <returns>Task of ApiResponse (OAuth2Claim)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Claim>> UpdateOAuth2ClaimAsyncWithHttpInfo (OAuth2Claim body, string authServerId, string claimId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Claim");
            // verify the required parameter 'claimId' is set
            if (claimId == null)
                throw new ApiException(400, "Missing required parameter 'claimId' when calling AuthorizationServerApi->UpdateOAuth2Claim");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/claims/{claimId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (claimId != null) localVarPathParams.Add("claimId", this.Configuration.ApiClient.ParameterToString(claimId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOAuth2Claim", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Claim>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Claim) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Claim)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>OAuth2Scope</returns>
        public OAuth2Scope UpdateOAuth2Scope (OAuth2Scope body, string authServerId, string scopeId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = UpdateOAuth2ScopeWithHttpInfo(body, authServerId, scopeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>ApiResponse of OAuth2Scope</returns>
        public ApiResponse< OAuth2Scope > UpdateOAuth2ScopeWithHttpInfo (OAuth2Scope body, string authServerId, string scopeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->UpdateOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of OAuth2Scope</returns>
        public async System.Threading.Tasks.Task<OAuth2Scope> UpdateOAuth2ScopeAsync (OAuth2Scope body, string authServerId, string scopeId)
        {
             ApiResponse<OAuth2Scope> localVarResponse = await UpdateOAuth2ScopeAsyncWithHttpInfo(body, authServerId, scopeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authServerId"></param>
        /// <param name="scopeId"></param>
        /// <returns>Task of ApiResponse (OAuth2Scope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuth2Scope>> UpdateOAuth2ScopeAsyncWithHttpInfo (OAuth2Scope body, string authServerId, string scopeId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            // verify the required parameter 'authServerId' is set
            if (authServerId == null)
                throw new ApiException(400, "Missing required parameter 'authServerId' when calling AuthorizationServerApi->UpdateOAuth2Scope");
            // verify the required parameter 'scopeId' is set
            if (scopeId == null)
                throw new ApiException(400, "Missing required parameter 'scopeId' when calling AuthorizationServerApi->UpdateOAuth2Scope");

            var localVarPath = "./api/v1/authorizationServers/{authServerId}/scopes/{scopeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authServerId != null) localVarPathParams.Add("authServerId", this.Configuration.ApiClient.ParameterToString(authServerId)); // path parameter
            if (scopeId != null) localVarPathParams.Add("scopeId", this.Configuration.ApiClient.ParameterToString(scopeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOAuth2Scope", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2Scope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OAuth2Scope) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2Scope)));
        }

    }
}
