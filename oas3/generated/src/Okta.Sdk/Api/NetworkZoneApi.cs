/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface INetworkZoneApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Network Zone
        /// </summary>
        /// <remarks>
        /// Activate Network Zone
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        NetworkZone ActivateNetworkZone (string zoneId);

        /// <summary>
        /// Activate Network Zone
        /// </summary>
        /// <remarks>
        /// Activate Network Zone
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> ActivateNetworkZoneWithHttpInfo (string zoneId);
        /// <summary>
        /// Add Network Zone
        /// </summary>
        /// <remarks>
        /// Adds a new network zone to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NetworkZone</returns>
        NetworkZone CreateNetworkZone (NetworkZone body);

        /// <summary>
        /// Add Network Zone
        /// </summary>
        /// <remarks>
        /// Adds a new network zone to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> CreateNetworkZoneWithHttpInfo (NetworkZone body);
        /// <summary>
        /// Deactivate Network Zone
        /// </summary>
        /// <remarks>
        /// Deactivates a network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        NetworkZone DeactivateNetworkZone (string zoneId);

        /// <summary>
        /// Deactivate Network Zone
        /// </summary>
        /// <remarks>
        /// Deactivates a network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> DeactivateNetworkZoneWithHttpInfo (string zoneId);
        /// <summary>
        /// Delete Network Zone
        /// </summary>
        /// <remarks>
        /// Removes network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        void DeleteNetworkZone (string zoneId);

        /// <summary>
        /// Delete Network Zone
        /// </summary>
        /// <remarks>
        /// Removes network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNetworkZoneWithHttpInfo (string zoneId);
        /// <summary>
        /// Get Network Zone
        /// </summary>
        /// <remarks>
        /// Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        NetworkZone GetNetworkZone (string zoneId);

        /// <summary>
        /// Get Network Zone
        /// </summary>
        /// <remarks>
        /// Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> GetNetworkZoneWithHttpInfo (string zoneId);
        /// <summary>
        /// List Network Zones
        /// </summary>
        /// <remarks>
        /// Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>List&lt;NetworkZone&gt;</returns>
        List<NetworkZone> ListNetworkZones (string after = null, int? limit = null, string filter = null);

        /// <summary>
        /// List Network Zones
        /// </summary>
        /// <remarks>
        /// Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkZone&gt;</returns>
        ApiResponse<List<NetworkZone>> ListNetworkZonesWithHttpInfo (string after = null, int? limit = null, string filter = null);
        /// <summary>
        /// Update Network Zone
        /// </summary>
        /// <remarks>
        /// Updates a network zone in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        NetworkZone UpdateNetworkZone (NetworkZone body, string zoneId);

        /// <summary>
        /// Update Network Zone
        /// </summary>
        /// <remarks>
        /// Updates a network zone in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        ApiResponse<NetworkZone> UpdateNetworkZoneWithHttpInfo (NetworkZone body, string zoneId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Network Zone
        /// </summary>
        /// <remarks>
        /// Activate Network Zone
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> ActivateNetworkZoneAsync (string zoneId);

        /// <summary>
        /// Activate Network Zone
        /// </summary>
        /// <remarks>
        /// Activate Network Zone
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> ActivateNetworkZoneAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// Add Network Zone
        /// </summary>
        /// <remarks>
        /// Adds a new network zone to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> CreateNetworkZoneAsync (NetworkZone body);

        /// <summary>
        /// Add Network Zone
        /// </summary>
        /// <remarks>
        /// Adds a new network zone to your Okta organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> CreateNetworkZoneAsyncWithHttpInfo (NetworkZone body);
        /// <summary>
        /// Deactivate Network Zone
        /// </summary>
        /// <remarks>
        /// Deactivates a network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> DeactivateNetworkZoneAsync (string zoneId);

        /// <summary>
        /// Deactivate Network Zone
        /// </summary>
        /// <remarks>
        /// Deactivates a network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> DeactivateNetworkZoneAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// Delete Network Zone
        /// </summary>
        /// <remarks>
        /// Removes network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNetworkZoneAsync (string zoneId);

        /// <summary>
        /// Delete Network Zone
        /// </summary>
        /// <remarks>
        /// Removes network zone.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkZoneAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// Get Network Zone
        /// </summary>
        /// <remarks>
        /// Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> GetNetworkZoneAsync (string zoneId);

        /// <summary>
        /// Get Network Zone
        /// </summary>
        /// <remarks>
        /// Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> GetNetworkZoneAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// List Network Zones
        /// </summary>
        /// <remarks>
        /// Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>Task of List&lt;NetworkZone&gt;</returns>
        System.Threading.Tasks.Task<List<NetworkZone>> ListNetworkZonesAsync (string after = null, int? limit = null, string filter = null);

        /// <summary>
        /// List Network Zones
        /// </summary>
        /// <remarks>
        /// Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkZone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NetworkZone>>> ListNetworkZonesAsyncWithHttpInfo (string after = null, int? limit = null, string filter = null);
        /// <summary>
        /// Update Network Zone
        /// </summary>
        /// <remarks>
        /// Updates a network zone in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        System.Threading.Tasks.Task<NetworkZone> UpdateNetworkZoneAsync (NetworkZone body, string zoneId);

        /// <summary>
        /// Update Network Zone
        /// </summary>
        /// <remarks>
        /// Updates a network zone in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkZone>> UpdateNetworkZoneAsyncWithHttpInfo (NetworkZone body, string zoneId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class NetworkZoneApi : INetworkZoneApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZoneApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkZoneApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZoneApi"/> class
        /// </summary>
        /// <returns></returns>
        public NetworkZoneApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkZoneApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkZoneApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Network Zone Activate Network Zone
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        public NetworkZone ActivateNetworkZone (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = ActivateNetworkZoneWithHttpInfo(zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Network Zone Activate Network Zone
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > ActivateNetworkZoneWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->ActivateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Activate Network Zone Activate Network Zone
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> ActivateNetworkZoneAsync (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = await ActivateNetworkZoneAsyncWithHttpInfo(zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate Network Zone Activate Network Zone
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> ActivateNetworkZoneAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->ActivateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Add Network Zone Adds a new network zone to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>NetworkZone</returns>
        public NetworkZone CreateNetworkZone (NetworkZone body)
        {
             ApiResponse<NetworkZone> localVarResponse = CreateNetworkZoneWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Network Zone Adds a new network zone to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > CreateNetworkZoneWithHttpInfo (NetworkZone body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZoneApi->CreateNetworkZone");

            var localVarPath = "./api/v1/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Add Network Zone Adds a new network zone to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> CreateNetworkZoneAsync (NetworkZone body)
        {
             ApiResponse<NetworkZone> localVarResponse = await CreateNetworkZoneAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Network Zone Adds a new network zone to your Okta organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> CreateNetworkZoneAsyncWithHttpInfo (NetworkZone body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZoneApi->CreateNetworkZone");

            var localVarPath = "./api/v1/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Deactivate Network Zone Deactivates a network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        public NetworkZone DeactivateNetworkZone (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = DeactivateNetworkZoneWithHttpInfo(zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate Network Zone Deactivates a network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > DeactivateNetworkZoneWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->DeactivateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Deactivate Network Zone Deactivates a network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> DeactivateNetworkZoneAsync (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = await DeactivateNetworkZoneAsyncWithHttpInfo(zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate Network Zone Deactivates a network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> DeactivateNetworkZoneAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->DeactivateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Delete Network Zone Removes network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        public void DeleteNetworkZone (string zoneId)
        {
             DeleteNetworkZoneWithHttpInfo(zoneId);
        }

        /// <summary>
        /// Delete Network Zone Removes network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNetworkZoneWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->DeleteNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Network Zone Removes network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNetworkZoneAsync (string zoneId)
        {
             await DeleteNetworkZoneAsyncWithHttpInfo(zoneId);

        }

        /// <summary>
        /// Delete Network Zone Removes network zone.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNetworkZoneAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->DeleteNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Network Zone Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        public NetworkZone GetNetworkZone (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = GetNetworkZoneWithHttpInfo(zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Network Zone Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > GetNetworkZoneWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->GetNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Get Network Zone Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> GetNetworkZoneAsync (string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = await GetNetworkZoneAsyncWithHttpInfo(zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Network Zone Fetches a network zone from your Okta organization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> GetNetworkZoneAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->GetNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// List Network Zones Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>List&lt;NetworkZone&gt;</returns>
        public List<NetworkZone> ListNetworkZones (string after = null, int? limit = null, string filter = null)
        {
             ApiResponse<List<NetworkZone>> localVarResponse = ListNetworkZonesWithHttpInfo(after, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Network Zones Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>ApiResponse of List&lt;NetworkZone&gt;</returns>
        public ApiResponse< List<NetworkZone> > ListNetworkZonesWithHttpInfo (string after = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/v1/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NetworkZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkZone>)));
        }

        /// <summary>
        /// List Network Zones Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>Task of List&lt;NetworkZone&gt;</returns>
        public async System.Threading.Tasks.Task<List<NetworkZone>> ListNetworkZonesAsync (string after = null, int? limit = null, string filter = null)
        {
             ApiResponse<List<NetworkZone>> localVarResponse = await ListNetworkZonesAsyncWithHttpInfo(after, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Network Zones Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of network zones (optional)</param>
        /// <param name="limit">Specifies the number of results for a page (optional)</param>
        /// <param name="filter">Filters zones by usage or id expression (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NetworkZone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NetworkZone>>> ListNetworkZonesAsyncWithHttpInfo (string after = null, int? limit = null, string filter = null)
        {

            var localVarPath = "./api/v1/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkZones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NetworkZone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NetworkZone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NetworkZone>)));
        }

        /// <summary>
        /// Update Network Zone Updates a network zone in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>NetworkZone</returns>
        public NetworkZone UpdateNetworkZone (NetworkZone body, string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = UpdateNetworkZoneWithHttpInfo(body, zoneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Network Zone Updates a network zone in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of NetworkZone</returns>
        public ApiResponse< NetworkZone > UpdateNetworkZoneWithHttpInfo (NetworkZone body, string zoneId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZoneApi->UpdateNetworkZone");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->UpdateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

        /// <summary>
        /// Update Network Zone Updates a network zone in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of NetworkZone</returns>
        public async System.Threading.Tasks.Task<NetworkZone> UpdateNetworkZoneAsync (NetworkZone body, string zoneId)
        {
             ApiResponse<NetworkZone> localVarResponse = await UpdateNetworkZoneAsyncWithHttpInfo(body, zoneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Network Zone Updates a network zone in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse (NetworkZone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkZone>> UpdateNetworkZoneAsyncWithHttpInfo (NetworkZone body, string zoneId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NetworkZoneApi->UpdateNetworkZone");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling NetworkZoneApi->UpdateNetworkZone");

            var localVarPath = "./api/v1/zones/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNetworkZone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkZone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NetworkZone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NetworkZone)));
        }

    }
}
