/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate CreateSmsTemplate (SmsTemplate body);

        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> CreateSmsTemplateWithHttpInfo (SmsTemplate body);
        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns></returns>
        void DeleteSmsTemplate (string templateId);

        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSmsTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate GetSmsTemplate (string templateId);

        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> GetSmsTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>List&lt;SmsTemplate&gt;</returns>
        List<SmsTemplate> ListSmsTemplates (SmsTemplateType templateType = null);

        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsTemplate&gt;</returns>
        ApiResponse<List<SmsTemplate>> ListSmsTemplatesWithHttpInfo (SmsTemplateType templateType = null);
        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate PartialUpdateSmsTemplate (SmsTemplate body, string templateId);

        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> PartialUpdateSmsTemplateWithHttpInfo (SmsTemplate body, string templateId);
        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        SmsTemplate UpdateSmsTemplate (SmsTemplate body, string templateId);

        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        ApiResponse<SmsTemplate> UpdateSmsTemplateWithHttpInfo (SmsTemplate body, string templateId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> CreateSmsTemplateAsync (SmsTemplate body);

        /// <summary>
        /// Add SMS Template
        /// </summary>
        /// <remarks>
        /// Adds a new custom SMS template to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> CreateSmsTemplateAsyncWithHttpInfo (SmsTemplate body);
        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSmsTemplateAsync (string templateId);

        /// <summary>
        /// Remove SMS Template
        /// </summary>
        /// <remarks>
        /// Removes an SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSmsTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> GetSmsTemplateAsync (string templateId);

        /// <summary>
        /// Get SMS Template
        /// </summary>
        /// <remarks>
        /// Fetches a specific template by &#x60;id&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> GetSmsTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>Task of List&lt;SmsTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<SmsTemplate>> ListSmsTemplatesAsync (SmsTemplateType templateType = null);

        /// <summary>
        /// List SMS Templates
        /// </summary>
        /// <remarks>
        /// Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SmsTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmsTemplate>>> ListSmsTemplatesAsyncWithHttpInfo (SmsTemplateType templateType = null);
        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> PartialUpdateSmsTemplateAsync (SmsTemplate body, string templateId);

        /// <summary>
        /// Partial SMS Template Update
        /// </summary>
        /// <remarks>
        /// Updates only some of the SMS template properties:
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> PartialUpdateSmsTemplateAsyncWithHttpInfo (SmsTemplate body, string templateId);
        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        System.Threading.Tasks.Task<SmsTemplate> UpdateSmsTemplateAsync (SmsTemplate body, string templateId);

        /// <summary>
        /// Update SMS Template
        /// </summary>
        /// <remarks>
        /// Updates the SMS template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> UpdateSmsTemplateAsyncWithHttpInfo (SmsTemplate body, string templateId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TemplateApi : ITemplateApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// </summary>
        /// <returns></returns>
        public TemplateApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate CreateSmsTemplate (SmsTemplate body)
        {
             ApiResponse<SmsTemplate> localVarResponse = CreateSmsTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public ApiResponse< SmsTemplate > CreateSmsTemplateWithHttpInfo (SmsTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->CreateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> CreateSmsTemplateAsync (SmsTemplate body)
        {
             ApiResponse<SmsTemplate> localVarResponse = await CreateSmsTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add SMS Template Adds a new custom SMS template to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> CreateSmsTemplateAsyncWithHttpInfo (SmsTemplate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->CreateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns></returns>
        public void DeleteSmsTemplate (string templateId)
        {
             DeleteSmsTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSmsTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSmsTemplateAsync (string templateId)
        {
             await DeleteSmsTemplateAsyncWithHttpInfo(templateId);

        }

        /// <summary>
        /// Remove SMS Template Removes an SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSmsTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate GetSmsTemplate (string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = GetSmsTemplateWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public ApiResponse< SmsTemplate > GetSmsTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> GetSmsTemplateAsync (string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = await GetSmsTemplateAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SMS Template Fetches a specific template by &#x60;id&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> GetSmsTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>List&lt;SmsTemplate&gt;</returns>
        public List<SmsTemplate> ListSmsTemplates (SmsTemplateType templateType = null)
        {
             ApiResponse<List<SmsTemplate>> localVarResponse = ListSmsTemplatesWithHttpInfo(templateType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsTemplate&gt;</returns>
        public ApiResponse< List<SmsTemplate> > ListSmsTemplatesWithHttpInfo (SmsTemplateType templateType = null)
        {

            var localVarPath = "./api/v1/templates/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateType", templateType)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSmsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmsTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SmsTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmsTemplate>)));
        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>Task of List&lt;SmsTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmsTemplate>> ListSmsTemplatesAsync (SmsTemplateType templateType = null)
        {
             ApiResponse<List<SmsTemplate>> localVarResponse = await ListSmsTemplatesAsyncWithHttpInfo(templateType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List SMS Templates Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateType"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SmsTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SmsTemplate>>> ListSmsTemplatesAsyncWithHttpInfo (SmsTemplateType templateType = null)
        {

            var localVarPath = "./api/v1/templates/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateType", templateType)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSmsTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmsTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SmsTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmsTemplate>)));
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate PartialUpdateSmsTemplate (SmsTemplate body, string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = PartialUpdateSmsTemplateWithHttpInfo(body, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public ApiResponse< SmsTemplate > PartialUpdateSmsTemplateWithHttpInfo (SmsTemplate body, string templateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->PartialUpdateSmsTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->PartialUpdateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> PartialUpdateSmsTemplateAsync (SmsTemplate body, string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = await PartialUpdateSmsTemplateAsyncWithHttpInfo(body, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partial SMS Template Update Updates only some of the SMS template properties:
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> PartialUpdateSmsTemplateAsyncWithHttpInfo (SmsTemplate body, string templateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->PartialUpdateSmsTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->PartialUpdateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>SmsTemplate</returns>
        public SmsTemplate UpdateSmsTemplate (SmsTemplate body, string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = UpdateSmsTemplateWithHttpInfo(body, templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>ApiResponse of SmsTemplate</returns>
        public ApiResponse< SmsTemplate > UpdateSmsTemplateWithHttpInfo (SmsTemplate body, string templateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->UpdateSmsTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of SmsTemplate</returns>
        public async System.Threading.Tasks.Task<SmsTemplate> UpdateSmsTemplateAsync (SmsTemplate body, string templateId)
        {
             ApiResponse<SmsTemplate> localVarResponse = await UpdateSmsTemplateAsyncWithHttpInfo(body, templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update SMS Template Updates the SMS template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="templateId"></param>
        /// <returns>Task of ApiResponse (SmsTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmsTemplate>> UpdateSmsTemplateAsyncWithHttpInfo (SmsTemplate body, string templateId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateApi->UpdateSmsTemplate");
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateSmsTemplate");

            var localVarPath = "./api/v1/templates/sms/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSmsTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmsTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SmsTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmsTemplate)));
        }

    }
}
