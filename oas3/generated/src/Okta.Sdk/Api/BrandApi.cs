/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBrandApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Create an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization CreateEmailCustomization (string brandId, string templateName, EmailCustomization body = null);

        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Create an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> CreateEmailCustomizationWithHttpInfo (string brandId, string templateName, EmailCustomization body = null);
        /// <summary>
        /// Delete Email Customizations
        /// </summary>
        /// <remarks>
        /// Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns></returns>
        void DeleteAllCustomizations (string brandId, string templateName);

        /// <summary>
        /// Delete Email Customizations
        /// </summary>
        /// <remarks>
        /// Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllCustomizationsWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeBackgroundImage (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeFavicon (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        void DeleteBrandThemeLogo (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Delete an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns></returns>
        void DeleteEmailCustomization (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Delete an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// List all email customcations for an email template
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>List&lt;EmailCustomization&gt;</returns>
        List<EmailCustomization> GetAllEmailCustomizations (string brandId, string templateName);

        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// List all email customcations for an email template
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of List&lt;EmailCustomization&gt;</returns>
        ApiResponse<List<EmailCustomization>> GetAllEmailCustomizationsWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        Brand GetBrand (string brandId);

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> GetBrandWithHttpInfo (string brandId);
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse GetBrandTheme (string brandId, string themeId);

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> GetBrandThemeWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Fetch an email customization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization GetEmailCustomization (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Fetch an email customization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> GetEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Fetch an email template by &#x60;templateName&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailTemplate</returns>
        EmailTemplate GetEmailTemplate (string brandId, string templateName);

        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Fetch an email template by &#x60;templateName&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        ApiResponse<EmailTemplate> GetEmailTemplateWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Default Content of Email Template
        /// </summary>
        /// <remarks>
        /// Fetch the default content for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailDefaultContent</returns>
        EmailDefaultContent GetEmailTemplateDefaultContent (string brandId, string templateName);

        /// <summary>
        /// Get Default Content of Email Template
        /// </summary>
        /// <remarks>
        /// Fetch the default content for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailDefaultContent</returns>
        ApiResponse<EmailDefaultContent> GetEmailTemplateDefaultContentWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        List<ThemeResponse> ListBrandThemes (string brandId);

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        ApiResponse<List<ThemeResponse>> ListBrandThemesWithHttpInfo (string brandId);
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        List<Brand> ListBrands ();

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        ApiResponse<List<Brand>> ListBrandsWithHttpInfo ();
        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// List email templates in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>List&lt;EmailTemplate&gt;</returns>
        List<EmailTemplate> ListEmailTemplates (string brandId, string after = null, int? limit = null);

        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// List email templates in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailTemplate&gt;</returns>
        ApiResponse<List<EmailTemplate>> ListEmailTemplatesWithHttpInfo (string brandId, string after = null, int? limit = null);
        /// <summary>
        /// Get Preview Content of Email Customization
        /// </summary>
        /// <remarks>
        /// Get a preview of an email template customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>EmailPreview</returns>
        EmailPreview PreviewEmailCustomizationContent (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Get Preview Content of Email Customization
        /// </summary>
        /// <remarks>
        /// Get a preview of an email template customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of EmailPreview</returns>
        ApiResponse<EmailPreview> PreviewEmailCustomizationContentWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Preview of Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailPreview</returns>
        EmailPreview PreviewEmailDefaultContent (string brandId, string templateName);

        /// <summary>
        /// Get Preview of Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailPreview</returns>
        ApiResponse<EmailPreview> PreviewEmailDefaultContentWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SendTestEmailFromTemplate (string templateName, string brandId, EmailTestResponse body = null);

        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendTestEmailFromTemplateWithHttpInfo (string templateName, string brandId, EmailTestResponse body = null);
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Brand</returns>
        Brand UpdateBrand (string brandId, Brand body = null);

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        ApiResponse<Brand> UpdateBrandWithHttpInfo (string brandId, Brand body = null);
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ThemeResponse</returns>
        ThemeResponse UpdateBrandTheme (string brandId, string themeId, Theme body = null);

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        ApiResponse<ThemeResponse> UpdateBrandThemeWithHttpInfo (string brandId, string themeId, Theme body = null);
        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Update an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>EmailCustomization</returns>
        EmailCustomization UpdateEmailCustomization (string brandId, string templateName, string customizationId, EmailCustomization body = null);

        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Update an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        ApiResponse<EmailCustomization> UpdateEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId, EmailCustomization body = null);
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeBackgroundImage (string brandId, string themeId);

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeBackgroundImageWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeFavicon (string brandId, string themeId);

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeFaviconWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        ImageUploadResponse UploadBrandThemeLogo (string brandId, string themeId);

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        ApiResponse<ImageUploadResponse> UploadBrandThemeLogoWithHttpInfo (string brandId, string themeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Create an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync (string brandId, string templateName, EmailCustomization body = null);

        /// <summary>
        /// Create Email Customization
        /// </summary>
        /// <remarks>
        /// Create an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> CreateEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, EmailCustomization body = null);
        /// <summary>
        /// Delete Email Customizations
        /// </summary>
        /// <remarks>
        /// Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllCustomizationsAsync (string brandId, string templateName);

        /// <summary>
        /// Delete Email Customizations
        /// </summary>
        /// <remarks>
        /// Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllCustomizationsAsyncWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme background image
        /// </summary>
        /// <remarks>
        /// Deletes a Theme background image
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeBackgroundImageAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeFaviconAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandThemeLogoAsync (string brandId, string themeId);

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <remarks>
        /// Deletes a Theme logo. The org then uses the Okta default logo.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeLogoAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Delete an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailCustomizationAsync (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Delete Email Customization
        /// </summary>
        /// <remarks>
        /// Delete an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// List all email customcations for an email template
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        System.Threading.Tasks.Task<List<EmailCustomization>> GetAllEmailCustomizationsAsync (string brandId, string templateName);

        /// <summary>
        /// List Email Customizations
        /// </summary>
        /// <remarks>
        /// List all email customcations for an email template
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailCustomization>>> GetAllEmailCustomizationsAsyncWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> GetBrandAsync (string brandId);

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Fetches a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> GetBrandAsyncWithHttpInfo (string brandId);
        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync (string brandId, string themeId);

        /// <summary>
        /// Get a theme for a brand
        /// </summary>
        /// <remarks>
        /// Fetches a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> GetBrandThemeAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Fetch an email customization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Get Email Customization
        /// </summary>
        /// <remarks>
        /// Fetch an email customization by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> GetEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Fetch an email template by &#x60;templateName&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailTemplate</returns>
        System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (string brandId, string templateName);

        /// <summary>
        /// Get Email Template
        /// </summary>
        /// <remarks>
        /// Fetch an email template by &#x60;templateName&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Default Content of Email Template
        /// </summary>
        /// <remarks>
        /// Fetch the default content for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailDefaultContent</returns>
        System.Threading.Tasks.Task<EmailDefaultContent> GetEmailTemplateDefaultContentAsync (string brandId, string templateName);

        /// <summary>
        /// Get Default Content of Email Template
        /// </summary>
        /// <remarks>
        /// Fetch the default content for an email template.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefaultContent>> GetEmailTemplateDefaultContentAsyncWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync (string brandId);

        /// <summary>
        /// Get Brand Themes
        /// </summary>
        /// <remarks>
        /// List all the themes in your brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ThemeResponse>>> ListBrandThemesAsyncWithHttpInfo (string brandId);
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync ();

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// List all the brands in your org.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Brand>>> ListBrandsAsyncWithHttpInfo ();
        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// List email templates in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>Task of List&lt;EmailTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<EmailTemplate>> ListEmailTemplatesAsync (string brandId, string after = null, int? limit = null);

        /// <summary>
        /// List Email Templates
        /// </summary>
        /// <remarks>
        /// List email templates in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailTemplate>>> ListEmailTemplatesAsyncWithHttpInfo (string brandId, string after = null, int? limit = null);
        /// <summary>
        /// Get Preview Content of Email Customization
        /// </summary>
        /// <remarks>
        /// Get a preview of an email template customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> PreviewEmailCustomizationContentAsync (string brandId, string templateName, string customizationId);

        /// <summary>
        /// Get Preview Content of Email Customization
        /// </summary>
        /// <remarks>
        /// Get a preview of an email template customization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> PreviewEmailCustomizationContentAsyncWithHttpInfo (string brandId, string templateName, string customizationId);
        /// <summary>
        /// Get Preview of Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailPreview</returns>
        System.Threading.Tasks.Task<EmailPreview> PreviewEmailDefaultContentAsync (string brandId, string templateName);

        /// <summary>
        /// Get Preview of Email Template Default Content
        /// </summary>
        /// <remarks>
        /// Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailPreview>> PreviewEmailDefaultContentAsyncWithHttpInfo (string brandId, string templateName);
        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTestEmailFromTemplateAsync (string templateName, string brandId, EmailTestResponse body = null);

        /// <summary>
        /// Send Test Email
        /// </summary>
        /// <remarks>
        /// Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTestEmailFromTemplateAsyncWithHttpInfo (string templateName, string brandId, EmailTestResponse body = null);
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Brand</returns>
        System.Threading.Tasks.Task<Brand> UpdateBrandAsync (string brandId, Brand body = null);

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand by &#x60;brandId&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        System.Threading.Tasks.Task<ApiResponse<Brand>> UpdateBrandAsyncWithHttpInfo (string brandId, Brand body = null);
        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ThemeResponse</returns>
        System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync (string brandId, string themeId, Theme body = null);

        /// <summary>
        /// Update a theme for a brand
        /// </summary>
        /// <remarks>
        /// Updates a theme for a brand
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> UpdateBrandThemeAsyncWithHttpInfo (string brandId, string themeId, Theme body = null);
        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Update an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>Task of EmailCustomization</returns>
        System.Threading.Tasks.Task<EmailCustomization> UpdateEmailCustomizationAsync (string brandId, string templateName, string customizationId, EmailCustomization body = null);

        /// <summary>
        /// Update Email Customization
        /// </summary>
        /// <remarks>
        /// Update an email customization
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> UpdateEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId, EmailCustomization body = null);
        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync (string brandId, string themeId);

        /// <summary>
        /// Updates the background image for your Theme
        /// </summary>
        /// <remarks>
        /// Updates the background image for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync (string brandId, string themeId);

        /// <summary>
        /// Updates the favicon for your theme
        /// </summary>
        /// <remarks>
        /// Updates the favicon for your theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconAsyncWithHttpInfo (string brandId, string themeId);
        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync (string brandId, string themeId);

        /// <summary>
        /// Update a themes logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your Theme
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoAsyncWithHttpInfo (string brandId, string themeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BrandApi : IBrandApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// </summary>
        /// <returns></returns>
        public BrandApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrandApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Email Customization Create an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization CreateEmailCustomization (string brandId, string templateName, EmailCustomization body = null)
        {
             ApiResponse<EmailCustomization> localVarResponse = CreateEmailCustomizationWithHttpInfo(brandId, templateName, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Email Customization Create an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public ApiResponse< EmailCustomization > CreateEmailCustomizationWithHttpInfo (string brandId, string templateName, EmailCustomization body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->CreateEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->CreateEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Create Email Customization Create an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> CreateEmailCustomizationAsync (string brandId, string templateName, EmailCustomization body = null)
        {
             ApiResponse<EmailCustomization> localVarResponse = await CreateEmailCustomizationAsyncWithHttpInfo(brandId, templateName, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Email Customization Create an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> CreateEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, EmailCustomization body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->CreateEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->CreateEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Delete Email Customizations Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns></returns>
        public void DeleteAllCustomizations (string brandId, string templateName)
        {
             DeleteAllCustomizationsWithHttpInfo(brandId, templateName);
        }

        /// <summary>
        /// Delete Email Customizations Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllCustomizationsWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteAllCustomizations");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->DeleteAllCustomizations");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllCustomizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Email Customizations Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllCustomizationsAsync (string brandId, string templateName)
        {
             await DeleteAllCustomizationsAsyncWithHttpInfo(brandId, templateName);

        }

        /// <summary>
        /// Delete Email Customizations Delete all customizations for an email template. Also known as “Reset to Default”.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllCustomizationsAsyncWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteAllCustomizations");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->DeleteAllCustomizations");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllCustomizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeBackgroundImage (string brandId, string themeId)
        {
             DeleteBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBrandThemeBackgroundImageWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeBackgroundImage");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/background-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeBackgroundImageAsync (string brandId, string themeId)
        {
             await DeleteBrandThemeBackgroundImageAsyncWithHttpInfo(brandId, themeId);

        }

        /// <summary>
        /// Deletes a Theme background image Deletes a Theme background image
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeBackgroundImageAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeBackgroundImage");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeBackgroundImage");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/background-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeBackgroundImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeFavicon (string brandId, string themeId)
        {
             DeleteBrandThemeFaviconWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBrandThemeFaviconWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeFavicon");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeFavicon");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/favicon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeFaviconAsync (string brandId, string themeId)
        {
             await DeleteBrandThemeFaviconAsyncWithHttpInfo(brandId, themeId);

        }

        /// <summary>
        /// Deletes a Theme favicon. The org then uses the Okta default favicon. Deletes a Theme favicon. The org then uses the Okta default favicon.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeFaviconAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeFavicon");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeFavicon");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/favicon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeFavicon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns></returns>
        public void DeleteBrandThemeLogo (string brandId, string themeId)
        {
             DeleteBrandThemeLogoWithHttpInfo(brandId, themeId);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBrandThemeLogoWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeLogo");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeLogo");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandThemeLogoAsync (string brandId, string themeId)
        {
             await DeleteBrandThemeLogoAsyncWithHttpInfo(brandId, themeId);

        }

        /// <summary>
        /// Deletes a Theme logo. The org then uses the Okta default logo. Deletes a Theme logo. The org then uses the Okta default logo.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandThemeLogoAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteBrandThemeLogo");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->DeleteBrandThemeLogo");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBrandThemeLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Email Customization Delete an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns></returns>
        public void DeleteEmailCustomization (string brandId, string templateName, string customizationId)
        {
             DeleteEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
        }

        /// <summary>
        /// Delete Email Customization Delete an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->DeleteEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->DeleteEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Email Customization Delete an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailCustomizationAsync (string brandId, string templateName, string customizationId)
        {
             await DeleteEmailCustomizationAsyncWithHttpInfo(brandId, templateName, customizationId);

        }

        /// <summary>
        /// Delete Email Customization Delete an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->DeleteEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->DeleteEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->DeleteEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Email Customizations List all email customcations for an email template
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>List&lt;EmailCustomization&gt;</returns>
        public List<EmailCustomization> GetAllEmailCustomizations (string brandId, string templateName)
        {
             ApiResponse<List<EmailCustomization>> localVarResponse = GetAllEmailCustomizationsWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Customizations List all email customcations for an email template
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of List&lt;EmailCustomization&gt;</returns>
        public ApiResponse< List<EmailCustomization> > GetAllEmailCustomizationsWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetAllEmailCustomizations");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetAllEmailCustomizations");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllEmailCustomizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailCustomization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailCustomization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailCustomization>)));
        }

        /// <summary>
        /// List Email Customizations List all email customcations for an email template
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of List&lt;EmailCustomization&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailCustomization>> GetAllEmailCustomizationsAsync (string brandId, string templateName)
        {
             ApiResponse<List<EmailCustomization>> localVarResponse = await GetAllEmailCustomizationsAsyncWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Email Customizations List all email customcations for an email template
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (List&lt;EmailCustomization&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EmailCustomization>>> GetAllEmailCustomizationsAsyncWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetAllEmailCustomizations");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetAllEmailCustomizations");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllEmailCustomizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailCustomization>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailCustomization>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailCustomization>)));
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Brand</returns>
        public Brand GetBrand (string brandId)
        {
             ApiResponse<Brand> localVarResponse = GetBrandWithHttpInfo(brandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of Brand</returns>
        public ApiResponse< Brand > GetBrandWithHttpInfo (string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrand");

            var localVarPath = "./api/v1/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Brand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> GetBrandAsync (string brandId)
        {
             ApiResponse<Brand> localVarResponse = await GetBrandAsyncWithHttpInfo(brandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Brand Fetches a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Brand>> GetBrandAsyncWithHttpInfo (string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrand");

            var localVarPath = "./api/v1/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Brand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse GetBrandTheme (string brandId, string themeId)
        {
             ApiResponse<ThemeResponse> localVarResponse = GetBrandThemeWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public ApiResponse< ThemeResponse > GetBrandThemeWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrandTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->GetBrandTheme");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeResponse)));
        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> GetBrandThemeAsync (string brandId, string themeId)
        {
             ApiResponse<ThemeResponse> localVarResponse = await GetBrandThemeAsyncWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a theme for a brand Fetches a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> GetBrandThemeAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetBrandTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->GetBrandTheme");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrandTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeResponse)));
        }

        /// <summary>
        /// Get Email Customization Fetch an email customization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization GetEmailCustomization (string brandId, string templateName, string customizationId)
        {
             ApiResponse<EmailCustomization> localVarResponse = GetEmailCustomizationWithHttpInfo(brandId, templateName, customizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Customization Fetch an email customization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public ApiResponse< EmailCustomization > GetEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->GetEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Get Email Customization Fetch an email customization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> GetEmailCustomizationAsync (string brandId, string templateName, string customizationId)
        {
             ApiResponse<EmailCustomization> localVarResponse = await GetEmailCustomizationAsyncWithHttpInfo(brandId, templateName, customizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Email Customization Fetch an email customization by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> GetEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->GetEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Get Email Template Fetch an email template by &#x60;templateName&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailTemplate</returns>
        public EmailTemplate GetEmailTemplate (string brandId, string templateName)
        {
             ApiResponse<EmailTemplate> localVarResponse = GetEmailTemplateWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Template Fetch an email template by &#x60;templateName&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailTemplate</returns>
        public ApiResponse< EmailTemplate > GetEmailTemplateWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailTemplate");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get Email Template Fetch an email template by &#x60;templateName&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailTemplate</returns>
        public async System.Threading.Tasks.Task<EmailTemplate> GetEmailTemplateAsync (string brandId, string templateName)
        {
             ApiResponse<EmailTemplate> localVarResponse = await GetEmailTemplateAsyncWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Email Template Fetch an email template by &#x60;templateName&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailTemplate>> GetEmailTemplateAsyncWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailTemplate");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailTemplate)));
        }

        /// <summary>
        /// Get Default Content of Email Template Fetch the default content for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailDefaultContent</returns>
        public EmailDefaultContent GetEmailTemplateDefaultContent (string brandId, string templateName)
        {
             ApiResponse<EmailDefaultContent> localVarResponse = GetEmailTemplateDefaultContentWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Default Content of Email Template Fetch the default content for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailDefaultContent</returns>
        public ApiResponse< EmailDefaultContent > GetEmailTemplateDefaultContentWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailTemplateDefaultContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailTemplateDefaultContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/default-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplateDefaultContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefaultContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailDefaultContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefaultContent)));
        }

        /// <summary>
        /// Get Default Content of Email Template Fetch the default content for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailDefaultContent</returns>
        public async System.Threading.Tasks.Task<EmailDefaultContent> GetEmailTemplateDefaultContentAsync (string brandId, string templateName)
        {
             ApiResponse<EmailDefaultContent> localVarResponse = await GetEmailTemplateDefaultContentAsyncWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Default Content of Email Template Fetch the default content for an email template.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailDefaultContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefaultContent>> GetEmailTemplateDefaultContentAsyncWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->GetEmailTemplateDefaultContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->GetEmailTemplateDefaultContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/default-content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailTemplateDefaultContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefaultContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailDefaultContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefaultContent)));
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>List&lt;ThemeResponse&gt;</returns>
        public List<ThemeResponse> ListBrandThemes (string brandId)
        {
             ApiResponse<List<ThemeResponse>> localVarResponse = ListBrandThemesWithHttpInfo(brandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>ApiResponse of List&lt;ThemeResponse&gt;</returns>
        public ApiResponse< List<ThemeResponse> > ListBrandThemesWithHttpInfo (string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListBrandThemes");

            var localVarPath = "./api/v1/brands/{brandId}/themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBrandThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ThemeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ThemeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ThemeResponse>)));
        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of List&lt;ThemeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ThemeResponse>> ListBrandThemesAsync (string brandId)
        {
             ApiResponse<List<ThemeResponse>> localVarResponse = await ListBrandThemesAsyncWithHttpInfo(brandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Brand Themes List all the themes in your brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <returns>Task of ApiResponse (List&lt;ThemeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ThemeResponse>>> ListBrandThemesAsyncWithHttpInfo (string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListBrandThemes");

            var localVarPath = "./api/v1/brands/{brandId}/themes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBrandThemes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ThemeResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ThemeResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ThemeResponse>)));
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Brand&gt;</returns>
        public List<Brand> ListBrands ()
        {
             ApiResponse<List<Brand>> localVarResponse = ListBrandsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Brand&gt;</returns>
        public ApiResponse< List<Brand> > ListBrandsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Brand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Brand>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Brand>)));
        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Brand&gt;</returns>
        public async System.Threading.Tasks.Task<List<Brand>> ListBrandsAsync ()
        {
             ApiResponse<List<Brand>> localVarResponse = await ListBrandsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Brands List all the brands in your org.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Brand&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Brand>>> ListBrandsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/brands";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBrands", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Brand>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Brand>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Brand>)));
        }

        /// <summary>
        /// List Email Templates List email templates in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>List&lt;EmailTemplate&gt;</returns>
        public List<EmailTemplate> ListEmailTemplates (string brandId, string after = null, int? limit = null)
        {
             ApiResponse<List<EmailTemplate>> localVarResponse = ListEmailTemplatesWithHttpInfo(brandId, after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Email Templates List email templates in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailTemplate&gt;</returns>
        public ApiResponse< List<EmailTemplate> > ListEmailTemplatesWithHttpInfo (string brandId, string after = null, int? limit = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListEmailTemplates");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailTemplate>)));
        }

        /// <summary>
        /// List Email Templates List email templates in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>Task of List&lt;EmailTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailTemplate>> ListEmailTemplatesAsync (string brandId, string after = null, int? limit = null)
        {
             ApiResponse<List<EmailTemplate>> localVarResponse = await ListEmailTemplatesAsyncWithHttpInfo(brandId, after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Email Templates List email templates in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId">brand id</param>
        /// <param name="after">Specifies the pagination cursor for the next page of email templates. (optional)</param>
        /// <param name="limit">Specifies the number of results returned (maximum 200) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EmailTemplate>>> ListEmailTemplatesAsyncWithHttpInfo (string brandId, string after = null, int? limit = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->ListEmailTemplates");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmailTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EmailTemplate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailTemplate>)));
        }

        /// <summary>
        /// Get Preview Content of Email Customization Get a preview of an email template customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>EmailPreview</returns>
        public EmailPreview PreviewEmailCustomizationContent (string brandId, string templateName, string customizationId)
        {
             ApiResponse<EmailPreview> localVarResponse = PreviewEmailCustomizationContentWithHttpInfo(brandId, templateName, customizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Preview Content of Email Customization Get a preview of an email template customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>ApiResponse of EmailPreview</returns>
        public ApiResponse< EmailPreview > PreviewEmailCustomizationContentWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->PreviewEmailCustomizationContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->PreviewEmailCustomizationContent");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->PreviewEmailCustomizationContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewEmailCustomizationContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPreview)));
        }

        /// <summary>
        /// Get Preview Content of Email Customization Get a preview of an email template customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> PreviewEmailCustomizationContentAsync (string brandId, string templateName, string customizationId)
        {
             ApiResponse<EmailPreview> localVarResponse = await PreviewEmailCustomizationContentAsyncWithHttpInfo(brandId, templateName, customizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Preview Content of Email Customization Get a preview of an email template customization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailPreview>> PreviewEmailCustomizationContentAsyncWithHttpInfo (string brandId, string templateName, string customizationId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->PreviewEmailCustomizationContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->PreviewEmailCustomizationContent");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->PreviewEmailCustomizationContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewEmailCustomizationContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPreview)));
        }

        /// <summary>
        /// Get Preview of Email Template Default Content Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>EmailPreview</returns>
        public EmailPreview PreviewEmailDefaultContent (string brandId, string templateName)
        {
             ApiResponse<EmailPreview> localVarResponse = PreviewEmailDefaultContentWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Preview of Email Template Default Content Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of EmailPreview</returns>
        public ApiResponse< EmailPreview > PreviewEmailDefaultContentWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->PreviewEmailDefaultContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->PreviewEmailDefaultContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewEmailDefaultContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPreview)));
        }

        /// <summary>
        /// Get Preview of Email Template Default Content Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of EmailPreview</returns>
        public async System.Threading.Tasks.Task<EmailPreview> PreviewEmailDefaultContentAsync (string brandId, string templateName)
        {
             ApiResponse<EmailPreview> localVarResponse = await PreviewEmailDefaultContentAsyncWithHttpInfo(brandId, templateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Preview of Email Template Default Content Fetch a preview of an email template&#x27;s default content by populating velocity references with the current user&#x27;s environment.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <returns>Task of ApiResponse (EmailPreview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailPreview>> PreviewEmailDefaultContentAsyncWithHttpInfo (string brandId, string templateName)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->PreviewEmailDefaultContent");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->PreviewEmailDefaultContent");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewEmailDefaultContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailPreview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailPreview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailPreview)));
        }

        /// <summary>
        /// Send Test Email Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SendTestEmailFromTemplate (string templateName, string brandId, EmailTestResponse body = null)
        {
             SendTestEmailFromTemplateWithHttpInfo(templateName, brandId, body);
        }

        /// <summary>
        /// Send Test Email Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendTestEmailFromTemplateWithHttpInfo (string templateName, string brandId, EmailTestResponse body = null)
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->SendTestEmailFromTemplate");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->SendTestEmailFromTemplate");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTestEmailFromTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send Test Email Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTestEmailFromTemplateAsync (string templateName, string brandId, EmailTestResponse body = null)
        {
             await SendTestEmailFromTemplateAsyncWithHttpInfo(templateName, brandId, body);

        }

        /// <summary>
        /// Send Test Email Send a test email to the current user’s primary and secondary email addresses. The email content is selected based on the following priority: 1. An email customization specifically for the user’s locale. 2. The default language of email customizations. 3. The email template’s default content.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateName"></param>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendTestEmailFromTemplateAsyncWithHttpInfo (string templateName, string brandId, EmailTestResponse body = null)
        {
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->SendTestEmailFromTemplate");
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->SendTestEmailFromTemplate");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTestEmailFromTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Brand</returns>
        public Brand UpdateBrand (string brandId, Brand body = null)
        {
             ApiResponse<Brand> localVarResponse = UpdateBrandWithHttpInfo(brandId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Brand</returns>
        public ApiResponse< Brand > UpdateBrandWithHttpInfo (string brandId, Brand body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrand");

            var localVarPath = "./api/v1/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Brand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Brand</returns>
        public async System.Threading.Tasks.Task<Brand> UpdateBrandAsync (string brandId, Brand body = null)
        {
             ApiResponse<Brand> localVarResponse = await UpdateBrandAsyncWithHttpInfo(brandId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Brand Updates a brand by &#x60;brandId&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Brand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Brand>> UpdateBrandAsyncWithHttpInfo (string brandId, Brand body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrand");

            var localVarPath = "./api/v1/brands/{brandId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrand", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Brand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Brand) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Brand)));
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ThemeResponse</returns>
        public ThemeResponse UpdateBrandTheme (string brandId, string themeId, Theme body = null)
        {
             ApiResponse<ThemeResponse> localVarResponse = UpdateBrandThemeWithHttpInfo(brandId, themeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ThemeResponse</returns>
        public ApiResponse< ThemeResponse > UpdateBrandThemeWithHttpInfo (string brandId, string themeId, Theme body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrandTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UpdateBrandTheme");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeResponse)));
        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ThemeResponse</returns>
        public async System.Threading.Tasks.Task<ThemeResponse> UpdateBrandThemeAsync (string brandId, string themeId, Theme body = null)
        {
             ApiResponse<ThemeResponse> localVarResponse = await UpdateBrandThemeAsyncWithHttpInfo(brandId, themeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a theme for a brand Updates a theme for a brand
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ThemeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThemeResponse>> UpdateBrandThemeAsyncWithHttpInfo (string brandId, string themeId, Theme body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateBrandTheme");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UpdateBrandTheme");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBrandTheme", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThemeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ThemeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThemeResponse)));
        }

        /// <summary>
        /// Update Email Customization Update an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>EmailCustomization</returns>
        public EmailCustomization UpdateEmailCustomization (string brandId, string templateName, string customizationId, EmailCustomization body = null)
        {
             ApiResponse<EmailCustomization> localVarResponse = UpdateEmailCustomizationWithHttpInfo(brandId, templateName, customizationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Email Customization Update an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>ApiResponse of EmailCustomization</returns>
        public ApiResponse< EmailCustomization > UpdateEmailCustomizationWithHttpInfo (string brandId, string templateName, string customizationId, EmailCustomization body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->UpdateEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->UpdateEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Update Email Customization Update an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>Task of EmailCustomization</returns>
        public async System.Threading.Tasks.Task<EmailCustomization> UpdateEmailCustomizationAsync (string brandId, string templateName, string customizationId, EmailCustomization body = null)
        {
             ApiResponse<EmailCustomization> localVarResponse = await UpdateEmailCustomizationAsyncWithHttpInfo(brandId, templateName, customizationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Email Customization Update an email customization
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="templateName"></param>
        /// <param name="customizationId"></param>
        /// <param name="body">Request (optional)</param>
        /// <returns>Task of ApiResponse (EmailCustomization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailCustomization>> UpdateEmailCustomizationAsyncWithHttpInfo (string brandId, string templateName, string customizationId, EmailCustomization body = null)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UpdateEmailCustomization");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling BrandApi->UpdateEmailCustomization");
            // verify the required parameter 'customizationId' is set
            if (customizationId == null)
                throw new ApiException(400, "Missing required parameter 'customizationId' when calling BrandApi->UpdateEmailCustomization");

            var localVarPath = "./api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (templateName != null) localVarPathParams.Add("templateName", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (customizationId != null) localVarPathParams.Add("customizationId", this.Configuration.ApiClient.ParameterToString(customizationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmailCustomization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailCustomization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmailCustomization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailCustomization)));
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeBackgroundImage (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeBackgroundImageWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public ApiResponse< ImageUploadResponse > UploadBrandThemeBackgroundImageWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeBackgroundImage");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/background-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeBackgroundImageAsync (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeBackgroundImageAsyncWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the background image for your Theme Updates the background image for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeBackgroundImageAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeBackgroundImage");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeBackgroundImage");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/background-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeBackgroundImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeFavicon (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeFaviconWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public ApiResponse< ImageUploadResponse > UploadBrandThemeFaviconWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeFavicon");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeFavicon");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/favicon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeFaviconAsync (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeFaviconAsyncWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the favicon for your theme Updates the favicon for your theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeFaviconAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeFavicon");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeFavicon");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/favicon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeFavicon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ImageUploadResponse</returns>
        public ImageUploadResponse UploadBrandThemeLogo (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = UploadBrandThemeLogoWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>ApiResponse of ImageUploadResponse</returns>
        public ApiResponse< ImageUploadResponse > UploadBrandThemeLogoWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeLogo");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeLogo");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ImageUploadResponse</returns>
        public async System.Threading.Tasks.Task<ImageUploadResponse> UploadBrandThemeLogoAsync (string brandId, string themeId)
        {
             ApiResponse<ImageUploadResponse> localVarResponse = await UploadBrandThemeLogoAsyncWithHttpInfo(brandId, themeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a themes logo Updates the logo for your Theme
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="brandId"></param>
        /// <param name="themeId"></param>
        /// <returns>Task of ApiResponse (ImageUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageUploadResponse>> UploadBrandThemeLogoAsyncWithHttpInfo (string brandId, string themeId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
                throw new ApiException(400, "Missing required parameter 'brandId' when calling BrandApi->UploadBrandThemeLogo");
            // verify the required parameter 'themeId' is set
            if (themeId == null)
                throw new ApiException(400, "Missing required parameter 'themeId' when calling BrandApi->UploadBrandThemeLogo");

            var localVarPath = "./api/v1/brands/{brandId}/themes/{themeId}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (brandId != null) localVarPathParams.Add("brandId", this.Configuration.ApiClient.ParameterToString(brandId)); // path parameter
            if (themeId != null) localVarPathParams.Add("themeId", this.Configuration.ApiClient.ParameterToString(themeId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadBrandThemeLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ImageUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageUploadResponse)));
        }

    }
}
