/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISchemaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches the Schema for an App User
        /// </summary>
        /// <remarks>
        /// Fetches the Schema for an App User
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>UserSchema</returns>
        UserSchema GetApplicationUserSchema (string appInstanceId);

        /// <summary>
        /// Fetches the Schema for an App User
        /// </summary>
        /// <remarks>
        /// Fetches the Schema for an App User
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        ApiResponse<UserSchema> GetApplicationUserSchemaWithHttpInfo (string appInstanceId);
        /// <summary>
        /// Fetches the group schema
        /// </summary>
        /// <remarks>
        /// Fetches the group schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupSchema</returns>
        GroupSchema GetGroupSchema ();

        /// <summary>
        /// Fetches the group schema
        /// </summary>
        /// <remarks>
        /// Fetches the group schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupSchema</returns>
        ApiResponse<GroupSchema> GetGroupSchemaWithHttpInfo ();
        /// <summary>
        /// Fetches the schema for a Schema Id.
        /// </summary>
        /// <remarks>
        /// Fetches the schema for a Schema Id.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>UserSchema</returns>
        UserSchema GetUserSchema (string schemaId);

        /// <summary>
        /// Fetches the schema for a Schema Id.
        /// </summary>
        /// <remarks>
        /// Fetches the schema for a Schema Id.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        ApiResponse<UserSchema> GetUserSchemaWithHttpInfo (string schemaId);
        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserSchema</returns>
        UserSchema UpdateApplicationUserProfile (string appInstanceId, UserSchema body = null);

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserSchema</returns>
        ApiResponse<UserSchema> UpdateApplicationUserProfileWithHttpInfo (string appInstanceId, UserSchema body = null);
        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <remarks>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupSchema</returns>
        GroupSchema UpdateGroupSchema (GroupSchema body = null);

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <remarks>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupSchema</returns>
        ApiResponse<GroupSchema> UpdateGroupSchemaWithHttpInfo (GroupSchema body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the user schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>UserSchema</returns>
        UserSchema UpdateUserProfile (UserSchema body, string schemaId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the user schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        ApiResponse<UserSchema> UpdateUserProfileWithHttpInfo (UserSchema body, string schemaId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetches the Schema for an App User
        /// </summary>
        /// <remarks>
        /// Fetches the Schema for an App User
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>Task of UserSchema</returns>
        System.Threading.Tasks.Task<UserSchema> GetApplicationUserSchemaAsync (string appInstanceId);

        /// <summary>
        /// Fetches the Schema for an App User
        /// </summary>
        /// <remarks>
        /// Fetches the Schema for an App User
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSchema>> GetApplicationUserSchemaAsyncWithHttpInfo (string appInstanceId);
        /// <summary>
        /// Fetches the group schema
        /// </summary>
        /// <remarks>
        /// Fetches the group schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GroupSchema</returns>
        System.Threading.Tasks.Task<GroupSchema> GetGroupSchemaAsync ();

        /// <summary>
        /// Fetches the group schema
        /// </summary>
        /// <remarks>
        /// Fetches the group schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GroupSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSchema>> GetGroupSchemaAsyncWithHttpInfo ();
        /// <summary>
        /// Fetches the schema for a Schema Id.
        /// </summary>
        /// <remarks>
        /// Fetches the schema for a Schema Id.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>Task of UserSchema</returns>
        System.Threading.Tasks.Task<UserSchema> GetUserSchemaAsync (string schemaId);

        /// <summary>
        /// Fetches the schema for a Schema Id.
        /// </summary>
        /// <remarks>
        /// Fetches the schema for a Schema Id.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSchema>> GetUserSchemaAsyncWithHttpInfo (string schemaId);
        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserSchema</returns>
        System.Threading.Tasks.Task<UserSchema> UpdateApplicationUserProfileAsync (string appInstanceId, UserSchema body = null);

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the Application User Schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSchema>> UpdateApplicationUserProfileAsyncWithHttpInfo (string appInstanceId, UserSchema body = null);
        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <remarks>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupSchema</returns>
        System.Threading.Tasks.Task<GroupSchema> UpdateGroupSchemaAsync (GroupSchema body = null);

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <remarks>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSchema>> UpdateGroupSchemaAsyncWithHttpInfo (GroupSchema body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the user schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>Task of UserSchema</returns>
        System.Threading.Tasks.Task<UserSchema> UpdateUserProfileAsync (UserSchema body, string schemaId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Partial updates on the User Profile properties of the user schema.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSchema>> UpdateUserProfileAsyncWithHttpInfo (UserSchema body, string schemaId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SchemaApi : ISchemaApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemaApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// </summary>
        /// <returns></returns>
        public SchemaApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemaApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetches the Schema for an App User Fetches the Schema for an App User
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>UserSchema</returns>
        public UserSchema GetApplicationUserSchema (string appInstanceId)
        {
             ApiResponse<UserSchema> localVarResponse = GetApplicationUserSchemaWithHttpInfo(appInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches the Schema for an App User Fetches the Schema for an App User
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        public ApiResponse< UserSchema > GetApplicationUserSchemaWithHttpInfo (string appInstanceId)
        {
            // verify the required parameter 'appInstanceId' is set
            if (appInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'appInstanceId' when calling SchemaApi->GetApplicationUserSchema");

            var localVarPath = "./api/v1/meta/schemas/apps/{appInstanceId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appInstanceId != null) localVarPathParams.Add("appInstanceId", this.Configuration.ApiClient.ParameterToString(appInstanceId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUserSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Fetches the Schema for an App User Fetches the Schema for an App User
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>Task of UserSchema</returns>
        public async System.Threading.Tasks.Task<UserSchema> GetApplicationUserSchemaAsync (string appInstanceId)
        {
             ApiResponse<UserSchema> localVarResponse = await GetApplicationUserSchemaAsyncWithHttpInfo(appInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches the Schema for an App User Fetches the Schema for an App User
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSchema>> GetApplicationUserSchemaAsyncWithHttpInfo (string appInstanceId)
        {
            // verify the required parameter 'appInstanceId' is set
            if (appInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'appInstanceId' when calling SchemaApi->GetApplicationUserSchema");

            var localVarPath = "./api/v1/meta/schemas/apps/{appInstanceId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appInstanceId != null) localVarPathParams.Add("appInstanceId", this.Configuration.ApiClient.ParameterToString(appInstanceId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUserSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Fetches the group schema Fetches the group schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupSchema</returns>
        public GroupSchema GetGroupSchema ()
        {
             ApiResponse<GroupSchema> localVarResponse = GetGroupSchemaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches the group schema Fetches the group schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupSchema</returns>
        public ApiResponse< GroupSchema > GetGroupSchemaWithHttpInfo ()
        {

            var localVarPath = "./api/v1/meta/schemas/group/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSchema)));
        }

        /// <summary>
        /// Fetches the group schema Fetches the group schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GroupSchema</returns>
        public async System.Threading.Tasks.Task<GroupSchema> GetGroupSchemaAsync ()
        {
             ApiResponse<GroupSchema> localVarResponse = await GetGroupSchemaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches the group schema Fetches the group schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GroupSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSchema>> GetGroupSchemaAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/meta/schemas/group/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSchema)));
        }

        /// <summary>
        /// Fetches the schema for a Schema Id. Fetches the schema for a Schema Id.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>UserSchema</returns>
        public UserSchema GetUserSchema (string schemaId)
        {
             ApiResponse<UserSchema> localVarResponse = GetUserSchemaWithHttpInfo(schemaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches the schema for a Schema Id. Fetches the schema for a Schema Id.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        public ApiResponse< UserSchema > GetUserSchemaWithHttpInfo (string schemaId)
        {
            // verify the required parameter 'schemaId' is set
            if (schemaId == null)
                throw new ApiException(400, "Missing required parameter 'schemaId' when calling SchemaApi->GetUserSchema");

            var localVarPath = "./api/v1/meta/schemas/user/{schemaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaId != null) localVarPathParams.Add("schemaId", this.Configuration.ApiClient.ParameterToString(schemaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Fetches the schema for a Schema Id. Fetches the schema for a Schema Id.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>Task of UserSchema</returns>
        public async System.Threading.Tasks.Task<UserSchema> GetUserSchemaAsync (string schemaId)
        {
             ApiResponse<UserSchema> localVarResponse = await GetUserSchemaAsyncWithHttpInfo(schemaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches the schema for a Schema Id. Fetches the schema for a Schema Id.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSchema>> GetUserSchemaAsyncWithHttpInfo (string schemaId)
        {
            // verify the required parameter 'schemaId' is set
            if (schemaId == null)
                throw new ApiException(400, "Missing required parameter 'schemaId' when calling SchemaApi->GetUserSchema");

            var localVarPath = "./api/v1/meta/schemas/user/{schemaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaId != null) localVarPathParams.Add("schemaId", this.Configuration.ApiClient.ParameterToString(schemaId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema. Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserSchema</returns>
        public UserSchema UpdateApplicationUserProfile (string appInstanceId, UserSchema body = null)
        {
             ApiResponse<UserSchema> localVarResponse = UpdateApplicationUserProfileWithHttpInfo(appInstanceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema. Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserSchema</returns>
        public ApiResponse< UserSchema > UpdateApplicationUserProfileWithHttpInfo (string appInstanceId, UserSchema body = null)
        {
            // verify the required parameter 'appInstanceId' is set
            if (appInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'appInstanceId' when calling SchemaApi->UpdateApplicationUserProfile");

            var localVarPath = "./api/v1/meta/schemas/apps/{appInstanceId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appInstanceId != null) localVarPathParams.Add("appInstanceId", this.Configuration.ApiClient.ParameterToString(appInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema. Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserSchema</returns>
        public async System.Threading.Tasks.Task<UserSchema> UpdateApplicationUserProfileAsync (string appInstanceId, UserSchema body = null)
        {
             ApiResponse<UserSchema> localVarResponse = await UpdateApplicationUserProfileAsyncWithHttpInfo(appInstanceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partial updates on the User Profile properties of the Application User Schema. Partial updates on the User Profile properties of the Application User Schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInstanceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSchema>> UpdateApplicationUserProfileAsyncWithHttpInfo (string appInstanceId, UserSchema body = null)
        {
            // verify the required parameter 'appInstanceId' is set
            if (appInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'appInstanceId' when calling SchemaApi->UpdateApplicationUserProfile");

            var localVarPath = "./api/v1/meta/schemas/apps/{appInstanceId}/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appInstanceId != null) localVarPathParams.Add("appInstanceId", this.Configuration.ApiClient.ParameterToString(appInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GroupSchema</returns>
        public GroupSchema UpdateGroupSchema (GroupSchema body = null)
        {
             ApiResponse<GroupSchema> localVarResponse = UpdateGroupSchemaWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GroupSchema</returns>
        public ApiResponse< GroupSchema > UpdateGroupSchemaWithHttpInfo (GroupSchema body = null)
        {

            var localVarPath = "./api/v1/meta/schemas/group/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSchema)));
        }

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GroupSchema</returns>
        public async System.Threading.Tasks.Task<GroupSchema> UpdateGroupSchemaAsync (GroupSchema body = null)
        {
             ApiResponse<GroupSchema> localVarResponse = await UpdateGroupSchemaAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates, adds ore removes one or more custom Group Profile properties in the schema Updates, adds ore removes one or more custom Group Profile properties in the schema
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GroupSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSchema>> UpdateGroupSchemaAsyncWithHttpInfo (GroupSchema body = null)
        {

            var localVarPath = "./api/v1/meta/schemas/group/default";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGroupSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GroupSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSchema)));
        }

        /// <summary>
        ///  Partial updates on the User Profile properties of the user schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>UserSchema</returns>
        public UserSchema UpdateUserProfile (UserSchema body, string schemaId)
        {
             ApiResponse<UserSchema> localVarResponse = UpdateUserProfileWithHttpInfo(body, schemaId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Partial updates on the User Profile properties of the user schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>ApiResponse of UserSchema</returns>
        public ApiResponse< UserSchema > UpdateUserProfileWithHttpInfo (UserSchema body, string schemaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->UpdateUserProfile");
            // verify the required parameter 'schemaId' is set
            if (schemaId == null)
                throw new ApiException(400, "Missing required parameter 'schemaId' when calling SchemaApi->UpdateUserProfile");

            var localVarPath = "./api/v1/meta/schemas/user/{schemaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaId != null) localVarPathParams.Add("schemaId", this.Configuration.ApiClient.ParameterToString(schemaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

        /// <summary>
        ///  Partial updates on the User Profile properties of the user schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>Task of UserSchema</returns>
        public async System.Threading.Tasks.Task<UserSchema> UpdateUserProfileAsync (UserSchema body, string schemaId)
        {
             ApiResponse<UserSchema> localVarResponse = await UpdateUserProfileAsyncWithHttpInfo(body, schemaId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Partial updates on the User Profile properties of the user schema.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="schemaId"></param>
        /// <returns>Task of ApiResponse (UserSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSchema>> UpdateUserProfileAsyncWithHttpInfo (UserSchema body, string schemaId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemaApi->UpdateUserProfile");
            // verify the required parameter 'schemaId' is set
            if (schemaId == null)
                throw new ApiException(400, "Missing required parameter 'schemaId' when calling SchemaApi->UpdateUserProfile");

            var localVarPath = "./api/v1/meta/schemas/user/{schemaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaId != null) localVarPathParams.Add("schemaId", this.Configuration.ApiClient.ParameterToString(schemaId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSchema)));
        }

    }
}
