/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch a list of events from your Okta organization system log.
        /// </summary>
        /// <remarks>
        /// The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;LogEvent&gt;</returns>
        List<LogEvent> GetLogs (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null);

        /// <summary>
        /// Fetch a list of events from your Okta organization system log.
        /// </summary>
        /// <remarks>
        /// The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LogEvent&gt;</returns>
        ApiResponse<List<LogEvent>> GetLogsWithHttpInfo (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch a list of events from your Okta organization system log.
        /// </summary>
        /// <remarks>
        /// The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of List&lt;LogEvent&gt;</returns>
        System.Threading.Tasks.Task<List<LogEvent>> GetLogsAsync (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null);

        /// <summary>
        /// Fetch a list of events from your Okta organization system log.
        /// </summary>
        /// <remarks>
        /// The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LogEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LogEvent>>> GetLogsAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LogApi : ILogApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// </summary>
        /// <returns></returns>
        public LogApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch a list of events from your Okta organization system log. The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>List&lt;LogEvent&gt;</returns>
        public List<LogEvent> GetLogs (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null)
        {
             ApiResponse<List<LogEvent>> localVarResponse = GetLogsWithHttpInfo(since, until, filter, q, limit, sortOrder, after);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of events from your Okta organization system log. The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LogEvent&gt;</returns>
        public ApiResponse< List<LogEvent> > GetLogsWithHttpInfo (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null)
        {

            var localVarPath = "./api/v1/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<LogEvent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogEvent>)));
        }

        /// <summary>
        /// Fetch a list of events from your Okta organization system log. The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of List&lt;LogEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<LogEvent>> GetLogsAsync (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null)
        {
             ApiResponse<List<LogEvent>> localVarResponse = await GetLogsAsyncWithHttpInfo(since, until, filter, q, limit, sortOrder, after);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a list of events from your Okta organization system log. The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sortOrder"> (optional, default to ASCENDING)</param>
        /// <param name="after"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LogEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LogEvent>>> GetLogsAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string filter = null, string q = null, int? limit = null, string sortOrder = null, string after = null)
        {

            var localVarPath = "./api/v1/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LogEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<LogEvent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LogEvent>)));
        }

    }
}
