/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAuthenticatorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Authenticator
        /// </summary>
        /// <remarks>
        /// Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        Authenticator ActivateAuthenticator (string authenticatorId);

        /// <summary>
        /// Activate Authenticator
        /// </summary>
        /// <remarks>
        /// Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        ApiResponse<Authenticator> ActivateAuthenticatorWithHttpInfo (string authenticatorId);
        /// <summary>
        /// Deactivate Authenticator
        /// </summary>
        /// <remarks>
        /// Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        Authenticator DeactivateAuthenticator (string authenticatorId);

        /// <summary>
        /// Deactivate Authenticator
        /// </summary>
        /// <remarks>
        /// Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        ApiResponse<Authenticator> DeactivateAuthenticatorWithHttpInfo (string authenticatorId);
        /// <summary>
        /// Get Authenticator
        /// </summary>
        /// <remarks>
        /// Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        Authenticator GetAuthenticator (string authenticatorId);

        /// <summary>
        /// Get Authenticator
        /// </summary>
        /// <remarks>
        /// Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        ApiResponse<Authenticator> GetAuthenticatorWithHttpInfo (string authenticatorId);
        /// <summary>
        /// List Authenticators
        /// </summary>
        /// <remarks>
        /// Enumerates authenticators in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Authenticator&gt;</returns>
        List<Authenticator> ListAuthenticators ();

        /// <summary>
        /// List Authenticators
        /// </summary>
        /// <remarks>
        /// Enumerates authenticators in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Authenticator&gt;</returns>
        ApiResponse<List<Authenticator>> ListAuthenticatorsWithHttpInfo ();
        /// <summary>
        /// Update Authenticator
        /// </summary>
        /// <remarks>
        /// Updates an authenticator
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Authenticator</returns>
        Authenticator UpdateAuthenticator (string authenticatorId, Authenticator body = null);

        /// <summary>
        /// Update Authenticator
        /// </summary>
        /// <remarks>
        /// Updates an authenticator
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Authenticator</returns>
        ApiResponse<Authenticator> UpdateAuthenticatorWithHttpInfo (string authenticatorId, Authenticator body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Authenticator
        /// </summary>
        /// <remarks>
        /// Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        System.Threading.Tasks.Task<Authenticator> ActivateAuthenticatorAsync (string authenticatorId);

        /// <summary>
        /// Activate Authenticator
        /// </summary>
        /// <remarks>
        /// Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authenticator>> ActivateAuthenticatorAsyncWithHttpInfo (string authenticatorId);
        /// <summary>
        /// Deactivate Authenticator
        /// </summary>
        /// <remarks>
        /// Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        System.Threading.Tasks.Task<Authenticator> DeactivateAuthenticatorAsync (string authenticatorId);

        /// <summary>
        /// Deactivate Authenticator
        /// </summary>
        /// <remarks>
        /// Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authenticator>> DeactivateAuthenticatorAsyncWithHttpInfo (string authenticatorId);
        /// <summary>
        /// Get Authenticator
        /// </summary>
        /// <remarks>
        /// Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        System.Threading.Tasks.Task<Authenticator> GetAuthenticatorAsync (string authenticatorId);

        /// <summary>
        /// Get Authenticator
        /// </summary>
        /// <remarks>
        /// Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authenticator>> GetAuthenticatorAsyncWithHttpInfo (string authenticatorId);
        /// <summary>
        /// List Authenticators
        /// </summary>
        /// <remarks>
        /// Enumerates authenticators in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Authenticator&gt;</returns>
        System.Threading.Tasks.Task<List<Authenticator>> ListAuthenticatorsAsync ();

        /// <summary>
        /// List Authenticators
        /// </summary>
        /// <remarks>
        /// Enumerates authenticators in your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Authenticator&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Authenticator>>> ListAuthenticatorsAsyncWithHttpInfo ();
        /// <summary>
        /// Update Authenticator
        /// </summary>
        /// <remarks>
        /// Updates an authenticator
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Authenticator</returns>
        System.Threading.Tasks.Task<Authenticator> UpdateAuthenticatorAsync (string authenticatorId, Authenticator body = null);

        /// <summary>
        /// Update Authenticator
        /// </summary>
        /// <remarks>
        /// Updates an authenticator
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        System.Threading.Tasks.Task<ApiResponse<Authenticator>> UpdateAuthenticatorAsyncWithHttpInfo (string authenticatorId, Authenticator body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AuthenticatorApi : IAuthenticatorApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticatorApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticatorApi"/> class
        /// </summary>
        /// <returns></returns>
        public AuthenticatorApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticatorApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Authenticator Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        public Authenticator ActivateAuthenticator (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = ActivateAuthenticatorWithHttpInfo(authenticatorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Authenticator Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        public ApiResponse< Authenticator > ActivateAuthenticatorWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->ActivateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Activate Authenticator Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        public async System.Threading.Tasks.Task<Authenticator> ActivateAuthenticatorAsync (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = await ActivateAuthenticatorAsyncWithHttpInfo(authenticatorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate Authenticator Activates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authenticator>> ActivateAuthenticatorAsyncWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->ActivateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Deactivate Authenticator Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        public Authenticator DeactivateAuthenticator (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = DeactivateAuthenticatorWithHttpInfo(authenticatorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate Authenticator Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        public ApiResponse< Authenticator > DeactivateAuthenticatorWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->DeactivateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Deactivate Authenticator Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        public async System.Threading.Tasks.Task<Authenticator> DeactivateAuthenticatorAsync (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = await DeactivateAuthenticatorAsyncWithHttpInfo(authenticatorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate Authenticator Deactivates an authenticator by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authenticator>> DeactivateAuthenticatorAsyncWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->DeactivateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Get Authenticator Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Authenticator</returns>
        public Authenticator GetAuthenticator (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = GetAuthenticatorWithHttpInfo(authenticatorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authenticator Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>ApiResponse of Authenticator</returns>
        public ApiResponse< Authenticator > GetAuthenticatorWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->GetAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Get Authenticator Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of Authenticator</returns>
        public async System.Threading.Tasks.Task<Authenticator> GetAuthenticatorAsync (string authenticatorId)
        {
             ApiResponse<Authenticator> localVarResponse = await GetAuthenticatorAsyncWithHttpInfo(authenticatorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Authenticator Fetches an authenticator from your Okta organization by &#x60;authenticatorId&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authenticator>> GetAuthenticatorAsyncWithHttpInfo (string authenticatorId)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->GetAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// List Authenticators Enumerates authenticators in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Authenticator&gt;</returns>
        public List<Authenticator> ListAuthenticators ()
        {
             ApiResponse<List<Authenticator>> localVarResponse = ListAuthenticatorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Authenticators Enumerates authenticators in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Authenticator&gt;</returns>
        public ApiResponse< List<Authenticator> > ListAuthenticatorsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthenticators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Authenticator>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Authenticator>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Authenticator>)));
        }

        /// <summary>
        /// List Authenticators Enumerates authenticators in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Authenticator&gt;</returns>
        public async System.Threading.Tasks.Task<List<Authenticator>> ListAuthenticatorsAsync ()
        {
             ApiResponse<List<Authenticator>> localVarResponse = await ListAuthenticatorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Authenticators Enumerates authenticators in your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Authenticator&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Authenticator>>> ListAuthenticatorsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAuthenticators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Authenticator>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Authenticator>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Authenticator>)));
        }

        /// <summary>
        /// Update Authenticator Updates an authenticator
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Authenticator</returns>
        public Authenticator UpdateAuthenticator (string authenticatorId, Authenticator body = null)
        {
             ApiResponse<Authenticator> localVarResponse = UpdateAuthenticatorWithHttpInfo(authenticatorId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authenticator Updates an authenticator
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Authenticator</returns>
        public ApiResponse< Authenticator > UpdateAuthenticatorWithHttpInfo (string authenticatorId, Authenticator body = null)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->UpdateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

        /// <summary>
        /// Update Authenticator Updates an authenticator
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Authenticator</returns>
        public async System.Threading.Tasks.Task<Authenticator> UpdateAuthenticatorAsync (string authenticatorId, Authenticator body = null)
        {
             ApiResponse<Authenticator> localVarResponse = await UpdateAuthenticatorAsyncWithHttpInfo(authenticatorId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Authenticator Updates an authenticator
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticatorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Authenticator)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Authenticator>> UpdateAuthenticatorAsyncWithHttpInfo (string authenticatorId, Authenticator body = null)
        {
            // verify the required parameter 'authenticatorId' is set
            if (authenticatorId == null)
                throw new ApiException(400, "Missing required parameter 'authenticatorId' when calling AuthenticatorApi->UpdateAuthenticator");

            var localVarPath = "./api/v1/authenticators/{authenticatorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authenticatorId != null) localVarPathParams.Add("authenticatorId", this.Configuration.ApiClient.ParameterToString(authenticatorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Authenticator>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Authenticator) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Authenticator)));
        }

    }
}
