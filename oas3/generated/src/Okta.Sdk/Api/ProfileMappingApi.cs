/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IProfileMappingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        ProfileMapping GetProfileMapping (string mappingId);

        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        ApiResponse<ProfileMapping> GetProfileMappingWithHttpInfo (string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>List&lt;ProfileMapping&gt;</returns>
        List<ProfileMapping> ListProfileMappings (string after = null, int? limit = null, string sourceId = null, string targetId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProfileMapping&gt;</returns>
        ApiResponse<List<ProfileMapping>> ListProfileMappingsWithHttpInfo (string after = null, int? limit = null, string sourceId = null, string targetId = null);
        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        ProfileMapping UpdateProfileMapping (ProfileMapping body, string mappingId);

        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        ApiResponse<ProfileMapping> UpdateProfileMappingWithHttpInfo (ProfileMapping body, string mappingId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>Task of ProfileMapping</returns>
        System.Threading.Tasks.Task<ProfileMapping> GetProfileMappingAsync (string mappingId);

        /// <summary>
        /// Get Profile Mapping
        /// </summary>
        /// <remarks>
        /// Fetches a single Profile Mapping referenced by its ID.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> GetProfileMappingAsyncWithHttpInfo (string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>Task of List&lt;ProfileMapping&gt;</returns>
        System.Threading.Tasks.Task<List<ProfileMapping>> ListProfileMappingsAsync (string after = null, int? limit = null, string sourceId = null, string targetId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates Profile Mappings in your organization with pagination.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProfileMapping&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProfileMapping>>> ListProfileMappingsAsyncWithHttpInfo (string after = null, int? limit = null, string sourceId = null, string targetId = null);
        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>Task of ProfileMapping</returns>
        System.Threading.Tasks.Task<ProfileMapping> UpdateProfileMappingAsync (ProfileMapping body, string mappingId);

        /// <summary>
        /// Update Profile Mapping
        /// </summary>
        /// <remarks>
        /// Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> UpdateProfileMappingAsyncWithHttpInfo (ProfileMapping body, string mappingId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ProfileMappingApi : IProfileMappingApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfileMappingApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProfileMappingApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileMappingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfileMappingApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        public ProfileMapping GetProfileMapping (string mappingId)
        {
             ApiResponse<ProfileMapping> localVarResponse = GetProfileMappingWithHttpInfo(mappingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        public ApiResponse< ProfileMapping > GetProfileMappingWithHttpInfo (string mappingId)
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->GetProfileMapping");

            var localVarPath = "./api/v1/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProfileMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileMapping)));
        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>Task of ProfileMapping</returns>
        public async System.Threading.Tasks.Task<ProfileMapping> GetProfileMappingAsync (string mappingId)
        {
             ApiResponse<ProfileMapping> localVarResponse = await GetProfileMappingAsyncWithHttpInfo(mappingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Profile Mapping Fetches a single Profile Mapping referenced by its ID.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mappingId"></param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> GetProfileMappingAsyncWithHttpInfo (string mappingId)
        {
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->GetProfileMapping");

            var localVarPath = "./api/v1/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProfileMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileMapping)));
        }

        /// <summary>
        ///  Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>List&lt;ProfileMapping&gt;</returns>
        public List<ProfileMapping> ListProfileMappings (string after = null, int? limit = null, string sourceId = null, string targetId = null)
        {
             ApiResponse<List<ProfileMapping>> localVarResponse = ListProfileMappingsWithHttpInfo(after, limit, sourceId, targetId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProfileMapping&gt;</returns>
        public ApiResponse< List<ProfileMapping> > ListProfileMappingsWithHttpInfo (string after = null, int? limit = null, string sourceId = null, string targetId = null)
        {

            var localVarPath = "./api/v1/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetId", targetId)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProfileMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfileMapping>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ProfileMapping>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfileMapping>)));
        }

        /// <summary>
        ///  Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>Task of List&lt;ProfileMapping&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProfileMapping>> ListProfileMappingsAsync (string after = null, int? limit = null, string sourceId = null, string targetId = null)
        {
             ApiResponse<List<ProfileMapping>> localVarResponse = await ListProfileMappingsAsyncWithHttpInfo(after, limit, sourceId, targetId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates Profile Mappings in your organization with pagination.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="sourceId"> (optional)</param>
        /// <param name="targetId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProfileMapping&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProfileMapping>>> ListProfileMappingsAsyncWithHttpInfo (string after = null, int? limit = null, string sourceId = null, string targetId = null)
        {

            var localVarPath = "./api/v1/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetId", targetId)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProfileMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProfileMapping>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ProfileMapping>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProfileMapping>)));
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>ProfileMapping</returns>
        public ProfileMapping UpdateProfileMapping (ProfileMapping body, string mappingId)
        {
             ApiResponse<ProfileMapping> localVarResponse = UpdateProfileMappingWithHttpInfo(body, mappingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>ApiResponse of ProfileMapping</returns>
        public ApiResponse< ProfileMapping > UpdateProfileMappingWithHttpInfo (ProfileMapping body, string mappingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProfileMappingApi->UpdateProfileMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->UpdateProfileMapping");

            var localVarPath = "./api/v1/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfileMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProfileMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileMapping)));
        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>Task of ProfileMapping</returns>
        public async System.Threading.Tasks.Task<ProfileMapping> UpdateProfileMappingAsync (ProfileMapping body, string mappingId)
        {
             ApiResponse<ProfileMapping> localVarResponse = await UpdateProfileMappingAsyncWithHttpInfo(body, mappingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Profile Mapping Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="mappingId"></param>
        /// <returns>Task of ApiResponse (ProfileMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileMapping>> UpdateProfileMappingAsyncWithHttpInfo (ProfileMapping body, string mappingId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProfileMappingApi->UpdateProfileMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling ProfileMappingApi->UpdateProfileMapping");

            var localVarPath = "./api/v1/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfileMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProfileMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileMapping)));
        }

    }
}
