/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IInlineHookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        InlineHook ActivateInlineHook (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        ApiResponse<InlineHook> ActivateInlineHookWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineHook</returns>
        InlineHook CreateInlineHook (InlineHook body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        ApiResponse<InlineHook> CreateInlineHookWithHttpInfo (InlineHook body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        InlineHook DeactivateInlineHook (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        ApiResponse<InlineHook> DeactivateInlineHookWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns></returns>
        void DeleteInlineHook (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInlineHookWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHookResponse</returns>
        InlineHookResponse ExecuteInlineHook (InlineHookPayload body, string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHookResponse</returns>
        ApiResponse<InlineHookResponse> ExecuteInlineHookWithHttpInfo (InlineHookPayload body, string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        InlineHook GetInlineHook (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        ApiResponse<InlineHook> GetInlineHookWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>List&lt;InlineHook&gt;</returns>
        List<InlineHook> ListInlineHooks (string type = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineHook&gt;</returns>
        ApiResponse<List<InlineHook>> ListInlineHooksWithHttpInfo (string type = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        InlineHook UpdateInlineHook (InlineHook body, string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        ApiResponse<InlineHook> UpdateInlineHookWithHttpInfo (InlineHook body, string inlineHookId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        System.Threading.Tasks.Task<InlineHook> ActivateInlineHookAsync (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Activates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHook>> ActivateInlineHookAsyncWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineHook</returns>
        System.Threading.Tasks.Task<InlineHook> CreateInlineHookAsync (InlineHook body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHook>> CreateInlineHookAsyncWithHttpInfo (InlineHook body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        System.Threading.Tasks.Task<InlineHook> DeactivateInlineHookAsync (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deactivates the Inline Hook matching the provided id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHook>> DeactivateInlineHookAsyncWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInlineHookAsync (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInlineHookAsyncWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHookResponse</returns>
        System.Threading.Tasks.Task<InlineHookResponse> ExecuteInlineHookAsync (InlineHookPayload body, string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHookResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHookResponse>> ExecuteInlineHookAsyncWithHttpInfo (InlineHookPayload body, string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        System.Threading.Tasks.Task<InlineHook> GetInlineHookAsync (string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHook>> GetInlineHookAsyncWithHttpInfo (string inlineHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of List&lt;InlineHook&gt;</returns>
        System.Threading.Tasks.Task<List<InlineHook>> ListInlineHooksAsync (string type = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineHook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineHook>>> ListInlineHooksAsyncWithHttpInfo (string type = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        System.Threading.Tasks.Task<InlineHook> UpdateInlineHookAsync (InlineHook body, string inlineHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an inline hook by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineHook>> UpdateInlineHookAsyncWithHttpInfo (InlineHook body, string inlineHookId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class InlineHookApi : IInlineHookApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineHookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InlineHookApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineHookApi"/> class
        /// </summary>
        /// <returns></returns>
        public InlineHookApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineHookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InlineHookApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Activates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        public InlineHook ActivateInlineHook (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = ActivateInlineHookWithHttpInfo(inlineHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Activates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        public ApiResponse< InlineHook > ActivateInlineHookWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->ActivateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Activates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        public async System.Threading.Tasks.Task<InlineHook> ActivateInlineHookAsync (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = await ActivateInlineHookAsyncWithHttpInfo(inlineHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Activates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHook>> ActivateInlineHookAsyncWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->ActivateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineHook</returns>
        public InlineHook CreateInlineHook (InlineHook body)
        {
             ApiResponse<InlineHook> localVarResponse = CreateInlineHookWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        public ApiResponse< InlineHook > CreateInlineHookWithHttpInfo (InlineHook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->CreateInlineHook");

            var localVarPath = "./api/v1/inlineHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineHook</returns>
        public async System.Threading.Tasks.Task<InlineHook> CreateInlineHookAsync (InlineHook body)
        {
             ApiResponse<InlineHook> localVarResponse = await CreateInlineHookAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHook>> CreateInlineHookAsyncWithHttpInfo (InlineHook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->CreateInlineHook");

            var localVarPath = "./api/v1/inlineHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Deactivates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        public InlineHook DeactivateInlineHook (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = DeactivateInlineHookWithHttpInfo(inlineHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deactivates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        public ApiResponse< InlineHook > DeactivateInlineHookWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->DeactivateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Deactivates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        public async System.Threading.Tasks.Task<InlineHook> DeactivateInlineHookAsync (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = await DeactivateInlineHookAsyncWithHttpInfo(inlineHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deactivates the Inline Hook matching the provided id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHook>> DeactivateInlineHookAsyncWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->DeactivateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns></returns>
        public void DeleteInlineHook (string inlineHookId)
        {
             DeleteInlineHookWithHttpInfo(inlineHookId);
        }

        /// <summary>
        ///  Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInlineHookWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->DeleteInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInlineHookAsync (string inlineHookId)
        {
             await DeleteInlineHookAsyncWithHttpInfo(inlineHookId);

        }

        /// <summary>
        ///  Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInlineHookAsyncWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->DeleteInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHookResponse</returns>
        public InlineHookResponse ExecuteInlineHook (InlineHookPayload body, string inlineHookId)
        {
             ApiResponse<InlineHookResponse> localVarResponse = ExecuteInlineHookWithHttpInfo(body, inlineHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHookResponse</returns>
        public ApiResponse< InlineHookResponse > ExecuteInlineHookWithHttpInfo (InlineHookPayload body, string inlineHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->ExecuteInlineHook");
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->ExecuteInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHookResponse)));
        }

        /// <summary>
        ///  Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHookResponse</returns>
        public async System.Threading.Tasks.Task<InlineHookResponse> ExecuteInlineHookAsync (InlineHookPayload body, string inlineHookId)
        {
             ApiResponse<InlineHookResponse> localVarResponse = await ExecuteInlineHookAsyncWithHttpInfo(body, inlineHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHookResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHookResponse>> ExecuteInlineHookAsyncWithHttpInfo (InlineHookPayload body, string inlineHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->ExecuteInlineHook");
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->ExecuteInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHookResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHookResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHookResponse)));
        }

        /// <summary>
        ///  Gets an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        public InlineHook GetInlineHook (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = GetInlineHookWithHttpInfo(inlineHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        public ApiResponse< InlineHook > GetInlineHookWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->GetInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Gets an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        public async System.Threading.Tasks.Task<InlineHook> GetInlineHookAsync (string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = await GetInlineHookAsyncWithHttpInfo(inlineHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHook>> GetInlineHookAsyncWithHttpInfo (string inlineHookId)
        {
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->GetInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>List&lt;InlineHook&gt;</returns>
        public List<InlineHook> ListInlineHooks (string type = null)
        {
             ApiResponse<List<InlineHook>> localVarResponse = ListInlineHooksWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineHook&gt;</returns>
        public ApiResponse< List<InlineHook> > ListInlineHooksWithHttpInfo (string type = null)
        {

            var localVarPath = "./api/v1/inlineHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInlineHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<InlineHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineHook>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of List&lt;InlineHook&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineHook>> ListInlineHooksAsync (string type = null)
        {
             ApiResponse<List<InlineHook>> localVarResponse = await ListInlineHooksAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineHook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineHook>>> ListInlineHooksAsyncWithHttpInfo (string type = null)
        {

            var localVarPath = "./api/v1/inlineHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListInlineHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<InlineHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineHook>)));
        }

        /// <summary>
        ///  Updates an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>InlineHook</returns>
        public InlineHook UpdateInlineHook (InlineHook body, string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = UpdateInlineHookWithHttpInfo(body, inlineHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>ApiResponse of InlineHook</returns>
        public ApiResponse< InlineHook > UpdateInlineHookWithHttpInfo (InlineHook body, string inlineHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->UpdateInlineHook");
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->UpdateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

        /// <summary>
        ///  Updates an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of InlineHook</returns>
        public async System.Threading.Tasks.Task<InlineHook> UpdateInlineHookAsync (InlineHook body, string inlineHookId)
        {
             ApiResponse<InlineHook> localVarResponse = await UpdateInlineHookAsyncWithHttpInfo(body, inlineHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Updates an inline hook by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="inlineHookId"></param>
        /// <returns>Task of ApiResponse (InlineHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineHook>> UpdateInlineHookAsyncWithHttpInfo (InlineHook body, string inlineHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InlineHookApi->UpdateInlineHook");
            // verify the required parameter 'inlineHookId' is set
            if (inlineHookId == null)
                throw new ApiException(400, "Missing required parameter 'inlineHookId' when calling InlineHookApi->UpdateInlineHook");

            var localVarPath = "./api/v1/inlineHooks/{inlineHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inlineHookId != null) localVarPathParams.Add("inlineHookId", this.Configuration.ApiClient.ParameterToString(inlineHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInlineHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineHook)));
        }

    }
}
