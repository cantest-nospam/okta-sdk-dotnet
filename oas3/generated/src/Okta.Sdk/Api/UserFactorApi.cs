/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUserFactorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserFactor</returns>
        UserFactor ActivateFactor (string userId, string factorId, ActivateFactorRequest body = null);

        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> ActivateFactorWithHttpInfo (string userId, string factorId, ActivateFactorRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns></returns>
        void DeleteFactor (string userId, string factorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFactorWithHttpInfo (string userId, string factorId);
        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>UserFactor</returns>
        UserFactor EnrollFactor (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null);

        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> EnrollFactorWithHttpInfo (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>UserFactor</returns>
        UserFactor GetFactor (string userId, string factorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of UserFactor</returns>
        ApiResponse<UserFactor> GetFactorWithHttpInfo (string userId, string factorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>VerifyUserFactorResponse</returns>
        VerifyUserFactorResponse GetFactorTransactionStatus (string userId, string factorId, string transactionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        ApiResponse<VerifyUserFactorResponse> GetFactorTransactionStatusWithHttpInfo (string userId, string factorId, string transactionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        List<UserFactor> ListFactors (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        ApiResponse<List<UserFactor>> ListFactorsWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        List<UserFactor> ListSupportedFactors (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        ApiResponse<List<UserFactor>> ListSupportedFactorsWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;SecurityQuestion&gt;</returns>
        List<SecurityQuestion> ListSupportedSecurityQuestions (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SecurityQuestion&gt;</returns>
        ApiResponse<List<SecurityQuestion>> ListSupportedSecurityQuestionsWithHttpInfo (string userId);
        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>VerifyUserFactorResponse</returns>
        VerifyUserFactorResponse VerifyFactor (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null);

        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        ApiResponse<VerifyUserFactorResponse> VerifyFactorWithHttpInfo (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync (string userId, string factorId, ActivateFactorRequest body = null);

        /// <summary>
        /// Activate Factor
        /// </summary>
        /// <remarks>
        /// The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> ActivateFactorAsyncWithHttpInfo (string userId, string factorId, ActivateFactorRequest body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFactorAsync (string userId, string factorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFactorAsyncWithHttpInfo (string userId, string factorId);
        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null);

        /// <summary>
        /// Enroll Factor
        /// </summary>
        /// <remarks>
        /// Enrolls a user with a supported factor.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> EnrollFactorAsyncWithHttpInfo (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of UserFactor</returns>
        System.Threading.Tasks.Task<UserFactor> GetFactorAsync (string userId, string factorId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a factor for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFactor>> GetFactorAsyncWithHttpInfo (string userId, string factorId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        System.Threading.Tasks.Task<VerifyUserFactorResponse> GetFactorTransactionStatusAsync (string userId, string factorId, string transactionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Polls factors verification transaction for status.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> GetFactorTransactionStatusAsyncWithHttpInfo (string userId, string factorId, string transactionId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        System.Threading.Tasks.Task<List<UserFactor>> ListFactorsAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the enrolled factors for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListFactorsAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        System.Threading.Tasks.Task<List<UserFactor>> ListSupportedFactorsAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all the supported factors that can be enrolled for the specified user
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListSupportedFactorsAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;SecurityQuestion&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityQuestion>> ListSupportedSecurityQuestionsAsync (string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;SecurityQuestion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityQuestion>>> ListSupportedSecurityQuestionsAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        System.Threading.Tasks.Task<VerifyUserFactorResponse> VerifyFactorAsync (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null);

        /// <summary>
        /// Verify MFA Factor
        /// </summary>
        /// <remarks>
        /// Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> VerifyFactorAsyncWithHttpInfo (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UserFactorApi : IUserFactorApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserFactorApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserFactorApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserFactorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserFactorApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserFactor</returns>
        public UserFactor ActivateFactor (string userId, string factorId, ActivateFactorRequest body = null)
        {
             ApiResponse<UserFactor> localVarResponse = ActivateFactorWithHttpInfo(userId, factorId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        public ApiResponse< UserFactor > ActivateFactorWithHttpInfo (string userId, string factorId, ActivateFactorRequest body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ActivateFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ActivateFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> ActivateFactorAsync (string userId, string factorId, ActivateFactorRequest body = null)
        {
             ApiResponse<UserFactor> localVarResponse = await ActivateFactorAsyncWithHttpInfo(userId, factorId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate Factor The &#x60;sms&#x60; and &#x60;token:software:totp&#x60; factor types require activation to complete the enrollment process.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFactor>> ActivateFactorAsyncWithHttpInfo (string userId, string factorId, ActivateFactorRequest body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ActivateFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->ActivateFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        ///  Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns></returns>
        public void DeleteFactor (string userId, string factorId)
        {
             DeleteFactorWithHttpInfo(userId, factorId);
        }

        /// <summary>
        ///  Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFactorWithHttpInfo (string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->DeleteFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->DeleteFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFactorAsync (string userId, string factorId)
        {
             await DeleteFactorAsyncWithHttpInfo(userId, factorId);

        }

        /// <summary>
        ///  Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFactorAsyncWithHttpInfo (string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->DeleteFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->DeleteFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>UserFactor</returns>
        public UserFactor EnrollFactor (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null)
        {
             ApiResponse<UserFactor> localVarResponse = EnrollFactorWithHttpInfo(body, userId, updatePhone, templateId, tokenLifetimeSeconds, activate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>ApiResponse of UserFactor</returns>
        public ApiResponse< UserFactor > EnrollFactorWithHttpInfo (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserFactorApi->EnrollFactor");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->EnrollFactor");

            var localVarPath = "./api/v1/users/{userId}/factors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (updatePhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatePhone", updatePhone)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (tokenLifetimeSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenLifetimeSeconds", tokenLifetimeSeconds)); // query parameter
            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnrollFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> EnrollFactorAsync (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null)
        {
             ApiResponse<UserFactor> localVarResponse = await EnrollFactorAsyncWithHttpInfo(body, userId, updatePhone, templateId, tokenLifetimeSeconds, activate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enroll Factor Enrolls a user with a supported factor.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Factor</param>
        /// <param name="userId"></param>
        /// <param name="updatePhone"> (optional, default to false)</param>
        /// <param name="templateId">id of SMS template (only for SMS factor) (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <param name="activate"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFactor>> EnrollFactorAsyncWithHttpInfo (UserFactor body, string userId, bool? updatePhone = null, string templateId = null, int? tokenLifetimeSeconds = null, bool? activate = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UserFactorApi->EnrollFactor");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->EnrollFactor");

            var localVarPath = "./api/v1/users/{userId}/factors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (updatePhone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updatePhone", updatePhone)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (tokenLifetimeSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenLifetimeSeconds", tokenLifetimeSeconds)); // query parameter
            if (activate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activate", activate)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnrollFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        ///  Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>UserFactor</returns>
        public UserFactor GetFactor (string userId, string factorId)
        {
             ApiResponse<UserFactor> localVarResponse = GetFactorWithHttpInfo(userId, factorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>ApiResponse of UserFactor</returns>
        public ApiResponse< UserFactor > GetFactorWithHttpInfo (string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        ///  Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of UserFactor</returns>
        public async System.Threading.Tasks.Task<UserFactor> GetFactorAsync (string userId, string factorId)
        {
             ApiResponse<UserFactor> localVarResponse = await GetFactorAsyncWithHttpInfo(userId, factorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetches a factor for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <returns>Task of ApiResponse (UserFactor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFactor>> GetFactorAsyncWithHttpInfo (string userId, string factorId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFactor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserFactor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFactor)));
        }

        /// <summary>
        ///  Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>VerifyUserFactorResponse</returns>
        public VerifyUserFactorResponse GetFactorTransactionStatus (string userId, string factorId, string transactionId)
        {
             ApiResponse<VerifyUserFactorResponse> localVarResponse = GetFactorTransactionStatusWithHttpInfo(userId, factorId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        public ApiResponse< VerifyUserFactorResponse > GetFactorTransactionStatusWithHttpInfo (string userId, string factorId, string transactionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactorTransactionStatus");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactorTransactionStatus");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling UserFactorApi->GetFactorTransactionStatus");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactorTransactionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyUserFactorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VerifyUserFactorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyUserFactorResponse)));
        }

        /// <summary>
        ///  Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        public async System.Threading.Tasks.Task<VerifyUserFactorResponse> GetFactorTransactionStatusAsync (string userId, string factorId, string transactionId)
        {
             ApiResponse<VerifyUserFactorResponse> localVarResponse = await GetFactorTransactionStatusAsyncWithHttpInfo(userId, factorId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Polls factors verification transaction for status.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> GetFactorTransactionStatusAsyncWithHttpInfo (string userId, string factorId, string transactionId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->GetFactorTransactionStatus");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->GetFactorTransactionStatus");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling UserFactorApi->GetFactorTransactionStatus");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFactorTransactionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyUserFactorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VerifyUserFactorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyUserFactorResponse)));
        }

        /// <summary>
        ///  Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        public List<UserFactor> ListFactors (string userId)
        {
             ApiResponse<List<UserFactor>> localVarResponse = ListFactorsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        public ApiResponse< List<UserFactor> > ListFactorsWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");

            var localVarPath = "./api/v1/users/{userId}/factors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFactors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserFactor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<UserFactor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserFactor>)));
        }

        /// <summary>
        ///  Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserFactor>> ListFactorsAsync (string userId)
        {
             ApiResponse<List<UserFactor>> localVarResponse = await ListFactorsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates all the enrolled factors for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListFactorsAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListFactors");

            var localVarPath = "./api/v1/users/{userId}/factors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFactors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserFactor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<UserFactor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserFactor>)));
        }

        /// <summary>
        ///  Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;UserFactor&gt;</returns>
        public List<UserFactor> ListSupportedFactors (string userId)
        {
             ApiResponse<List<UserFactor>> localVarResponse = ListSupportedFactorsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;UserFactor&gt;</returns>
        public ApiResponse< List<UserFactor> > ListSupportedFactorsWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");

            var localVarPath = "./api/v1/users/{userId}/factors/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSupportedFactors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserFactor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<UserFactor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserFactor>)));
        }

        /// <summary>
        ///  Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;UserFactor&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserFactor>> ListSupportedFactorsAsync (string userId)
        {
             ApiResponse<List<UserFactor>> localVarResponse = await ListSupportedFactorsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates all the supported factors that can be enrolled for the specified user
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;UserFactor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserFactor>>> ListSupportedFactorsAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedFactors");

            var localVarPath = "./api/v1/users/{userId}/factors/catalog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSupportedFactors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UserFactor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<UserFactor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UserFactor>)));
        }

        /// <summary>
        ///  Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>List&lt;SecurityQuestion&gt;</returns>
        public List<SecurityQuestion> ListSupportedSecurityQuestions (string userId)
        {
             ApiResponse<List<SecurityQuestion>> localVarResponse = ListSupportedSecurityQuestionsWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SecurityQuestion&gt;</returns>
        public ApiResponse< List<SecurityQuestion> > ListSupportedSecurityQuestionsWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");

            var localVarPath = "./api/v1/users/{userId}/factors/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSupportedSecurityQuestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecurityQuestion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SecurityQuestion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecurityQuestion>)));
        }

        /// <summary>
        ///  Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;SecurityQuestion&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityQuestion>> ListSupportedSecurityQuestionsAsync (string userId)
        {
             ApiResponse<List<SecurityQuestion>> localVarResponse = await ListSupportedSecurityQuestionsAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Enumerates all available security questions for a user&#x27;s &#x60;question&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;SecurityQuestion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SecurityQuestion>>> ListSupportedSecurityQuestionsAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->ListSupportedSecurityQuestions");

            var localVarPath = "./api/v1/users/{userId}/factors/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSupportedSecurityQuestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SecurityQuestion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SecurityQuestion>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SecurityQuestion>)));
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>VerifyUserFactorResponse</returns>
        public VerifyUserFactorResponse VerifyFactor (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null)
        {
             ApiResponse<VerifyUserFactorResponse> localVarResponse = VerifyFactorWithHttpInfo(userId, factorId, body, xForwardedFor, userAgent, acceptLanguage, templateId, tokenLifetimeSeconds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>ApiResponse of VerifyUserFactorResponse</returns>
        public ApiResponse< VerifyUserFactorResponse > VerifyFactorWithHttpInfo (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->VerifyFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->VerifyFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (tokenLifetimeSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenLifetimeSeconds", tokenLifetimeSeconds)); // query parameter
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", this.Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (userAgent != null) localVarHeaderParams.Add("User-Agent", this.Configuration.ApiClient.ParameterToString(userAgent)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyUserFactorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VerifyUserFactorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyUserFactorResponse)));
        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>Task of VerifyUserFactorResponse</returns>
        public async System.Threading.Tasks.Task<VerifyUserFactorResponse> VerifyFactorAsync (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null)
        {
             ApiResponse<VerifyUserFactorResponse> localVarResponse = await VerifyFactorAsyncWithHttpInfo(userId, factorId, body, xForwardedFor, userAgent, acceptLanguage, templateId, tokenLifetimeSeconds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify MFA Factor Verifies an OTP for a &#x60;token&#x60; or &#x60;token:hardware&#x60; factor
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="factorId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <param name="userAgent"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="templateId"> (optional)</param>
        /// <param name="tokenLifetimeSeconds"> (optional)</param>
        /// <returns>Task of ApiResponse (VerifyUserFactorResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyUserFactorResponse>> VerifyFactorAsyncWithHttpInfo (string userId, string factorId, VerifyFactorRequest body = null, string xForwardedFor = null, string userAgent = null, string acceptLanguage = null, string templateId = null, int? tokenLifetimeSeconds = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserFactorApi->VerifyFactor");
            // verify the required parameter 'factorId' is set
            if (factorId == null)
                throw new ApiException(400, "Missing required parameter 'factorId' when calling UserFactorApi->VerifyFactor");

            var localVarPath = "./api/v1/users/{userId}/factors/{factorId}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (factorId != null) localVarPathParams.Add("factorId", this.Configuration.ApiClient.ParameterToString(factorId)); // path parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (tokenLifetimeSeconds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenLifetimeSeconds", tokenLifetimeSeconds)); // query parameter
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", this.Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (userAgent != null) localVarHeaderParams.Add("User-Agent", this.Configuration.ApiClient.ParameterToString(userAgent)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyFactor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyUserFactorResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (VerifyUserFactorResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyUserFactorResponse)));
        }

    }
}
