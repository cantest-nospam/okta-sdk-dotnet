/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITrustedOriginApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        TrustedOrigin ActivateOrigin (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        ApiResponse<TrustedOrigin> ActivateOriginWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TrustedOrigin</returns>
        TrustedOrigin CreateOrigin (TrustedOrigin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        ApiResponse<TrustedOrigin> CreateOriginWithHttpInfo (TrustedOrigin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        TrustedOrigin DeactivateOrigin (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        ApiResponse<TrustedOrigin> DeactivateOriginWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns></returns>
        void DeleteOrigin (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOriginWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        TrustedOrigin GetOrigin (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        ApiResponse<TrustedOrigin> GetOriginWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;TrustedOrigin&gt;</returns>
        List<TrustedOrigin> ListOrigins (string q = null, string filter = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrustedOrigin&gt;</returns>
        ApiResponse<List<TrustedOrigin>> ListOriginsWithHttpInfo (string q = null, string filter = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        TrustedOrigin UpdateOrigin (TrustedOrigin body, string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        ApiResponse<TrustedOrigin> UpdateOriginWithHttpInfo (TrustedOrigin body, string trustedOriginId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        System.Threading.Tasks.Task<TrustedOrigin> ActivateOriginAsync (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> ActivateOriginAsyncWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TrustedOrigin</returns>
        System.Threading.Tasks.Task<TrustedOrigin> CreateOriginAsync (TrustedOrigin body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> CreateOriginAsyncWithHttpInfo (TrustedOrigin body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        System.Threading.Tasks.Task<TrustedOrigin> DeactivateOriginAsync (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> DeactivateOriginAsyncWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOriginAsync (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOriginAsyncWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        System.Threading.Tasks.Task<TrustedOrigin> GetOriginAsync (string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> GetOriginAsyncWithHttpInfo (string trustedOriginId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;TrustedOrigin&gt;</returns>
        System.Threading.Tasks.Task<List<TrustedOrigin>> ListOriginsAsync (string q = null, string filter = null, string after = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrustedOrigin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrustedOrigin>>> ListOriginsAsyncWithHttpInfo (string q = null, string filter = null, string after = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        System.Threading.Tasks.Task<TrustedOrigin> UpdateOriginAsync (TrustedOrigin body, string trustedOriginId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> UpdateOriginAsyncWithHttpInfo (TrustedOrigin body, string trustedOriginId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TrustedOriginApi : ITrustedOriginApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrustedOriginApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrustedOriginApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrustedOriginApi"/> class
        /// </summary>
        /// <returns></returns>
        public TrustedOriginApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrustedOriginApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrustedOriginApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        public TrustedOrigin ActivateOrigin (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = ActivateOriginWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        public ApiResponse< TrustedOrigin > ActivateOriginWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->ActivateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        public async System.Threading.Tasks.Task<TrustedOrigin> ActivateOriginAsync (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = await ActivateOriginAsyncWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> ActivateOriginAsyncWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->ActivateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>TrustedOrigin</returns>
        public TrustedOrigin CreateOrigin (TrustedOrigin body)
        {
             ApiResponse<TrustedOrigin> localVarResponse = CreateOriginWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        public ApiResponse< TrustedOrigin > CreateOriginWithHttpInfo (TrustedOrigin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TrustedOriginApi->CreateOrigin");

            var localVarPath = "./api/v1/trustedOrigins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of TrustedOrigin</returns>
        public async System.Threading.Tasks.Task<TrustedOrigin> CreateOriginAsync (TrustedOrigin body)
        {
             ApiResponse<TrustedOrigin> localVarResponse = await CreateOriginAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> CreateOriginAsyncWithHttpInfo (TrustedOrigin body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TrustedOriginApi->CreateOrigin");

            var localVarPath = "./api/v1/trustedOrigins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        public TrustedOrigin DeactivateOrigin (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = DeactivateOriginWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        public ApiResponse< TrustedOrigin > DeactivateOriginWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->DeactivateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        public async System.Threading.Tasks.Task<TrustedOrigin> DeactivateOriginAsync (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = await DeactivateOriginAsyncWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> DeactivateOriginAsyncWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->DeactivateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns></returns>
        public void DeleteOrigin (string trustedOriginId)
        {
             DeleteOriginWithHttpInfo(trustedOriginId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOriginWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->DeleteOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOriginAsync (string trustedOriginId)
        {
             await DeleteOriginAsyncWithHttpInfo(trustedOriginId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOriginAsyncWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->DeleteOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        public TrustedOrigin GetOrigin (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = GetOriginWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        public ApiResponse< TrustedOrigin > GetOriginWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->GetOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        public async System.Threading.Tasks.Task<TrustedOrigin> GetOriginAsync (string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = await GetOriginAsyncWithHttpInfo(trustedOriginId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> GetOriginAsyncWithHttpInfo (string trustedOriginId)
        {
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->GetOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;TrustedOrigin&gt;</returns>
        public List<TrustedOrigin> ListOrigins (string q = null, string filter = null, string after = null, int? limit = null)
        {
             ApiResponse<List<TrustedOrigin>> localVarResponse = ListOriginsWithHttpInfo(q, filter, after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TrustedOrigin&gt;</returns>
        public ApiResponse< List<TrustedOrigin> > ListOriginsWithHttpInfo (string q = null, string filter = null, string after = null, int? limit = null)
        {

            var localVarPath = "./api/v1/trustedOrigins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrigins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrustedOrigin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrustedOrigin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrustedOrigin>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;TrustedOrigin&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrustedOrigin>> ListOriginsAsync (string q = null, string filter = null, string after = null, int? limit = null)
        {
             ApiResponse<List<TrustedOrigin>> localVarResponse = await ListOriginsAsyncWithHttpInfo(q, filter, after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrustedOrigin&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrustedOrigin>>> ListOriginsAsyncWithHttpInfo (string q = null, string filter = null, string after = null, int? limit = null)
        {

            var localVarPath = "./api/v1/trustedOrigins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrigins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrustedOrigin>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrustedOrigin>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrustedOrigin>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>TrustedOrigin</returns>
        public TrustedOrigin UpdateOrigin (TrustedOrigin body, string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = UpdateOriginWithHttpInfo(body, trustedOriginId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>ApiResponse of TrustedOrigin</returns>
        public ApiResponse< TrustedOrigin > UpdateOriginWithHttpInfo (TrustedOrigin body, string trustedOriginId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TrustedOriginApi->UpdateOrigin");
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->UpdateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of TrustedOrigin</returns>
        public async System.Threading.Tasks.Task<TrustedOrigin> UpdateOriginAsync (TrustedOrigin body, string trustedOriginId)
        {
             ApiResponse<TrustedOrigin> localVarResponse = await UpdateOriginAsyncWithHttpInfo(body, trustedOriginId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="trustedOriginId"></param>
        /// <returns>Task of ApiResponse (TrustedOrigin)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedOrigin>> UpdateOriginAsyncWithHttpInfo (TrustedOrigin body, string trustedOriginId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TrustedOriginApi->UpdateOrigin");
            // verify the required parameter 'trustedOriginId' is set
            if (trustedOriginId == null)
                throw new ApiException(400, "Missing required parameter 'trustedOriginId' when calling TrustedOriginApi->UpdateOrigin");

            var localVarPath = "./api/v1/trustedOrigins/{trustedOriginId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trustedOriginId != null) localVarPathParams.Add("trustedOriginId", this.Configuration.ApiClient.ParameterToString(trustedOriginId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrigin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedOrigin>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TrustedOrigin) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedOrigin)));
        }

    }
}
