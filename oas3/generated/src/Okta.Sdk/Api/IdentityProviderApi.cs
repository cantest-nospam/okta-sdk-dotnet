/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IIdentityProviderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider ActivateIdentityProvider (string idpId);

        /// <summary>
        /// Activate Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> ActivateIdentityProviderWithHttpInfo (string idpId);
        /// <summary>
        /// Clone Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey CloneIdentityProviderKey (string idpId, string keyId, string targetIdpId);

        /// <summary>
        /// Clone Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> CloneIdentityProviderKeyWithHttpInfo (string idpId, string keyId, string targetIdpId);
        /// <summary>
        /// Add Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider CreateIdentityProvider (IdentityProvider body);

        /// <summary>
        /// Add Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> CreateIdentityProviderWithHttpInfo (IdentityProvider body);
        /// <summary>
        /// Add X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey CreateIdentityProviderKey (JsonWebKey body);

        /// <summary>
        /// Add X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> CreateIdentityProviderKeyWithHttpInfo (JsonWebKey body);
        /// <summary>
        /// Deactivate Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider DeactivateIdentityProvider (string idpId);

        /// <summary>
        /// Deactivate Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> DeactivateIdentityProviderWithHttpInfo (string idpId);
        /// <summary>
        /// Delete Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns></returns>
        void DeleteIdentityProvider (string idpId);

        /// <summary>
        /// Delete Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityProviderWithHttpInfo (string idpId);
        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns></returns>
        void DeleteIdentityProviderKey (string keyId);

        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIdentityProviderKeyWithHttpInfo (string keyId);
        /// <summary>
        /// Generate Certificate Signing Request for IdP
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Csr</returns>
        Csr GenerateCsrForIdentityProvider (CsrMetadata body, string idpId);

        /// <summary>
        /// Generate Certificate Signing Request for IdP
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GenerateCsrForIdentityProviderWithHttpInfo (CsrMetadata body, string idpId);
        /// <summary>
        /// Generate New IdP Signing Key Credential
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GenerateIdentityProviderSigningKey (string idpId, int? validityYears);

        /// <summary>
        /// Generate New IdP Signing Key Credential
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GenerateIdentityProviderSigningKeyWithHttpInfo (string idpId, int? validityYears);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        Csr GetCsrForIdentityProvider (string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        ApiResponse<Csr> GetCsrForIdentityProviderWithHttpInfo (string idpId, string csrId);
        /// <summary>
        /// Get Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider GetIdentityProvider (string idpId);

        /// <summary>
        /// Get Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> GetIdentityProviderWithHttpInfo (string idpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        IdentityProviderApplicationUser GetIdentityProviderApplicationUser (string idpId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        ApiResponse<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GetIdentityProviderKey (string keyId);

        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GetIdentityProviderKeyWithHttpInfo (string keyId);
        /// <summary>
        /// Get Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey GetIdentityProviderSigningKey (string idpId, string keyId);

        /// <summary>
        /// Get Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> GetIdentityProviderSigningKeyWithHttpInfo (string idpId, string keyId);
        /// <summary>
        /// Link a user to a Social IdP without a transaction
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        IdentityProviderApplicationUser LinkUserToIdentityProvider (UserIdentityProviderLinkRequest body, string idpId, string userId);

        /// <summary>
        /// Link a user to a Social IdP without a transaction
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        ApiResponse<IdentityProviderApplicationUser> LinkUserToIdentityProviderWithHttpInfo (UserIdentityProviderLinkRequest body, string idpId, string userId);
        /// <summary>
        /// List Certificate Signing Requests for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        List<Csr> ListCsrsForIdentityProvider (string idpId);

        /// <summary>
        /// List Certificate Signing Requests for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        ApiResponse<List<Csr>> ListCsrsForIdentityProviderWithHttpInfo (string idpId);
        /// <summary>
        /// Find Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;IdentityProviderApplicationUser&gt;</returns>
        List<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsers (string idpId);

        /// <summary>
        /// Find Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;IdentityProviderApplicationUser&gt;</returns>
        ApiResponse<List<IdentityProviderApplicationUser>> ListIdentityProviderApplicationUsersWithHttpInfo (string idpId);
        /// <summary>
        /// List Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListIdentityProviderKeys (string after = null, int? limit = null);

        /// <summary>
        /// List Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListIdentityProviderKeysWithHttpInfo (string after = null, int? limit = null);
        /// <summary>
        /// List Signing Key Credentials for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        List<JsonWebKey> ListIdentityProviderSigningKeys (string idpId);

        /// <summary>
        /// List Signing Key Credentials for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        ApiResponse<List<JsonWebKey>> ListIdentityProviderSigningKeysWithHttpInfo (string idpId);
        /// <summary>
        /// List Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>List&lt;IdentityProvider&gt;</returns>
        List<IdentityProvider> ListIdentityProviders (string q = null, string after = null, int? limit = null, string type = null);

        /// <summary>
        /// List Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentityProvider&gt;</returns>
        ApiResponse<List<IdentityProvider>> ListIdentityProvidersWithHttpInfo (string q = null, string after = null, int? limit = null, string type = null);
        /// <summary>
        /// Social Authentication Token Operation
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;SocialAuthToken&gt;</returns>
        List<SocialAuthToken> ListSocialAuthTokens (string idpId, string userId);

        /// <summary>
        /// Social Authentication Token Operation
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SocialAuthToken&gt;</returns>
        ApiResponse<List<SocialAuthToken>> ListSocialAuthTokensWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        ApiResponse<JsonWebKey> PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        void RevokeCsrForIdentityProvider (string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeCsrForIdentityProviderWithHttpInfo (string idpId, string csrId);
        /// <summary>
        /// Unlink User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        void UnlinkUserFromIdentityProvider (string idpId, string userId);

        /// <summary>
        /// Unlink User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlinkUserFromIdentityProviderWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// Update Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        IdentityProvider UpdateIdentityProvider (IdentityProvider body, string idpId);

        /// <summary>
        /// Update Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        ApiResponse<IdentityProvider> UpdateIdentityProviderWithHttpInfo (IdentityProvider body, string idpId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> ActivateIdentityProviderAsync (string idpId);

        /// <summary>
        /// Activate Identity Provider
        /// </summary>
        /// <remarks>
        /// Activates an inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> ActivateIdentityProviderAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// Clone Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> CloneIdentityProviderKeyAsync (string idpId, string keyId, string targetIdpId);

        /// <summary>
        /// Clone Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CloneIdentityProviderKeyAsyncWithHttpInfo (string idpId, string keyId, string targetIdpId);
        /// <summary>
        /// Add Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> CreateIdentityProviderAsync (IdentityProvider body);

        /// <summary>
        /// Add Identity Provider
        /// </summary>
        /// <remarks>
        /// Adds a new IdP to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> CreateIdentityProviderAsyncWithHttpInfo (IdentityProvider body);
        /// <summary>
        /// Add X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> CreateIdentityProviderKeyAsync (JsonWebKey body);

        /// <summary>
        /// Add X.509 Certificate Public Key
        /// </summary>
        /// <remarks>
        /// Adds a new X.509 certificate credential to the IdP key store.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CreateIdentityProviderKeyAsyncWithHttpInfo (JsonWebKey body);
        /// <summary>
        /// Deactivate Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> DeactivateIdentityProviderAsync (string idpId);

        /// <summary>
        /// Deactivate Identity Provider
        /// </summary>
        /// <remarks>
        /// Deactivates an active IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> DeactivateIdentityProviderAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// Delete Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIdentityProviderAsync (string idpId);

        /// <summary>
        /// Delete Identity Provider
        /// </summary>
        /// <remarks>
        /// Removes an IdP from your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIdentityProviderKeyAsync (string keyId);

        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderKeyAsyncWithHttpInfo (string keyId);
        /// <summary>
        /// Generate Certificate Signing Request for IdP
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GenerateCsrForIdentityProviderAsync (CsrMetadata body, string idpId);

        /// <summary>
        /// Generate Certificate Signing Request for IdP
        /// </summary>
        /// <remarks>
        /// Generates a new key pair and returns a Certificate Signing Request for it.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GenerateCsrForIdentityProviderAsyncWithHttpInfo (CsrMetadata body, string idpId);
        /// <summary>
        /// Generate New IdP Signing Key Credential
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GenerateIdentityProviderSigningKeyAsync (string idpId, int? validityYears);

        /// <summary>
        /// Generate New IdP Signing Key Credential
        /// </summary>
        /// <remarks>
        /// Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GenerateIdentityProviderSigningKeyAsyncWithHttpInfo (string idpId, int? validityYears);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of Csr</returns>
        System.Threading.Tasks.Task<Csr> GetCsrForIdentityProviderAsync (string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific Certificate Signing Request model by id
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        System.Threading.Tasks.Task<ApiResponse<Csr>> GetCsrForIdentityProviderAsyncWithHttpInfo (string idpId, string csrId);
        /// <summary>
        /// Get Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> GetIdentityProviderAsync (string idpId);

        /// <summary>
        /// Get Identity Provider
        /// </summary>
        /// <remarks>
        /// Fetches an IdP by &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> GetIdentityProviderAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        System.Threading.Tasks.Task<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserAsync (string idpId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetches a linked IdP user by ID
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> GetIdentityProviderApplicationUserAsyncWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderKeyAsync (string keyId);

        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderKeyAsyncWithHttpInfo (string keyId);
        /// <summary>
        /// Get Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderSigningKeyAsync (string idpId, string keyId);

        /// <summary>
        /// Get Signing Key Credential for IdP
        /// </summary>
        /// <remarks>
        /// Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderSigningKeyAsyncWithHttpInfo (string idpId, string keyId);
        /// <summary>
        /// Link a user to a Social IdP without a transaction
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        System.Threading.Tasks.Task<IdentityProviderApplicationUser> LinkUserToIdentityProviderAsync (UserIdentityProviderLinkRequest body, string idpId, string userId);

        /// <summary>
        /// Link a user to a Social IdP without a transaction
        /// </summary>
        /// <remarks>
        /// Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> LinkUserToIdentityProviderAsyncWithHttpInfo (UserIdentityProviderLinkRequest body, string idpId, string userId);
        /// <summary>
        /// List Certificate Signing Requests for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        System.Threading.Tasks.Task<List<Csr>> ListCsrsForIdentityProviderAsync (string idpId);

        /// <summary>
        /// List Certificate Signing Requests for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates Certificate Signing Requests for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Csr>>> ListCsrsForIdentityProviderAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// Find Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;IdentityProviderApplicationUser&gt;</returns>
        System.Threading.Tasks.Task<List<IdentityProviderApplicationUser>> ListIdentityProviderApplicationUsersAsync (string idpId);

        /// <summary>
        /// Find Users
        /// </summary>
        /// <remarks>
        /// Find all the users linked to an identity provider
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProviderApplicationUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentityProviderApplicationUser>>> ListIdentityProviderApplicationUsersAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// List Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> ListIdentityProviderKeysAsync (string after = null, int? limit = null);

        /// <summary>
        /// List Keys
        /// </summary>
        /// <remarks>
        /// Enumerates IdP key credentials.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderKeysAsyncWithHttpInfo (string after = null, int? limit = null);
        /// <summary>
        /// List Signing Key Credentials for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        System.Threading.Tasks.Task<List<JsonWebKey>> ListIdentityProviderSigningKeysAsync (string idpId);

        /// <summary>
        /// List Signing Key Credentials for IdP
        /// </summary>
        /// <remarks>
        /// Enumerates signing key credentials for an IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderSigningKeysAsyncWithHttpInfo (string idpId);
        /// <summary>
        /// List Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>Task of List&lt;IdentityProvider&gt;</returns>
        System.Threading.Tasks.Task<List<IdentityProvider>> ListIdentityProvidersAsync (string q = null, string after = null, int? limit = null, string type = null);

        /// <summary>
        /// List Identity Providers
        /// </summary>
        /// <remarks>
        /// Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProvider&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IdentityProvider>>> ListIdentityProvidersAsyncWithHttpInfo (string q = null, string after = null, int? limit = null, string type = null);
        /// <summary>
        /// Social Authentication Token Operation
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;SocialAuthToken&gt;</returns>
        System.Threading.Tasks.Task<List<SocialAuthToken>> ListSocialAuthTokensAsync (string idpId, string userId);

        /// <summary>
        /// Social Authentication Token Operation
        /// </summary>
        /// <remarks>
        /// Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;SocialAuthToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SocialAuthToken>>> ListSocialAuthTokensAsyncWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeCsrForIdentityProviderAsync (string idpId, string csrId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeCsrForIdentityProviderAsyncWithHttpInfo (string idpId, string csrId);
        /// <summary>
        /// Unlink User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkUserFromIdentityProviderAsync (string idpId, string userId);

        /// <summary>
        /// Unlink User from IdP
        /// </summary>
        /// <remarks>
        /// Removes the link between the Okta user and the IdP user.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkUserFromIdentityProviderAsyncWithHttpInfo (string idpId, string userId);
        /// <summary>
        /// Update Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        System.Threading.Tasks.Task<IdentityProvider> UpdateIdentityProviderAsync (IdentityProvider body, string idpId);

        /// <summary>
        /// Update Identity Provider
        /// </summary>
        /// <remarks>
        /// Updates the configuration for an IdP.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> UpdateIdentityProviderAsyncWithHttpInfo (IdentityProvider body, string idpId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class IdentityProviderApi : IIdentityProviderApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentityProviderApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderApi"/> class
        /// </summary>
        /// <returns></returns>
        public IdentityProviderApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentityProviderApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider ActivateIdentityProvider (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = ActivateIdentityProviderWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public ApiResponse< IdentityProvider > ActivateIdentityProviderWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ActivateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Activate Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> ActivateIdentityProviderAsync (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = await ActivateIdentityProviderAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate Identity Provider Activates an inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> ActivateIdentityProviderAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ActivateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Clone Signing Key Credential for IdP Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey CloneIdentityProviderKey (string idpId, string keyId, string targetIdpId)
        {
             ApiResponse<JsonWebKey> localVarResponse = CloneIdentityProviderKeyWithHttpInfo(idpId, keyId, targetIdpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone Signing Key Credential for IdP Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > CloneIdentityProviderKeyWithHttpInfo (string idpId, string keyId, string targetIdpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            // verify the required parameter 'targetIdpId' is set
            if (targetIdpId == null)
                throw new ApiException(400, "Missing required parameter 'targetIdpId' when calling IdentityProviderApi->CloneIdentityProviderKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/{keyId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            if (targetIdpId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIdpId", targetIdpId)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Clone Signing Key Credential for IdP Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> CloneIdentityProviderKeyAsync (string idpId, string keyId, string targetIdpId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await CloneIdentityProviderKeyAsyncWithHttpInfo(idpId, keyId, targetIdpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone Signing Key Credential for IdP Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <param name="targetIdpId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CloneIdentityProviderKeyAsyncWithHttpInfo (string idpId, string keyId, string targetIdpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->CloneIdentityProviderKey");
            // verify the required parameter 'targetIdpId' is set
            if (targetIdpId == null)
                throw new ApiException(400, "Missing required parameter 'targetIdpId' when calling IdentityProviderApi->CloneIdentityProviderKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/{keyId}/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            if (targetIdpId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetIdpId", targetIdpId)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Add Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider CreateIdentityProvider (IdentityProvider body)
        {
             ApiResponse<IdentityProvider> localVarResponse = CreateIdentityProviderWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public ApiResponse< IdentityProvider > CreateIdentityProviderWithHttpInfo (IdentityProvider body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->CreateIdentityProvider");

            var localVarPath = "./api/v1/idps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Add Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> CreateIdentityProviderAsync (IdentityProvider body)
        {
             ApiResponse<IdentityProvider> localVarResponse = await CreateIdentityProviderAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Identity Provider Adds a new IdP to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> CreateIdentityProviderAsyncWithHttpInfo (IdentityProvider body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->CreateIdentityProvider");

            var localVarPath = "./api/v1/idps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Add X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey CreateIdentityProviderKey (JsonWebKey body)
        {
             ApiResponse<JsonWebKey> localVarResponse = CreateIdentityProviderKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > CreateIdentityProviderKeyWithHttpInfo (JsonWebKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->CreateIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Add X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> CreateIdentityProviderKeyAsync (JsonWebKey body)
        {
             ApiResponse<JsonWebKey> localVarResponse = await CreateIdentityProviderKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add X.509 Certificate Public Key Adds a new X.509 certificate credential to the IdP key store.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> CreateIdentityProviderKeyAsyncWithHttpInfo (JsonWebKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->CreateIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Deactivate Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider DeactivateIdentityProvider (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = DeactivateIdentityProviderWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public ApiResponse< IdentityProvider > DeactivateIdentityProviderWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeactivateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Deactivate Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> DeactivateIdentityProviderAsync (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = await DeactivateIdentityProviderAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate Identity Provider Deactivates an active IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> DeactivateIdentityProviderAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeactivateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Delete Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns></returns>
        public void DeleteIdentityProvider (string idpId)
        {
             DeleteIdentityProviderWithHttpInfo(idpId);
        }

        /// <summary>
        /// Delete Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIdentityProviderWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeleteIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIdentityProviderAsync (string idpId)
        {
             await DeleteIdentityProviderAsyncWithHttpInfo(idpId);

        }

        /// <summary>
        /// Delete Identity Provider Removes an IdP from your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->DeleteIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns></returns>
        public void DeleteIdentityProviderKey (string keyId)
        {
             DeleteIdentityProviderKeyWithHttpInfo(keyId);
        }

        /// <summary>
        /// Delete Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIdentityProviderKeyWithHttpInfo (string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->DeleteIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIdentityProviderKeyAsync (string keyId)
        {
             await DeleteIdentityProviderKeyAsyncWithHttpInfo(keyId);

        }

        /// <summary>
        /// Delete Key Deletes a specific IdP Key Credential by &#x60;kid&#x60; if it is not currently being used by an Active or Inactive IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIdentityProviderKeyAsyncWithHttpInfo (string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->DeleteIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Generate Certificate Signing Request for IdP Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Csr</returns>
        public Csr GenerateCsrForIdentityProvider (CsrMetadata body, string idpId)
        {
             ApiResponse<Csr> localVarResponse = GenerateCsrForIdentityProviderWithHttpInfo(body, idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Certificate Signing Request for IdP Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of Csr</returns>
        public ApiResponse< Csr > GenerateCsrForIdentityProviderWithHttpInfo (CsrMetadata body, string idpId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Generate Certificate Signing Request for IdP Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GenerateCsrForIdentityProviderAsync (CsrMetadata body, string idpId)
        {
             ApiResponse<Csr> localVarResponse = await GenerateCsrForIdentityProviderAsyncWithHttpInfo(body, idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Certificate Signing Request for IdP Generates a new key pair and returns a Certificate Signing Request for it.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Csr>> GenerateCsrForIdentityProviderAsyncWithHttpInfo (CsrMetadata body, string idpId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Generate New IdP Signing Key Credential Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GenerateIdentityProviderSigningKey (string idpId, int? validityYears)
        {
             ApiResponse<JsonWebKey> localVarResponse = GenerateIdentityProviderSigningKeyWithHttpInfo(idpId, validityYears);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate New IdP Signing Key Credential Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > GenerateIdentityProviderSigningKeyWithHttpInfo (string idpId, int? validityYears)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");
            // verify the required parameter 'validityYears' is set
            if (validityYears == null)
                throw new ApiException(400, "Missing required parameter 'validityYears' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (validityYears != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validityYears", validityYears)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateIdentityProviderSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Generate New IdP Signing Key Credential Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GenerateIdentityProviderSigningKeyAsync (string idpId, int? validityYears)
        {
             ApiResponse<JsonWebKey> localVarResponse = await GenerateIdentityProviderSigningKeyAsyncWithHttpInfo(idpId, validityYears);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate New IdP Signing Key Credential Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="validityYears">expiry of the IdP Key Credential</param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GenerateIdentityProviderSigningKeyAsyncWithHttpInfo (string idpId, int? validityYears)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");
            // verify the required parameter 'validityYears' is set
            if (validityYears == null)
                throw new ApiException(400, "Missing required parameter 'validityYears' when calling IdentityProviderApi->GenerateIdentityProviderSigningKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (validityYears != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "validityYears", validityYears)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateIdentityProviderSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Csr</returns>
        public Csr GetCsrForIdentityProvider (string idpId, string csrId)
        {
             ApiResponse<Csr> localVarResponse = GetCsrForIdentityProviderWithHttpInfo(idpId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Csr</returns>
        public ApiResponse< Csr > GetCsrForIdentityProviderWithHttpInfo (string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->GetCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        ///  Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of Csr</returns>
        public async System.Threading.Tasks.Task<Csr> GetCsrForIdentityProviderAsync (string idpId, string csrId)
        {
             ApiResponse<Csr> localVarResponse = await GetCsrForIdentityProviderAsyncWithHttpInfo(idpId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a specific Certificate Signing Request model by id
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (Csr)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Csr>> GetCsrForIdentityProviderAsyncWithHttpInfo (string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->GetCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Csr>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Csr) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Csr)));
        }

        /// <summary>
        /// Get Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider GetIdentityProvider (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = GetIdentityProviderWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public ApiResponse< IdentityProvider > GetIdentityProviderWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Get Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> GetIdentityProviderAsync (string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = await GetIdentityProviderAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Identity Provider Fetches an IdP by &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> GetIdentityProviderAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        ///  Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        public IdentityProviderApplicationUser GetIdentityProviderApplicationUser (string idpId, string userId)
        {
             ApiResponse<IdentityProviderApplicationUser> localVarResponse = GetIdentityProviderApplicationUserWithHttpInfo(idpId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        public ApiResponse< IdentityProviderApplicationUser > GetIdentityProviderApplicationUserWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProviderApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProviderApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProviderApplicationUser)));
        }

        /// <summary>
        ///  Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        public async System.Threading.Tasks.Task<IdentityProviderApplicationUser> GetIdentityProviderApplicationUserAsync (string idpId, string userId)
        {
             ApiResponse<IdentityProviderApplicationUser> localVarResponse = await GetIdentityProviderApplicationUserAsyncWithHttpInfo(idpId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Fetches a linked IdP user by ID
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> GetIdentityProviderApplicationUserAsyncWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->GetIdentityProviderApplicationUser");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderApplicationUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProviderApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProviderApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProviderApplicationUser)));
        }

        /// <summary>
        /// Get Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GetIdentityProviderKey (string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = GetIdentityProviderKeyWithHttpInfo(keyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > GetIdentityProviderKeyWithHttpInfo (string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Get Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderKeyAsync (string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await GetIdentityProviderKeyAsyncWithHttpInfo(keyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Key Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderKeyAsyncWithHttpInfo (string keyId)
        {
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderKey");

            var localVarPath = "./api/v1/idps/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Get Signing Key Credential for IdP Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey GetIdentityProviderSigningKey (string idpId, string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = GetIdentityProviderSigningKeyWithHttpInfo(idpId, keyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Signing Key Credential for IdP Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > GetIdentityProviderSigningKeyWithHttpInfo (string idpId, string keyId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Get Signing Key Credential for IdP Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> GetIdentityProviderSigningKeyAsync (string idpId, string keyId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await GetIdentityProviderSigningKeyAsyncWithHttpInfo(idpId, keyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Signing Key Credential for IdP Gets a specific IdP Key Credential by &#x60;kid&#x60;
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="keyId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> GetIdentityProviderSigningKeyAsyncWithHttpInfo (string idpId, string keyId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");
            // verify the required parameter 'keyId' is set
            if (keyId == null)
                throw new ApiException(400, "Missing required parameter 'keyId' when calling IdentityProviderApi->GetIdentityProviderSigningKey");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys/{keyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (keyId != null) localVarPathParams.Add("keyId", this.Configuration.ApiClient.ParameterToString(keyId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentityProviderSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        /// Link a user to a Social IdP without a transaction Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>IdentityProviderApplicationUser</returns>
        public IdentityProviderApplicationUser LinkUserToIdentityProvider (UserIdentityProviderLinkRequest body, string idpId, string userId)
        {
             ApiResponse<IdentityProviderApplicationUser> localVarResponse = LinkUserToIdentityProviderWithHttpInfo(body, idpId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link a user to a Social IdP without a transaction Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of IdentityProviderApplicationUser</returns>
        public ApiResponse< IdentityProviderApplicationUser > LinkUserToIdentityProviderWithHttpInfo (UserIdentityProviderLinkRequest body, string idpId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->LinkUserToIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkUserToIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProviderApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProviderApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProviderApplicationUser)));
        }

        /// <summary>
        /// Link a user to a Social IdP without a transaction Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of IdentityProviderApplicationUser</returns>
        public async System.Threading.Tasks.Task<IdentityProviderApplicationUser> LinkUserToIdentityProviderAsync (UserIdentityProviderLinkRequest body, string idpId, string userId)
        {
             ApiResponse<IdentityProviderApplicationUser> localVarResponse = await LinkUserToIdentityProviderAsyncWithHttpInfo(body, idpId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link a user to a Social IdP without a transaction Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (IdentityProviderApplicationUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProviderApplicationUser>> LinkUserToIdentityProviderAsyncWithHttpInfo (UserIdentityProviderLinkRequest body, string idpId, string userId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->LinkUserToIdentityProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->LinkUserToIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkUserToIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProviderApplicationUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProviderApplicationUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProviderApplicationUser)));
        }

        /// <summary>
        /// List Certificate Signing Requests for IdP Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;Csr&gt;</returns>
        public List<Csr> ListCsrsForIdentityProvider (string idpId)
        {
             ApiResponse<List<Csr>> localVarResponse = ListCsrsForIdentityProviderWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Certificate Signing Requests for IdP Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;Csr&gt;</returns>
        public ApiResponse< List<Csr> > ListCsrsForIdentityProviderWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListCsrsForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCsrsForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Csr>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Csr>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Csr>)));
        }

        /// <summary>
        /// List Certificate Signing Requests for IdP Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;Csr&gt;</returns>
        public async System.Threading.Tasks.Task<List<Csr>> ListCsrsForIdentityProviderAsync (string idpId)
        {
             ApiResponse<List<Csr>> localVarResponse = await ListCsrsForIdentityProviderAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Certificate Signing Requests for IdP Enumerates Certificate Signing Requests for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;Csr&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Csr>>> ListCsrsForIdentityProviderAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListCsrsForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCsrsForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Csr>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Csr>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Csr>)));
        }

        /// <summary>
        /// Find Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;IdentityProviderApplicationUser&gt;</returns>
        public List<IdentityProviderApplicationUser> ListIdentityProviderApplicationUsers (string idpId)
        {
             ApiResponse<List<IdentityProviderApplicationUser>> localVarResponse = ListIdentityProviderApplicationUsersWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;IdentityProviderApplicationUser&gt;</returns>
        public ApiResponse< List<IdentityProviderApplicationUser> > ListIdentityProviderApplicationUsersWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderApplicationUsers");

            var localVarPath = "./api/v1/idps/{idpId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentityProviderApplicationUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<IdentityProviderApplicationUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentityProviderApplicationUser>)));
        }

        /// <summary>
        /// Find Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;IdentityProviderApplicationUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentityProviderApplicationUser>> ListIdentityProviderApplicationUsersAsync (string idpId)
        {
             ApiResponse<List<IdentityProviderApplicationUser>> localVarResponse = await ListIdentityProviderApplicationUsersAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Users Find all the users linked to an identity provider
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProviderApplicationUser&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentityProviderApplicationUser>>> ListIdentityProviderApplicationUsersAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderApplicationUsers");

            var localVarPath = "./api/v1/idps/{idpId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderApplicationUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentityProviderApplicationUser>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<IdentityProviderApplicationUser>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentityProviderApplicationUser>)));
        }

        /// <summary>
        /// List Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListIdentityProviderKeys (string after = null, int? limit = null)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = ListIdentityProviderKeysWithHttpInfo(after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public ApiResponse< List<JsonWebKey> > ListIdentityProviderKeysWithHttpInfo (string after = null, int? limit = null)
        {

            var localVarPath = "./api/v1/idps/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> ListIdentityProviderKeysAsync (string after = null, int? limit = null)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = await ListIdentityProviderKeysAsyncWithHttpInfo(after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Keys Enumerates IdP key credentials.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Specifies the pagination cursor for the next page of keys (optional)</param>
        /// <param name="limit">Specifies the number of key results in a page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderKeysAsyncWithHttpInfo (string after = null, int? limit = null)
        {

            var localVarPath = "./api/v1/idps/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Signing Key Credentials for IdP Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>List&lt;JsonWebKey&gt;</returns>
        public List<JsonWebKey> ListIdentityProviderSigningKeys (string idpId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = ListIdentityProviderSigningKeysWithHttpInfo(idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Signing Key Credentials for IdP Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of List&lt;JsonWebKey&gt;</returns>
        public ApiResponse< List<JsonWebKey> > ListIdentityProviderSigningKeysWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderSigningKeys");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderSigningKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Signing Key Credentials for IdP Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of List&lt;JsonWebKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<JsonWebKey>> ListIdentityProviderSigningKeysAsync (string idpId)
        {
             ApiResponse<List<JsonWebKey>> localVarResponse = await ListIdentityProviderSigningKeysAsyncWithHttpInfo(idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Signing Key Credentials for IdP Enumerates signing key credentials for an IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (List&lt;JsonWebKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JsonWebKey>>> ListIdentityProviderSigningKeysAsyncWithHttpInfo (string idpId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListIdentityProviderSigningKeys");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviderSigningKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JsonWebKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<JsonWebKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JsonWebKey>)));
        }

        /// <summary>
        /// List Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>List&lt;IdentityProvider&gt;</returns>
        public List<IdentityProvider> ListIdentityProviders (string q = null, string after = null, int? limit = null, string type = null)
        {
             ApiResponse<List<IdentityProvider>> localVarResponse = ListIdentityProvidersWithHttpInfo(q, after, limit, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>ApiResponse of List&lt;IdentityProvider&gt;</returns>
        public ApiResponse< List<IdentityProvider> > ListIdentityProvidersWithHttpInfo (string q = null, string after = null, int? limit = null, string type = null)
        {

            var localVarPath = "./api/v1/idps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentityProvider>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<IdentityProvider>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentityProvider>)));
        }

        /// <summary>
        /// List Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>Task of List&lt;IdentityProvider&gt;</returns>
        public async System.Threading.Tasks.Task<List<IdentityProvider>> ListIdentityProvidersAsync (string q = null, string after = null, int? limit = null, string type = null)
        {
             ApiResponse<List<IdentityProvider>> localVarResponse = await ListIdentityProvidersAsyncWithHttpInfo(q, after, limit, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Identity Providers Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Searches the name property of IdPs for matching value (optional)</param>
        /// <param name="after">Specifies the pagination cursor for the next page of IdPs (optional)</param>
        /// <param name="limit">Specifies the number of IdP results in a page (optional)</param>
        /// <param name="type">Filters IdPs by type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IdentityProvider&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IdentityProvider>>> ListIdentityProvidersAsyncWithHttpInfo (string q = null, string after = null, int? limit = null, string type = null)
        {

            var localVarPath = "./api/v1/idps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIdentityProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IdentityProvider>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<IdentityProvider>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IdentityProvider>)));
        }

        /// <summary>
        /// Social Authentication Token Operation Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>List&lt;SocialAuthToken&gt;</returns>
        public List<SocialAuthToken> ListSocialAuthTokens (string idpId, string userId)
        {
             ApiResponse<List<SocialAuthToken>> localVarResponse = ListSocialAuthTokensWithHttpInfo(idpId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Social Authentication Token Operation Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of List&lt;SocialAuthToken&gt;</returns>
        public ApiResponse< List<SocialAuthToken> > ListSocialAuthTokensWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListSocialAuthTokens");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->ListSocialAuthTokens");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}/credentials/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSocialAuthTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SocialAuthToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SocialAuthToken>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SocialAuthToken>)));
        }

        /// <summary>
        /// Social Authentication Token Operation Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of List&lt;SocialAuthToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<SocialAuthToken>> ListSocialAuthTokensAsync (string idpId, string userId)
        {
             ApiResponse<List<SocialAuthToken>> localVarResponse = await ListSocialAuthTokensAsyncWithHttpInfo(idpId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Social Authentication Token Operation Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (List&lt;SocialAuthToken&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SocialAuthToken>>> ListSocialAuthTokensAsyncWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->ListSocialAuthTokens");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->ListSocialAuthTokens");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}/credentials/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSocialAuthTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SocialAuthToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<SocialAuthToken>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SocialAuthToken>)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrForIdentityProviderWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrForIdentityProviderAsyncWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrForIdentityProviderWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrForIdentityProviderAsyncWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrForIdentityProviderWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrForIdentityProviderAsyncWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>JsonWebKey</returns>
        public JsonWebKey PublishCsrForIdentityProvider (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = PublishCsrForIdentityProviderWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of JsonWebKey</returns>
        public ApiResponse< JsonWebKey > PublishCsrForIdentityProviderWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of JsonWebKey</returns>
        public async System.Threading.Tasks.Task<JsonWebKey> PublishCsrForIdentityProviderAsync (Object body, string idpId, string csrId)
        {
             ApiResponse<JsonWebKey> localVarResponse = await PublishCsrForIdentityProviderAsyncWithHttpInfo(body, idpId, csrId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse (JsonWebKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonWebKey>> PublishCsrForIdentityProviderAsyncWithHttpInfo (Object body, string idpId, string csrId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->PublishCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream", 
                "application/x-x509-ca-cert", 
                "application/pkix-cert", 
                "application/x-pem-file"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonWebKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JsonWebKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonWebKey)));
        }

        /// <summary>
        ///  Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns></returns>
        public void RevokeCsrForIdentityProvider (string idpId, string csrId)
        {
             RevokeCsrForIdentityProviderWithHttpInfo(idpId, csrId);
        }

        /// <summary>
        ///  Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RevokeCsrForIdentityProviderWithHttpInfo (string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeCsrForIdentityProviderAsync (string idpId, string csrId)
        {
             await RevokeCsrForIdentityProviderAsyncWithHttpInfo(idpId, csrId);

        }

        /// <summary>
        ///  Revoke a Certificate Signing Request and delete the key pair from the IdP
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="csrId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RevokeCsrForIdentityProviderAsyncWithHttpInfo (string idpId, string csrId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");
            // verify the required parameter 'csrId' is set
            if (csrId == null)
                throw new ApiException(400, "Missing required parameter 'csrId' when calling IdentityProviderApi->RevokeCsrForIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/credentials/csrs/{csrId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (csrId != null) localVarPathParams.Add("csrId", this.Configuration.ApiClient.ParameterToString(csrId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCsrForIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlink User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public void UnlinkUserFromIdentityProvider (string idpId, string userId)
        {
             UnlinkUserFromIdentityProviderWithHttpInfo(idpId, userId);
        }

        /// <summary>
        /// Unlink User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnlinkUserFromIdentityProviderWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkUserFromIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlink User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkUserFromIdentityProviderAsync (string idpId, string userId)
        {
             await UnlinkUserFromIdentityProviderAsyncWithHttpInfo(idpId, userId);

        }

        /// <summary>
        /// Unlink User from IdP Removes the link between the Okta user and the IdP user.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idpId"></param>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkUserFromIdentityProviderAsyncWithHttpInfo (string idpId, string userId)
        {
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling IdentityProviderApi->UnlinkUserFromIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlinkUserFromIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>IdentityProvider</returns>
        public IdentityProvider UpdateIdentityProvider (IdentityProvider body, string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = UpdateIdentityProviderWithHttpInfo(body, idpId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>ApiResponse of IdentityProvider</returns>
        public ApiResponse< IdentityProvider > UpdateIdentityProviderWithHttpInfo (IdentityProvider body, string idpId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->UpdateIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UpdateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

        /// <summary>
        /// Update Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of IdentityProvider</returns>
        public async System.Threading.Tasks.Task<IdentityProvider> UpdateIdentityProviderAsync (IdentityProvider body, string idpId)
        {
             ApiResponse<IdentityProvider> localVarResponse = await UpdateIdentityProviderAsyncWithHttpInfo(body, idpId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Identity Provider Updates the configuration for an IdP.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idpId"></param>
        /// <returns>Task of ApiResponse (IdentityProvider)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityProvider>> UpdateIdentityProviderAsyncWithHttpInfo (IdentityProvider body, string idpId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling IdentityProviderApi->UpdateIdentityProvider");
            // verify the required parameter 'idpId' is set
            if (idpId == null)
                throw new ApiException(400, "Missing required parameter 'idpId' when calling IdentityProviderApi->UpdateIdentityProvider");

            var localVarPath = "./api/v1/idps/{idpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idpId != null) localVarPathParams.Add("idpId", this.Configuration.ApiClient.ParameterToString(idpId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIdentityProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityProvider>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdentityProvider) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityProvider)));
        }

    }
}
