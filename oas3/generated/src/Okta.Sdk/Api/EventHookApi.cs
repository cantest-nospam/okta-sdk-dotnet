/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IEventHookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        EventHook ActivateEventHook (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> ActivateEventHookWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EventHook</returns>
        EventHook CreateEventHook (EventHook body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> CreateEventHookWithHttpInfo (EventHook body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        EventHook DeactivateEventHook (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> DeactivateEventHookWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns></returns>
        void DeleteEventHook (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventHookWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        EventHook GetEventHook (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> GetEventHookWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventHook&gt;</returns>
        List<EventHook> ListEventHooks ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventHook&gt;</returns>
        ApiResponse<List<EventHook>> ListEventHooksWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        EventHook UpdateEventHook (EventHook body, string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> UpdateEventHookWithHttpInfo (EventHook body, string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        EventHook VerifyEventHook (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        ApiResponse<EventHook> VerifyEventHookWithHttpInfo (string eventHookId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> ActivateEventHookAsync (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> ActivateEventHookAsyncWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> CreateEventHookAsync (EventHook body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> CreateEventHookAsyncWithHttpInfo (EventHook body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> DeactivateEventHookAsync (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> DeactivateEventHookAsyncWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventHookAsync (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventHookAsyncWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> GetEventHookAsync (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> GetEventHookAsyncWithHttpInfo (string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventHook&gt;</returns>
        System.Threading.Tasks.Task<List<EventHook>> ListEventHooksAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventHook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventHook>>> ListEventHooksAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> UpdateEventHookAsync (EventHook body, string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> UpdateEventHookAsyncWithHttpInfo (EventHook body, string eventHookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        System.Threading.Tasks.Task<EventHook> VerifyEventHookAsync (string eventHookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Success
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHook>> VerifyEventHookAsyncWithHttpInfo (string eventHookId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class EventHookApi : IEventHookApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventHookApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHookApi"/> class
        /// </summary>
        /// <returns></returns>
        public EventHookApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventHookApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        public EventHook ActivateEventHook (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = ActivateEventHookWithHttpInfo(eventHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > ActivateEventHookWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->ActivateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> ActivateEventHookAsync (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = await ActivateEventHookAsyncWithHttpInfo(eventHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> ActivateEventHookAsyncWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->ActivateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>EventHook</returns>
        public EventHook CreateEventHook (EventHook body)
        {
             ApiResponse<EventHook> localVarResponse = CreateEventHookWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > CreateEventHookWithHttpInfo (EventHook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EventHookApi->CreateEventHook");

            var localVarPath = "./api/v1/eventHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> CreateEventHookAsync (EventHook body)
        {
             ApiResponse<EventHook> localVarResponse = await CreateEventHookAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> CreateEventHookAsyncWithHttpInfo (EventHook body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EventHookApi->CreateEventHook");

            var localVarPath = "./api/v1/eventHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        public EventHook DeactivateEventHook (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = DeactivateEventHookWithHttpInfo(eventHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > DeactivateEventHookWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->DeactivateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> DeactivateEventHookAsync (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = await DeactivateEventHookAsyncWithHttpInfo(eventHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> DeactivateEventHookAsyncWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->DeactivateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeactivateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns></returns>
        public void DeleteEventHook (string eventHookId)
        {
             DeleteEventHookWithHttpInfo(eventHookId);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEventHookWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->DeleteEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventHookAsync (string eventHookId)
        {
             await DeleteEventHookAsyncWithHttpInfo(eventHookId);

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventHookAsyncWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->DeleteEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        public EventHook GetEventHook (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = GetEventHookWithHttpInfo(eventHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > GetEventHookWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->GetEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> GetEventHookAsync (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = await GetEventHookAsyncWithHttpInfo(eventHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> GetEventHookAsyncWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->GetEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventHook&gt;</returns>
        public List<EventHook> ListEventHooks ()
        {
             ApiResponse<List<EventHook>> localVarResponse = ListEventHooksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventHook&gt;</returns>
        public ApiResponse< List<EventHook> > ListEventHooksWithHttpInfo ()
        {

            var localVarPath = "./api/v1/eventHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EventHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventHook>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventHook&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventHook>> ListEventHooksAsync ()
        {
             ApiResponse<List<EventHook>> localVarResponse = await ListEventHooksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventHook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventHook>>> ListEventHooksAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/eventHooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEventHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<EventHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventHook>)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        public EventHook UpdateEventHook (EventHook body, string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = UpdateEventHookWithHttpInfo(body, eventHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > UpdateEventHookWithHttpInfo (EventHook body, string eventHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EventHookApi->UpdateEventHook");
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->UpdateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> UpdateEventHookAsync (EventHook body, string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = await UpdateEventHookAsyncWithHttpInfo(body, eventHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> UpdateEventHookAsyncWithHttpInfo (EventHook body, string eventHookId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EventHookApi->UpdateEventHook");
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->UpdateEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>EventHook</returns>
        public EventHook VerifyEventHook (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = VerifyEventHookWithHttpInfo(eventHookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>ApiResponse of EventHook</returns>
        public ApiResponse< EventHook > VerifyEventHookWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->VerifyEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of EventHook</returns>
        public async System.Threading.Tasks.Task<EventHook> VerifyEventHookAsync (string eventHookId)
        {
             ApiResponse<EventHook> localVarResponse = await VerifyEventHookAsyncWithHttpInfo(eventHookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Success
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventHookId"></param>
        /// <returns>Task of ApiResponse (EventHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventHook>> VerifyEventHookAsyncWithHttpInfo (string eventHookId)
        {
            // verify the required parameter 'eventHookId' is set
            if (eventHookId == null)
                throw new ApiException(400, "Missing required parameter 'eventHookId' when calling EventHookApi->VerifyEventHook");

            var localVarPath = "./api/v1/eventHooks/{eventHookId}/lifecycle/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventHookId != null) localVarPathParams.Add("eventHookId", this.Configuration.ApiClient.ParameterToString(eventHookId)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyEventHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EventHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventHook)));
        }

    }
}
