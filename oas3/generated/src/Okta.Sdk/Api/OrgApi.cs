/* 
 * Okta API
 *
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.9.2
 * Contact: devex-public@okta.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Okta.Sdk.Client;
using Okta.Sdk.Model;

namespace Okta.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IOrgApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        OrgOktaSupportSettingsObj ExtendOktaSupport ();

        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        ApiResponse<OrgOktaSupportSettingsObj> ExtendOktaSupportWithHttpInfo ();
        /// <summary>
        /// Get Okta Communication Settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Communication Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        OrgOktaCommunicationSetting GetOktaCommunicationSettings ();

        /// <summary>
        /// Get Okta Communication Settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Communication Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        ApiResponse<OrgOktaCommunicationSetting> GetOktaCommunicationSettingsWithHttpInfo ();
        /// <summary>
        /// Get org contact types
        /// </summary>
        /// <remarks>
        /// Gets Contact Types of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrgContactTypeObj&gt;</returns>
        List<OrgContactTypeObj> GetOrgContactTypes ();

        /// <summary>
        /// Get org contact types
        /// </summary>
        /// <remarks>
        /// Gets Contact Types of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrgContactTypeObj&gt;</returns>
        ApiResponse<List<OrgContactTypeObj>> GetOrgContactTypesWithHttpInfo ();
        /// <summary>
        /// Get org contact user
        /// </summary>
        /// <remarks>
        /// Retrieves the URL of the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>OrgContactUser</returns>
        OrgContactUser GetOrgContactUser (string contactType);

        /// <summary>
        /// Get org contact user
        /// </summary>
        /// <remarks>
        /// Retrieves the URL of the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>ApiResponse of OrgContactUser</returns>
        ApiResponse<OrgContactUser> GetOrgContactUserWithHttpInfo (string contactType);
        /// <summary>
        /// Get Okta Support settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Support Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        OrgOktaSupportSettingsObj GetOrgOktaSupportSettings ();

        /// <summary>
        /// Get Okta Support settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Support Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        ApiResponse<OrgOktaSupportSettingsObj> GetOrgOktaSupportSettingsWithHttpInfo ();
        /// <summary>
        /// Get org preferences
        /// </summary>
        /// <remarks>
        /// Gets preferences of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        OrgPreferences GetOrgPreferences ();

        /// <summary>
        /// Get org preferences
        /// </summary>
        /// <remarks>
        /// Gets preferences of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        ApiResponse<OrgPreferences> GetOrgPreferencesWithHttpInfo ();
        /// <summary>
        /// Get org settings
        /// </summary>
        /// <remarks>
        /// Get settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgSetting</returns>
        OrgSetting GetOrgSettings ();

        /// <summary>
        /// Get org settings
        /// </summary>
        /// <remarks>
        /// Get settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgSetting</returns>
        ApiResponse<OrgSetting> GetOrgSettingsWithHttpInfo ();
        /// <summary>
        /// Grant Okta Support
        /// </summary>
        /// <remarks>
        /// Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        OrgOktaSupportSettingsObj GrantOktaSupport ();

        /// <summary>
        /// Grant Okta Support
        /// </summary>
        /// <remarks>
        /// Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        ApiResponse<OrgOktaSupportSettingsObj> GrantOktaSupportWithHttpInfo ();
        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Hide the Okta UI footer for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        OrgPreferences HideOktaUIFooter ();

        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Hide the Okta UI footer for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        ApiResponse<OrgPreferences> HideOktaUIFooterWithHttpInfo ();
        /// <summary>
        /// Opt in all users to Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts in all users of this org to Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        OrgOktaCommunicationSetting OptInUsersToOktaCommunicationEmails ();

        /// <summary>
        /// Opt in all users to Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts in all users of this org to Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        ApiResponse<OrgOktaCommunicationSetting> OptInUsersToOktaCommunicationEmailsWithHttpInfo ();
        /// <summary>
        /// Opt out all users from Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts out all users of this org from Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        OrgOktaCommunicationSetting OptOutUsersFromOktaCommunicationEmails ();

        /// <summary>
        /// Opt out all users from Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts out all users of this org from Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        ApiResponse<OrgOktaCommunicationSetting> OptOutUsersFromOktaCommunicationEmailsWithHttpInfo ();
        /// <summary>
        /// Partial update Org Setting
        /// </summary>
        /// <remarks>
        /// Partial update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrgSetting</returns>
        OrgSetting PartialUpdateOrgSetting (OrgSetting body = null);

        /// <summary>
        /// Partial update Org Setting
        /// </summary>
        /// <remarks>
        /// Partial update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrgSetting</returns>
        ApiResponse<OrgSetting> PartialUpdateOrgSettingWithHttpInfo (OrgSetting body = null);
        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Revokes Okta Support access to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        OrgOktaSupportSettingsObj RevokeOktaSupport ();

        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Revokes Okta Support access to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        ApiResponse<OrgOktaSupportSettingsObj> RevokeOktaSupportWithHttpInfo ();
        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Makes the Okta UI footer visible for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        OrgPreferences ShowOktaUIFooter ();

        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Makes the Okta UI footer visible for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        ApiResponse<OrgPreferences> ShowOktaUIFooterWithHttpInfo ();
        /// <summary>
        /// Update org contact user
        /// </summary>
        /// <remarks>
        /// Updates the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>OrgContactUser</returns>
        OrgContactUser UpdateOrgContactUser (OrgContactUser body, string contactType);

        /// <summary>
        /// Update org contact user
        /// </summary>
        /// <remarks>
        /// Updates the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>ApiResponse of OrgContactUser</returns>
        ApiResponse<OrgContactUser> UpdateOrgContactUserWithHttpInfo (OrgContactUser body, string contactType);
        /// <summary>
        /// Update org logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void UpdateOrgLogo ();

        /// <summary>
        /// Update org logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrgLogoWithHttpInfo ();
        /// <summary>
        /// Update Org setting
        /// </summary>
        /// <remarks>
        /// Update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OrgSetting</returns>
        OrgSetting UpdateOrgSetting (OrgSetting body);

        /// <summary>
        /// Update Org setting
        /// </summary>
        /// <remarks>
        /// Update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OrgSetting</returns>
        ApiResponse<OrgSetting> UpdateOrgSettingWithHttpInfo (OrgSetting body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> ExtendOktaSupportAsync ();

        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> ExtendOktaSupportAsyncWithHttpInfo ();
        /// <summary>
        /// Get Okta Communication Settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Communication Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        System.Threading.Tasks.Task<OrgOktaCommunicationSetting> GetOktaCommunicationSettingsAsync ();

        /// <summary>
        /// Get Okta Communication Settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Communication Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> GetOktaCommunicationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get org contact types
        /// </summary>
        /// <remarks>
        /// Gets Contact Types of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrgContactTypeObj&gt;</returns>
        System.Threading.Tasks.Task<List<OrgContactTypeObj>> GetOrgContactTypesAsync ();

        /// <summary>
        /// Get org contact types
        /// </summary>
        /// <remarks>
        /// Gets Contact Types of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrgContactTypeObj&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrgContactTypeObj>>> GetOrgContactTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Get org contact user
        /// </summary>
        /// <remarks>
        /// Retrieves the URL of the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>Task of OrgContactUser</returns>
        System.Threading.Tasks.Task<OrgContactUser> GetOrgContactUserAsync (string contactType);

        /// <summary>
        /// Get org contact user
        /// </summary>
        /// <remarks>
        /// Retrieves the URL of the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>Task of ApiResponse (OrgContactUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgContactUser>> GetOrgContactUserAsyncWithHttpInfo (string contactType);
        /// <summary>
        /// Get Okta Support settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Support Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> GetOrgOktaSupportSettingsAsync ();

        /// <summary>
        /// Get Okta Support settings
        /// </summary>
        /// <remarks>
        /// Gets Okta Support Settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> GetOrgOktaSupportSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get org preferences
        /// </summary>
        /// <remarks>
        /// Gets preferences of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        System.Threading.Tasks.Task<OrgPreferences> GetOrgPreferencesAsync ();

        /// <summary>
        /// Get org preferences
        /// </summary>
        /// <remarks>
        /// Gets preferences of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> GetOrgPreferencesAsyncWithHttpInfo ();
        /// <summary>
        /// Get org settings
        /// </summary>
        /// <remarks>
        /// Get settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgSetting</returns>
        System.Threading.Tasks.Task<OrgSetting> GetOrgSettingsAsync ();

        /// <summary>
        /// Get org settings
        /// </summary>
        /// <remarks>
        /// Get settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgSetting>> GetOrgSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Grant Okta Support
        /// </summary>
        /// <remarks>
        /// Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> GrantOktaSupportAsync ();

        /// <summary>
        /// Grant Okta Support
        /// </summary>
        /// <remarks>
        /// Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> GrantOktaSupportAsyncWithHttpInfo ();
        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Hide the Okta UI footer for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        System.Threading.Tasks.Task<OrgPreferences> HideOktaUIFooterAsync ();

        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Hide the Okta UI footer for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> HideOktaUIFooterAsyncWithHttpInfo ();
        /// <summary>
        /// Opt in all users to Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts in all users of this org to Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        System.Threading.Tasks.Task<OrgOktaCommunicationSetting> OptInUsersToOktaCommunicationEmailsAsync ();

        /// <summary>
        /// Opt in all users to Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts in all users of this org to Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> OptInUsersToOktaCommunicationEmailsAsyncWithHttpInfo ();
        /// <summary>
        /// Opt out all users from Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts out all users of this org from Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        System.Threading.Tasks.Task<OrgOktaCommunicationSetting> OptOutUsersFromOktaCommunicationEmailsAsync ();

        /// <summary>
        /// Opt out all users from Okta Communication emails
        /// </summary>
        /// <remarks>
        /// Opts out all users of this org from Okta Communication emails.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> OptOutUsersFromOktaCommunicationEmailsAsyncWithHttpInfo ();
        /// <summary>
        /// Partial update Org Setting
        /// </summary>
        /// <remarks>
        /// Partial update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrgSetting</returns>
        System.Threading.Tasks.Task<OrgSetting> PartialUpdateOrgSettingAsync (OrgSetting body = null);

        /// <summary>
        /// Partial update Org Setting
        /// </summary>
        /// <remarks>
        /// Partial update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgSetting>> PartialUpdateOrgSettingAsyncWithHttpInfo (OrgSetting body = null);
        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Revokes Okta Support access to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> RevokeOktaSupportAsync ();

        /// <summary>
        /// Extend Okta Support
        /// </summary>
        /// <remarks>
        /// Revokes Okta Support access to your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> RevokeOktaSupportAsyncWithHttpInfo ();
        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Makes the Okta UI footer visible for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        System.Threading.Tasks.Task<OrgPreferences> ShowOktaUIFooterAsync ();

        /// <summary>
        /// Show Okta UI Footer
        /// </summary>
        /// <remarks>
        /// Makes the Okta UI footer visible for all end users of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> ShowOktaUIFooterAsyncWithHttpInfo ();
        /// <summary>
        /// Update org contact user
        /// </summary>
        /// <remarks>
        /// Updates the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>Task of OrgContactUser</returns>
        System.Threading.Tasks.Task<OrgContactUser> UpdateOrgContactUserAsync (OrgContactUser body, string contactType);

        /// <summary>
        /// Update org contact user
        /// </summary>
        /// <remarks>
        /// Updates the User associated with the specified Contact Type.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>Task of ApiResponse (OrgContactUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgContactUser>> UpdateOrgContactUserAsyncWithHttpInfo (OrgContactUser body, string contactType);
        /// <summary>
        /// Update org logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrgLogoAsync ();

        /// <summary>
        /// Update org logo
        /// </summary>
        /// <remarks>
        /// Updates the logo for your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrgLogoAsyncWithHttpInfo ();
        /// <summary>
        /// Update Org setting
        /// </summary>
        /// <remarks>
        /// Update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OrgSetting</returns>
        System.Threading.Tasks.Task<OrgSetting> UpdateOrgSettingAsync (OrgSetting body);

        /// <summary>
        /// Update Org setting
        /// </summary>
        /// <remarks>
        /// Update settings of your organization.
        /// </remarks>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrgSetting>> UpdateOrgSettingAsyncWithHttpInfo (OrgSetting body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class OrgApi : IOrgApi
    {
        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrgApi(String basePath)
        {
            this.Configuration = new Okta.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrgApi()
        {
            this.Configuration = Okta.Sdk.Client.Configuration.Default;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrgApi(Okta.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Okta.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Okta.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Extend Okta Support Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        public OrgOktaSupportSettingsObj ExtendOktaSupport ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = ExtendOktaSupportWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extend Okta Support Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        public ApiResponse< OrgOktaSupportSettingsObj > ExtendOktaSupportWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/extend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Extend Okta Support Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        public async System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> ExtendOktaSupportAsync ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = await ExtendOktaSupportAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extend Okta Support Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> ExtendOktaSupportAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/extend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Get Okta Communication Settings Gets Okta Communication Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        public OrgOktaCommunicationSetting GetOktaCommunicationSettings ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = GetOktaCommunicationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Okta Communication Settings Gets Okta Communication Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        public ApiResponse< OrgOktaCommunicationSetting > GetOktaCommunicationSettingsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOktaCommunicationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Get Okta Communication Settings Gets Okta Communication Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        public async System.Threading.Tasks.Task<OrgOktaCommunicationSetting> GetOktaCommunicationSettingsAsync ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = await GetOktaCommunicationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Okta Communication Settings Gets Okta Communication Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> GetOktaCommunicationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOktaCommunicationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Get org contact types Gets Contact Types of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrgContactTypeObj&gt;</returns>
        public List<OrgContactTypeObj> GetOrgContactTypes ()
        {
             ApiResponse<List<OrgContactTypeObj>> localVarResponse = GetOrgContactTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get org contact types Gets Contact Types of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrgContactTypeObj&gt;</returns>
        public ApiResponse< List<OrgContactTypeObj> > GetOrgContactTypesWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgContactTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgContactTypeObj>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OrgContactTypeObj>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgContactTypeObj>)));
        }

        /// <summary>
        /// Get org contact types Gets Contact Types of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrgContactTypeObj&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrgContactTypeObj>> GetOrgContactTypesAsync ()
        {
             ApiResponse<List<OrgContactTypeObj>> localVarResponse = await GetOrgContactTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get org contact types Gets Contact Types of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrgContactTypeObj&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrgContactTypeObj>>> GetOrgContactTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgContactTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrgContactTypeObj>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<OrgContactTypeObj>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrgContactTypeObj>)));
        }

        /// <summary>
        /// Get org contact user Retrieves the URL of the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>OrgContactUser</returns>
        public OrgContactUser GetOrgContactUser (string contactType)
        {
             ApiResponse<OrgContactUser> localVarResponse = GetOrgContactUserWithHttpInfo(contactType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get org contact user Retrieves the URL of the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>ApiResponse of OrgContactUser</returns>
        public ApiResponse< OrgContactUser > GetOrgContactUserWithHttpInfo (string contactType)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling OrgApi->GetOrgContactUser");

            var localVarPath = "./api/v1/org/contacts/{contactType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarPathParams.Add("contactType", this.Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgContactUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgContactUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgContactUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgContactUser)));
        }

        /// <summary>
        /// Get org contact user Retrieves the URL of the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>Task of OrgContactUser</returns>
        public async System.Threading.Tasks.Task<OrgContactUser> GetOrgContactUserAsync (string contactType)
        {
             ApiResponse<OrgContactUser> localVarResponse = await GetOrgContactUserAsyncWithHttpInfo(contactType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get org contact user Retrieves the URL of the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactType"></param>
        /// <returns>Task of ApiResponse (OrgContactUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgContactUser>> GetOrgContactUserAsyncWithHttpInfo (string contactType)
        {
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling OrgApi->GetOrgContactUser");

            var localVarPath = "./api/v1/org/contacts/{contactType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarPathParams.Add("contactType", this.Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgContactUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgContactUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgContactUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgContactUser)));
        }

        /// <summary>
        /// Get Okta Support settings Gets Okta Support Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        public OrgOktaSupportSettingsObj GetOrgOktaSupportSettings ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = GetOrgOktaSupportSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Okta Support settings Gets Okta Support Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        public ApiResponse< OrgOktaSupportSettingsObj > GetOrgOktaSupportSettingsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgOktaSupportSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Get Okta Support settings Gets Okta Support Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        public async System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> GetOrgOktaSupportSettingsAsync ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = await GetOrgOktaSupportSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Okta Support settings Gets Okta Support Settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> GetOrgOktaSupportSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgOktaSupportSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Get org preferences Gets preferences of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        public OrgPreferences GetOrgPreferences ()
        {
             ApiResponse<OrgPreferences> localVarResponse = GetOrgPreferencesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get org preferences Gets preferences of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        public ApiResponse< OrgPreferences > GetOrgPreferencesWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Get org preferences Gets preferences of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        public async System.Threading.Tasks.Task<OrgPreferences> GetOrgPreferencesAsync ()
        {
             ApiResponse<OrgPreferences> localVarResponse = await GetOrgPreferencesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get org preferences Gets preferences of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> GetOrgPreferencesAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Get org settings Get settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgSetting</returns>
        public OrgSetting GetOrgSettings ()
        {
             ApiResponse<OrgSetting> localVarResponse = GetOrgSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get org settings Get settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgSetting</returns>
        public ApiResponse< OrgSetting > GetOrgSettingsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

        /// <summary>
        /// Get org settings Get settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgSetting</returns>
        public async System.Threading.Tasks.Task<OrgSetting> GetOrgSettingsAsync ()
        {
             ApiResponse<OrgSetting> localVarResponse = await GetOrgSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get org settings Get settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgSetting>> GetOrgSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

        /// <summary>
        /// Grant Okta Support Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        public OrgOktaSupportSettingsObj GrantOktaSupport ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = GrantOktaSupportWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grant Okta Support Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        public ApiResponse< OrgOktaSupportSettingsObj > GrantOktaSupportWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/grant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Grant Okta Support Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        public async System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> GrantOktaSupportAsync ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = await GrantOktaSupportAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grant Okta Support Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> GrantOktaSupportAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/grant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Show Okta UI Footer Hide the Okta UI footer for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        public OrgPreferences HideOktaUIFooter ()
        {
             ApiResponse<OrgPreferences> localVarResponse = HideOktaUIFooterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Okta UI Footer Hide the Okta UI footer for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        public ApiResponse< OrgPreferences > HideOktaUIFooterWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences/hideEndUserFooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HideOktaUIFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Show Okta UI Footer Hide the Okta UI footer for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        public async System.Threading.Tasks.Task<OrgPreferences> HideOktaUIFooterAsync ()
        {
             ApiResponse<OrgPreferences> localVarResponse = await HideOktaUIFooterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show Okta UI Footer Hide the Okta UI footer for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> HideOktaUIFooterAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences/hideEndUserFooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HideOktaUIFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Opt in all users to Okta Communication emails Opts in all users of this org to Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        public OrgOktaCommunicationSetting OptInUsersToOktaCommunicationEmails ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = OptInUsersToOktaCommunicationEmailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Opt in all users to Okta Communication emails Opts in all users of this org to Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        public ApiResponse< OrgOktaCommunicationSetting > OptInUsersToOktaCommunicationEmailsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication/optIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptInUsersToOktaCommunicationEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Opt in all users to Okta Communication emails Opts in all users of this org to Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        public async System.Threading.Tasks.Task<OrgOktaCommunicationSetting> OptInUsersToOktaCommunicationEmailsAsync ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = await OptInUsersToOktaCommunicationEmailsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Opt in all users to Okta Communication emails Opts in all users of this org to Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> OptInUsersToOktaCommunicationEmailsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication/optIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptInUsersToOktaCommunicationEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Opt out all users from Okta Communication emails Opts out all users of this org from Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaCommunicationSetting</returns>
        public OrgOktaCommunicationSetting OptOutUsersFromOktaCommunicationEmails ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = OptOutUsersFromOktaCommunicationEmailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Opt out all users from Okta Communication emails Opts out all users of this org from Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaCommunicationSetting</returns>
        public ApiResponse< OrgOktaCommunicationSetting > OptOutUsersFromOktaCommunicationEmailsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication/optOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptOutUsersFromOktaCommunicationEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Opt out all users from Okta Communication emails Opts out all users of this org from Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaCommunicationSetting</returns>
        public async System.Threading.Tasks.Task<OrgOktaCommunicationSetting> OptOutUsersFromOktaCommunicationEmailsAsync ()
        {
             ApiResponse<OrgOktaCommunicationSetting> localVarResponse = await OptOutUsersFromOktaCommunicationEmailsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Opt out all users from Okta Communication emails Opts out all users of this org from Okta Communication emails.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaCommunicationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaCommunicationSetting>> OptOutUsersFromOktaCommunicationEmailsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaCommunication/optOut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptOutUsersFromOktaCommunicationEmails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaCommunicationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaCommunicationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaCommunicationSetting)));
        }

        /// <summary>
        /// Partial update Org Setting Partial update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrgSetting</returns>
        public OrgSetting PartialUpdateOrgSetting (OrgSetting body = null)
        {
             ApiResponse<OrgSetting> localVarResponse = PartialUpdateOrgSettingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partial update Org Setting Partial update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrgSetting</returns>
        public ApiResponse< OrgSetting > PartialUpdateOrgSettingWithHttpInfo (OrgSetting body = null)
        {

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateOrgSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

        /// <summary>
        /// Partial update Org Setting Partial update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrgSetting</returns>
        public async System.Threading.Tasks.Task<OrgSetting> PartialUpdateOrgSettingAsync (OrgSetting body = null)
        {
             ApiResponse<OrgSetting> localVarResponse = await PartialUpdateOrgSettingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partial update Org Setting Partial update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgSetting>> PartialUpdateOrgSettingAsyncWithHttpInfo (OrgSetting body = null)
        {

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialUpdateOrgSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

        /// <summary>
        /// Extend Okta Support Revokes Okta Support access to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgOktaSupportSettingsObj</returns>
        public OrgOktaSupportSettingsObj RevokeOktaSupport ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = RevokeOktaSupportWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extend Okta Support Revokes Okta Support access to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgOktaSupportSettingsObj</returns>
        public ApiResponse< OrgOktaSupportSettingsObj > RevokeOktaSupportWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Extend Okta Support Revokes Okta Support access to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgOktaSupportSettingsObj</returns>
        public async System.Threading.Tasks.Task<OrgOktaSupportSettingsObj> RevokeOktaSupportAsync ()
        {
             ApiResponse<OrgOktaSupportSettingsObj> localVarResponse = await RevokeOktaSupportAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extend Okta Support Revokes Okta Support access to your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgOktaSupportSettingsObj)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgOktaSupportSettingsObj>> RevokeOktaSupportAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/privacy/oktaSupport/revoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeOktaSupport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgOktaSupportSettingsObj>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgOktaSupportSettingsObj) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgOktaSupportSettingsObj)));
        }

        /// <summary>
        /// Show Okta UI Footer Makes the Okta UI footer visible for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OrgPreferences</returns>
        public OrgPreferences ShowOktaUIFooter ()
        {
             ApiResponse<OrgPreferences> localVarResponse = ShowOktaUIFooterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show Okta UI Footer Makes the Okta UI footer visible for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OrgPreferences</returns>
        public ApiResponse< OrgPreferences > ShowOktaUIFooterWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences/showEndUserFooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowOktaUIFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Show Okta UI Footer Makes the Okta UI footer visible for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OrgPreferences</returns>
        public async System.Threading.Tasks.Task<OrgPreferences> ShowOktaUIFooterAsync ()
        {
             ApiResponse<OrgPreferences> localVarResponse = await ShowOktaUIFooterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show Okta UI Footer Makes the Okta UI footer visible for all end users of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OrgPreferences)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgPreferences>> ShowOktaUIFooterAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/preferences/showEndUserFooter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowOktaUIFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgPreferences>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgPreferences) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgPreferences)));
        }

        /// <summary>
        /// Update org contact user Updates the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>OrgContactUser</returns>
        public OrgContactUser UpdateOrgContactUser (OrgContactUser body, string contactType)
        {
             ApiResponse<OrgContactUser> localVarResponse = UpdateOrgContactUserWithHttpInfo(body, contactType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update org contact user Updates the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>ApiResponse of OrgContactUser</returns>
        public ApiResponse< OrgContactUser > UpdateOrgContactUserWithHttpInfo (OrgContactUser body, string contactType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrgApi->UpdateOrgContactUser");
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling OrgApi->UpdateOrgContactUser");

            var localVarPath = "./api/v1/org/contacts/{contactType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarPathParams.Add("contactType", this.Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgContactUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgContactUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgContactUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgContactUser)));
        }

        /// <summary>
        /// Update org contact user Updates the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>Task of OrgContactUser</returns>
        public async System.Threading.Tasks.Task<OrgContactUser> UpdateOrgContactUserAsync (OrgContactUser body, string contactType)
        {
             ApiResponse<OrgContactUser> localVarResponse = await UpdateOrgContactUserAsyncWithHttpInfo(body, contactType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update org contact user Updates the User associated with the specified Contact Type.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contactType"></param>
        /// <returns>Task of ApiResponse (OrgContactUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgContactUser>> UpdateOrgContactUserAsyncWithHttpInfo (OrgContactUser body, string contactType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrgApi->UpdateOrgContactUser");
            // verify the required parameter 'contactType' is set
            if (contactType == null)
                throw new ApiException(400, "Missing required parameter 'contactType' when calling OrgApi->UpdateOrgContactUser");

            var localVarPath = "./api/v1/org/contacts/{contactType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactType != null) localVarPathParams.Add("contactType", this.Configuration.ApiClient.ParameterToString(contactType)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgContactUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgContactUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgContactUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgContactUser)));
        }

        /// <summary>
        /// Update org logo Updates the logo for your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void UpdateOrgLogo ()
        {
             UpdateOrgLogoWithHttpInfo();
        }

        /// <summary>
        /// Update org logo Updates the logo for your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrgLogoWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update org logo Updates the logo for your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrgLogoAsync ()
        {
             await UpdateOrgLogoAsyncWithHttpInfo();

        }

        /// <summary>
        /// Update org logo Updates the logo for your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrgLogoAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/org/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Org setting Update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OrgSetting</returns>
        public OrgSetting UpdateOrgSetting (OrgSetting body)
        {
             ApiResponse<OrgSetting> localVarResponse = UpdateOrgSettingWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Org setting Update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OrgSetting</returns>
        public ApiResponse< OrgSetting > UpdateOrgSettingWithHttpInfo (OrgSetting body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrgApi->UpdateOrgSetting");

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

        /// <summary>
        /// Update Org setting Update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OrgSetting</returns>
        public async System.Threading.Tasks.Task<OrgSetting> UpdateOrgSettingAsync (OrgSetting body)
        {
             ApiResponse<OrgSetting> localVarResponse = await UpdateOrgSettingAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Org setting Update settings of your organization.
        /// </summary>
        /// <exception cref="Okta.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OrgSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrgSetting>> UpdateOrgSettingAsyncWithHttpInfo (OrgSetting body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OrgApi->UpdateOrgSetting");

            var localVarPath = "./api/v1/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrgSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrgSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (OrgSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrgSetting)));
        }

    }
}
